"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"22-julyot-iot-beginners","metadata":{"permalink":"/blog/22-julyot-iot-beginners","source":"@site/blog/2022-07-22-iot-beginners.mdx","title":"22: IoT for Beginners lesson 4!","description":"Welcome to Day 22 of #JulyOT!!","date":"2022-07-22T00:00:00.000Z","formattedDate":"July 22, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"}],"readingTime":1.025,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"}],"frontMatter":{"slug":"22-julyot-iot-beginners","title":"22: IoT for Beginners lesson 4!","authors":["jimb"],"tags":["30days","iot","iot4b"],"draft":false},"nextItem":{"title":"22: Building .NET nanoFramework and interoperability","permalink":"/blog/22-nano-framework"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/22-julyot-iot-beginners\\" />\\n  <meta name=\\"twitter:title\\" content=\\"IoT for Beginners lesson 4\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Join us as we connect your IoT device to the internet as part of our live streamed IoT for Beginners lessons\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-22-iot-beginners.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/22-julyot-iot-beginners\\" />\\n</head>\\n\\n> Welcome to Day 22 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-22-iot-beginners.png)\\n\\n_Today we live stream lesson 4 of IoT for Beginners - connect your device to the internet._\\n\\n## IoT For Beginners\\n\\n[IoT for beginners](https://aka.ms/iot-beginners) is a free, open source, 24-lesson IoT curriculum. The second lesson is live-streamed today from the Microsoft Reactor. Watch it live at 9am Pacific Time, or catch the recording on the Microsoft Reactor YouTube channel.\\n\\n<a href=\'https://www.meetup.com/Microsoft-Reactor-Redmond/events/286453730/\'>\\n<img src=\'https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504717367%2F676x380.webp&w=3840&q=75\'  alt=\'IoT for beginners - Lesson 4, Connect your device to the internet, Friday July 22nd, 9am Pacific Time\'/>\\n</a>&nbsp;\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/Microsoft-Reactor-Redmond/events/286453730\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Register on MeetUp\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/IoTforbeginnersLess4\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Watch on YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>\\n\\nLearn more about IoT for Beginners on the official [IoT for Beginners GitHub repo](https://aka.ms/iot-beginners)."},{"id":"22-nano-framework","metadata":{"permalink":"/blog/22-nano-framework","source":"@site/blog/2022-07-22-nano-framework.md","title":"22: Building .NET nanoFramework and interoperability","description":"Welcome to Day 22 of #JulyOT!","date":"2022-07-22T00:00:00.000Z","formattedDate":"July 22, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"}],"readingTime":14.615,"hasTruncateMarker":false,"authors":[{"name":"Laurent Ellerbach","title":"Principal Engineering Manager @Microsoft","url":"https://github.com/ellerbach","imageURL":"https://github.com/ellerbach.png","key":"laurent"},{"name":"Jos\xe9 Sim\xf5es","title":"CEO @Eclo Solutions","url":"https://github.com/josesimoes","imageURL":"https://github.com/josesimoes.png","key":"jose"}],"frontMatter":{"slug":"22-nano-framework","title":"22: Building .NET nanoFramework and interoperability","authors":["laurent","jose"],"tags":["30days","iot","embeddediot"],"draft":false},"prevItem":{"title":"22: IoT for Beginners lesson 4!","permalink":"/blog/22-julyot-iot-beginners"},"nextItem":{"title":"21: Microsoft Certified - Azure IoT Developer Specialty","permalink":"/blog/julyot-day21-az220"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/22-nano-framework\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Building .NET nanoFramework and interoperability\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Building .NET nanoFramework and interoperability\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-22-nanoframework.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@Jose_Simoes\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/22-nano-framework\\" />\\n</head>\\n\\n> Welcome to Day 22 of **#JulyOT**!\\n\\n![Page banner](/img/png/JulyOT-banner-22-nanoframework.png)\\n\\n## Building .NET nanoFramework\\n\\nYou can build your image for an MCU with .NET nanoFramework. In most cases, you\'ll use prebuilt images for popular boards, including advanced ESP32 devices like the ones from M5Stack for which we offer [specific firmware](https://github.com/nanoframework/Home#m5stack) images and NuGets with [Board Support Packages](https://github.com/nanoframework/nanoFramework.M5Stack).\\n\\nHowever, there are situations in which you\'ll want to build the image yourself. There are Developer Container images available for you to use. They contain all the toolchains and required tools. Check out the article on [using Dev Container to build targets](https://docs.nanoframework.net/content/building/using-dev-container.html). In case you prefer not to use the Dev Containers, it\'s possible to use a local setup too. Every step is well documented at [Building .NET nanoFramework](https://docs.nanoframework.net/content/building/index.html).\\n\\n## Interop in .NET nanoFramework\\n\\n.NET nanoFramework supports a _lightweight_ version of Interop which allows adding existing C/C++ code to .NET nanoFramework image. It\'s convenient, for example,  when you want to use a library that has been perfected over the years or when there is the need to perform processor-intensive operations that benefit from being executed directly by the CPU.\\n\\nThis is architected in such a way that the \\"foreign\\" code remains completely isolated from the CLR and the official libraries and drivers. With this, you can\'t break things upstream and it can be easily incorporated into the build process without requiring tweaks and handling complex merge operations.\\n\\nBecause the ultimate goal is to tap into this code from C#, there are two layers for this to happen:\\n\\n* The C# library acts as a wrapper and offers the interface to the C/C++ code.\\n* The C/C++ code that gets called from C#.\\n\\nLet\'s take look at how this works by creating a very simple Interop library that reads a hardware ID and performs a \\"complex\\" calculation.\\n\\n## Creating the C# (managed) library\\n\\nCreate a new .NET nanoFramework project in Visual Studio\\n\\nThis is the very first step. Open Visual Studio, File, New Project.\\nNavigate to the C# .NET nanoFramework folder and select a Class Library project type.\\nFor this example, we\u2019ll call the project \u201cNF.AwesomeLib\u201d.\\n\\n![New Class Library project](../static/img/png/nanoframework-interop-new-project.png)\\n\\nGo to the Project properties (click the project icon in the Solution Explorer and go to the Properties Window) and navigate to the nanoFramework configuration properties view. Set the \u201cGenerate stub files\u201d option to YES and the root name to NF.AwesomeLib.\\n\\n![Class Library project properties](../static/img/png/nanoframework-interop-library-properties.png)\\n\\nNow rename the Class1.cs that Visual Studio adds by default to Utilities.cs. Make sure that the class name inside that file gets renamed too. Add a new class named Math.cs. On both make sure that the class is public.\\n\\nYour project should now look like this.\\n\\n![Class Library project properties](../static/img/png/nanoframework-interop-class-view.png)\\n\\n### Adding the API methods and the stubs\\n\\nThe next step will be adding the methods and/or properties that you want available on the C# managed API. These are the ones that will be called from a C# project referencing your Interop library.\\n\\nWe\'ll add an HardwareSerial property to the Utilities class and call the native method that supports the API at the native end. Like this.\\n\\n```csharp\\nnamespace NF.AwesomeLib\\n{\\n\\tpublic class Utilities\\n\\t{\\n        private static byte[] _hardwareSerial;\\n\\n        /// <summary>\\n        /// Gets the hardware unique serial ID (12 bytes).\\n        /// </summary>\\n        public static byte[] HardwareSerial\\n        {\\n            get\\n            {\\n                if (_hardwareSerial == null)\\n                {\\n                    _hardwareSerial = new byte[12];\\n                    NativeGetHardwareSerial(_hardwareSerial);\\n                }\\n\\n                return _hardwareSerial;\\n            }\\n        }\\n\\n        #region Stubs \\n\\n        [MethodImpl(MethodImplOptions.InternalCall)]\\n        private static extern void NativeGetHardwareSerial(byte[] data);\\n\\n        #endregion stubs \\n    }\\n}\\n```\\n\\nNote that, except for strings, you\u2019re free to use any of the standard types in the arguments of the Interop methods. It\u2019s OK to use arrays of those too.\\n\\nA few explanations on the above:\\n\\n* The property `HardwareSerial` has only a getter because we are only reading the serial from the hardware. As that can\u2019t be written, it doesn\u2019t make sense to provide a setter, right?\\n* The serial number is stored in a backing field to be more efficient. When it\u2019s read the first time it will go and read it from the processor. On subsequent accesses that won\u2019t be necessary.\\n* Note the summary comment on the property. Visual Studio uses that to generate an XML file that makes the awesome IntelliSense show that documentation on the projects referencing the library.\\n* The serial number of the processor is handled as an array of bytes with a length of 12. This was taken from the device manual.\\n* A stub method must exist to enable Visual Studio to create the placeholder for the C/C++ code. So you need to have one for each stub that is required.\\n* The stub methods must be implemented as an extern and be decorated with the MethodImplAttribute attribute. Otherwise, Visual Studio won\u2019t be able to do its magic.\\n* You may want to find a working system for you regarding the stub naming and where you place them in the class. Maybe you want to group them in a region, or you prefer to keep them along the caller method. It will work in any of those ways, just a hint on keeping things organized.\\n\\nMoving on to the Math class. We\u2019ll now add an API method called SuperComplicatedCalculation and the respective stub. It will look like this:\\n\\n```csharp\\nnamespace NF.AwesomeLib\\n{\\n\\tpublic class Math\\n    {\\n        /// <summary>\\n        /// Crunches value through a super complicated and secret calculation algorithm.\\n        /// </summary>\\n        /// <param name=\\"value\\">Value to crunch.</param>\\n        /// <returns></returns>\\n        public double SuperComplicatedCalculation(double value)\\n        {\\n            return NativeSuperComplicatedCalculation(value);\\n        }\\n\\n        #region Stubs\\n\\n        [MethodImpl(MethodImplOptions.InternalCall)]\\n        private static extern double NativeSuperComplicatedCalculation(double value);\\n\\n        #endregion stubs\\n    }\\n}\\n```\\n\\nAnd this is all that\u2019s required on the managed side! Build the project and look at the project folder (using VS Code for example). This is what it will look like after a successful build:\\n\\n![Class Library project properties](../static/img/png/nanoframework-interop-native-view.png)\\n\\nFrom the top to the bottom, you can identify in the bin folder (debug or release flavor depending on your build preference) the .NET library that will be referenced in other projects. Please note that besides the .dll file there is the .xml file (the one that enables IntelliSense to do its magic), the .pdb file, and another one with a .pe extension.\\nWhen distributing the Interop library make sure that you package all four files. Failing to do so, will make Visual Studio complain that the project can\u2019t build. You can distribute all those in a ZIP or even better, as a NuGet package.\\n\\n## Working on the C/C++ (native) code\\n\\nMoving to the Stubs folder we can find a bunch of files and a .cmake file. All those are required when building the nanoCLR image that will add support for your Interop library.\\n\\nLook at the file names: they follow the namespace and class naming in the Visual Studio project.\\nSomething very, very important: don\u2019t rename or mess around with the content of those files. If you do that, you\'ll risk that the image build will fail or you can also end up with the Interop library not doing anything. This can be very frustrating and hard to debug. So, again, DO NOT mess around with those files!\\n\\nThe only exception to that will be, of course, the ones that include the stubs for the C/C++ code that we\'ll be adding. Those are the .cpp files that end with the class name.\\nIn our example those are: `NF_AwesomeLib_NF_AwesomeLib_Math.cpp` and `NF_AwesomeLib_NF_AwesomeLib_Utilities.cpp`.\\n\\nYou\u2019ve probably also noted that there are a couple of other files with a similar name but ending with _mshl. Those are the marshaling files that are responsible for validation, sanity checks, and marshaling the interface between the managed and native code. Those are to be left alone. Again DO NOT change them!\\n\\nLet\u2019s look at the stub file for the Utilities class. That\u2019s the one that will read the processor serial number.\\n\\n```csharp\\nvoid Utilities::NativeGetHardwareSerial( CLR_RT_TypedArray_UINT8 param0, HRESULT &hr )\\n{\\n}\\n```\\n\\nThis is an empty C++ function named after the class and the stub method that you\u2019ve placed in the C# project.\\n\\nLet\u2019s take a moment to understand what we have here.\\n\\n* The return value of the C++ function matches the type of the C# stub method. Which is void in this case.\\n* The first argument has a type that is mapping between the C# type and the equivalent C++ type. An array of bytes in this case.\\n* The last argument is an HRESULT type whose purpose is to report the result of the code execution. We\u2019ll get back to this so don\u2019t worry about it for now. Just understand what\u2019s the purpose of it.\\n\\nAccording to the programming manual STM32F4 devices have a 96 bits (12 bytes) unique serial number that is stored starting at address 0x1FFF7A10. For STM32F7 that address is 0x1FF0F420. In other STM32 series, the ID may be located at a different address. Now that we know where it is stored we can add code to read it. I\u2019ll start with the code first and then walk through it.\\n\\n```cpp\\nvoid Utilities::NativeGetHardwareSerial( CLR_RT_TypedArray_UINT8 param0, HRESULT &hr )\\n{\\n  if (param0.GetSize() < 12)\\n  {\\n    hr=CLR_E_BUFFER_TOO_SMALL;\\n    return;\\n  }\\n  \\n  memcpy((void*)param0.GetBuffer(), (const void*)0x1FFF7A10, 12);\\n}\\n```\\n\\nThe first if statement is a sanity check to be sure that there is enough room in the array to hold the serial number bytes. Why is this important?\\nRemember that here we are not in the C# world anymore where the CRL and Visual Studio take care of the hard stuff for us. In C++ things are very different! In this particular example if the caller wouldn\u2019t have reserved the required 12 bytes in memory to hold the complete serial array when writing onto it the 12 bytes from the serial could be overwriting something that is stored in the memory space ahead of the argument address. For types other than pointers such as bytes, integers, and doubles this check is not required.\\n\\nStill on the if statement you can see that if there is not enough room we can\u2019t continue. Before the code returns we are setting hr to CLR_E_BUFFER_TOO_SMALL (that\u2019s the argument that holds the execution result, remember?). This is to signal that something went wrong and give some clue on what that might be. There is still more to say about this result argument, so we\u2019ll get back to it.\\n\\nThe next piece of code is where \u2013 finally \u2013 we are reading the serial from the device.\\nAs the serial number is accessible in a memory address we can simply use a `memcpy` to copy it from its memory location to the argument.\\nA few comments about the argument type (`CLR_RT_TypedArray_UINT8`). It acts like a wrapper for the memory block that holds the array (or a pointer if you prefer). The class for that type provides a function \u2013 called `GetBuffer()` \u2013 that returns the actual pointer that allows direct access to it. We need that because we have to pass a pointer when calling `memcpy`. This may sound a bit complicated, granted. If you are curious about the implementation details or want to know how it works I suggest that you delve into the .NET nanoFramework interpreter code in our [GitHub repository](https://github.com/nanoframework/nf-interpreter).\\n\\nAnd that\u2019s it! When this function returns the CPU serial number will be in the argument pointer and will eventually pop up in the C# managed code in that argument with the same name.\\n\\nFor the `Math` class, there won\u2019t be any calls to hardware or any other fancy stuff, just a complicated and secret calculation to illustrate the use of Interop for simple code execution.\\n\\nVisual Studio has already generated a nice stub for us to fill in with code. Here\u2019s the original stub:\\n\\n```cpp\\ndouble Math::NativeSuperComplicatedCalculation( double param0, HRESULT &hr )\\n{\\n  double retVal = 0;\\n  return retVal;\\n}\\n```\\n\\nNote that the stub function, again, matches the declaration of its C# managed counterpart and, again, has that `hr` argument to return the execution result.\\nVisual Studio was kind enough to add there the code for the return value so we can start coding on top of that. That is required, otherwise, this code wouldn\u2019t even compile. \ud83d\ude09\\n\\nWhere is the super complicated and secret algorithm:\\n\\n```cpp\\ndouble Math::NativeSuperComplicatedCalculation( double param0, HRESULT &hr )\\n{\\n  double retVal = 0;\\n  \\n  retVal = param0 + 1;\\n  \\n  return retVal;\\n}\\n```\\n\\nAnd, with this, we complete the native \u201clow level\u201d implementation of our Interop library.\\n\\n## Adding the Interop library to a nanoCLR image\\n\\nThe last step that is missing is adding the Interop source code files to the build of a nanoCLR image.\\n\\nYou can place the code files pretty much anywhere you want. Either on the same source tree or elsewhere. The nanoFramework interpreter repo has a folder named `Interop` that you can use for exactly this: holding the folders of the Interop assemblies that you have. Any changes inside that folder won\u2019t be picked up by Git.\\nTo make it simple we\u2019ll follow that and we just copy what is in the Stubs folder into a new folder `InteropAssemblies\\\\NF.AwesomeLib\\\\`.\\n\\nThe next file to get our attention is `FindINTEROP-NF.AwesomeLib.cmake`. .NET nanoFramework uses CMake as its build system. Skipping through the technical details, suffice to say that, as far as CMake is concerned, the Interop assembly will be treated as a CMake module and, because of that, the file name for the file to be properly included in the build, has to named FindINTEROP-NF.AwesomeLib.cmake and has to be placed inside the CMake\\\\Modules folder.\\n\\nInside that file, the only thing that requires your attention is the first statement where the location of the source code folder is declared.\\n\\n```console\\n(...)\\n# native code directory\\nset(BASE_PATH_FOR_THIS_MODULE \\"${BASE_PATH_FOR_CLASS_LIBRARIES_MODULES}/NF.AwesomeLib\\")\\n(...)\\n```\\n\\nIf you are placing it inside that `Interop` folder the required changes are:\\n\\n```console\\n(...)\\n# native code directory\\nset(BASE_PATH_FOR_THIS_MODULE \\"${PROJECT_SOURCE_DIR}/InteropAssemblies/NF.AwesomeLib\\")\\n(...)\\n```\\n\\nAnd this is it! Now to the build.\\n\\nPlease refer to the documentation mentioned above about using Dev Containers or setting up the local toolchain to build .NET nanoFramework firmware image.\\n\\nLet\'s assume If you are using the CMake Tools module to build inside VS Code. You need to declare that you want this Interop assembly added to the build. Do so by opening the CMakeUserPresets.json file and navigating to the settings for the target you want it added to.\\n\\nThere you need to add the following CMake build option:\\n\\n```console\\n    \\"cacheVariables\\": {\\n        \\"TARGET_BOARD\\": {\\n            \\"type\\": \\"STRING\\",\\n            \\"value\\": \\"${presetName}\\"\\n        },\\n        \\"NF_INTEROP_ASSEMBLIES\\": [ \\"NF.AwesomeLib\\" ],\\n    }\\n```\\n\\nA couple of notes about this:\\n\\nThe `NF_INTEROP_ASSEMBLIES` option expects a collection. This is because you can add as many Interop libraries as you want to a nanoCLR firmware image.\\nThe name of the assembly must match exactly the class name. Dots included. If you screw up this you\u2019ll notice it immediately in the build.\\n\\nThe following task is launching the image build. Fingers crossed you won\'t have any errors\u2026 \ud83d\ude09\\n\\nFirst, check the CMake preparation output, you should see the Interop library listed:\\n\\n![CMake build setup](../static/img/png/nanoframework-interop-build-include-lib.png)\\n\\nAfter the build completes successfully, you should be seeing something similar to this:\\n\\n![CMake build setup](../static/img/png/nanoframework-interop-build-ok.png)\\n\\nWe now have a nanoCLR firmware image ready to be flashed on a real board!\\n\\nThe next check after loading a target with the nanoCLR firmware image that includes the Interop library is seeing it listed in the Native Assemblies listing. After booting the target is listed in the Visual Studio Device Explorer list and after you click on the Device Capabilities button you\u2019ll see it in the output window like this:\\n\\n![CMake build setup](../static/img/png/nanoframework-interop-device-capabilities.png)\\n\\n## Using an Interop library\\n\\nThis works just like any other .NET library that you use every day. In Visual Studio open the Add reference dialog and search for the NF.AwesomeLib.dll file that was the output result of building the Interop Project (you\u2019ll find it in the bin folder). As you are going through that, note the companion XML file with the same name. With that file there you\u2019ll see the documentation comments shown by IntelliSense as you code.\\n\\nThis is the code to test the Interop library. In the first part, we read the CPU serial number and output it as a hexadecimal formatted string. On the second we call the method that crunches the input value.\\n\\n```csharp\\npublic static void Main()\\n{\\n    // testing cpu serial number\\n    string serialNumber = \\"\\";\\n\\n    foreach (byte b in Utilities.HardwareSerial)\\n    {\\n        serialNumber += b.ToString(\\"X2\\");\\n    }\\n\\n    Debug.WriteLine(\\"cpu serial number: \\" + serialNumber);\\n\\n    // test complicated calculation\\n    NF.AwesomeLib.Math math = new NF.AwesomeLib.Math();\\n    double result = math.SuperComplicatedCalculation(11.12);\\n\\n    Debug.WriteLine(\\"calculation result: \\" + result);\\n\\n    Thread.Sleep(Timeout.Infinite);\\n}\\n```\\n\\nHere\u2019s a screenshot of Visual Studio running the test app. Note the serial number and the calculation result in the Output window (in green). Also, the DLL is listed in the project references (in yellow).\\n\\n![CMake build setup](../static/img/png/nanoframework-interop-referencing-library.png)\\n\\n## Wrapping up\\n\\nAnd that\u2019s it! We\'ve seen how powerful this Interop feature is and hopefully illustrated how you can (re)use C/C++ code in a .NET nanoFramework C# application!\\n\\nThe content above describes the key aspects and steps to get Interop working. It is a complex feature and you can read a more thorough and detailed description of all this in [this blog post](https://jsimoesblog.wordpress.com/2018/06/19/interop-in-net-nanoframework/).\\n\\nAlso, you can find the code related to Interop in .NET nanoFramework in our [samples repository](https://github.com/nanoframework/Samples/tree/main/samples/Interop).\\n\\nEnjoy it and have fun coding with .NET C# for microcontrollers!"},{"id":"julyot-day21-az220","metadata":{"permalink":"/blog/julyot-day21-az220","source":"@site/blog/2022-07-21-az220-intro.md","title":"21: Microsoft Certified - Azure IoT Developer Specialty","description":"Welcome to Day 21 of #JulyOT!!","date":"2022-07-21T00:00:00.000Z","formattedDate":"July 21, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"az220","permalink":"/blog/tags/az-220"},{"label":"iotcerts","permalink":"/blog/tags/iotcerts"}],"readingTime":1.11,"hasTruncateMarker":false,"authors":[{"name":"Diana Phillips","title":"Principal Cloud Solution Architect @Microsoft","url":"https://github.com/UtahITPro","imageURL":"https://pbs.twimg.com/profile_images/705426782762045440/sJC4hb1N_400x400.jpg","key":"diana"}],"frontMatter":{"slug":"julyot-day21-az220","title":"21: Microsoft Certified - Azure IoT Developer Specialty","authors":["diana"],"tags":["30days","iot","az220","iotcerts"],"draft":false},"prevItem":{"title":"22: Building .NET nanoFramework and interoperability","permalink":"/blog/22-nano-framework"},"nextItem":{"title":"21: Creating intelligent autonomous systems with project bonsai","permalink":"/blog/21-project-bonsai"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/julyot-day21-az220-intro\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Microsoft Certified - Azure IoT Developer Specialty\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Earn your Azure IoT Developer Specialty certification by passing only one exam: AZ-220 \u2013 Microsoft Azure IoT Developer\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-21-az220-intro.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@utahitpro\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/julyot-day21-az220-intro\\" />\\n</head>\\n\\n> Welcome to Day 21 of **#JulyOT**!!\\n\\n![Post banner](/img/png/JulyOT-banner-21-az220-intro.png)\\n\\n_Now that you\'ve been learning all about IoT during #JulyOT, it\'s time to consider certification!_\\n\\nWhether you\u2019re a student wanting to validate your expertise in IoT or a professional IoT solution developer looking to stand out from the crowd, the [Azure IoT Developer Specialty certification](https://docs.microsoft.com/learn/certifications/exams/az-220?wt.mc_id=eventspg_16482_webpage_reactor) may be perfect for you! This certification involves passing only one exam: [AZ-220 \u2013 Microsoft Azure IoT Developer](https://docs.microsoft.com/certifications/exams/az-220?wt.mc_id=eventspg_16482_webpage_reactor)\\n\\n![Specialty Azure IoT Developer](/img/png/specialty-azure-iot-developer.png)\\n\\n## Skills Measured\\n\\nThe AZ-220 exam measures your ability to:\\n\\n* Set up the IoT solution infrastructure (10-15%)\\n* Provision and manage devices (15-20%)\\n* Implement IoT Edge (15-20%)\\n* Implement business integration (5-10%)\\n* Process and manage data (15-20%)\\n* Monitor, troubleshoot, and optimize IoT solutions (15-20%)\\n* Implement security (10-15%)\\n\\nStay tuned as we share resources for each of these exam areas throughout the rest of #JulyOT to help you prepare!\\n\\n## Get Started\\n\\nVisit the [AZ-220 \u2013 Microsoft Azure IoT Developer](https://docs.microsoft.com/certifications/exams/az-220?wt.mc_id=eventspg_16482_webpage_reactor) exam page to learn more."},{"id":"21-project-bonsai","metadata":{"permalink":"/blog/21-project-bonsai","source":"@site/blog/2022-07-21-project-bonsai.mdx","title":"21: Creating intelligent autonomous systems with project bonsai","description":"Welcome to Day 21 of #JulyOT!!","date":"2022-07-21T00:00:00.000Z","formattedDate":"July 21, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"},{"label":"bonsai","permalink":"/blog/tags/bonsai"}],"readingTime":2.1,"hasTruncateMarker":false,"authors":[{"name":"Josh Ndemenge","title":"Cloud Advocate @Microsoft","url":"https://github.com/Jcardif","imageURL":"https://github.com/Jcardif.png","key":"josh"}],"frontMatter":{"slug":"21-project-bonsai","title":"21: Creating intelligent autonomous systems with project bonsai","authors":["josh"],"tags":["30days","iot","iot4b","aiatedge","bonsai"],"draft":false},"prevItem":{"title":"21: Microsoft Certified - Azure IoT Developer Specialty","permalink":"/blog/julyot-day21-az220"},"nextItem":{"title":"20: Azure IoT con Raspberry Pi y reTerminal","permalink":"/blog/20-azure-iot-pi-reterminal-juliot"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/21-project-bonsai\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Creating intelligent autonomous systems with project bonsai\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Learn how to create intelligent autonomous systems with project bonsai from our upcoming livestreams\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-21-project-bonsai.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@Jcardif254\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/21-project-bonsai\\" />\\n</head>\\n\\n> Welcome to Day 21 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-21-project-bonsai.png)\\n\\n_Today we preview 4 livestreams to teach you how to create intelligent autonomous systems with Project Bonsai._\\n\\n## Project Bonsai\\n\\n[Project Bonsai](https://docs.microsoft.com/bonsai/?wt.mc_id=eventspg_16482_webpage_reactor) is a Low-code AI development platform. Improve production and reduce downtime with engineer-built AI that gives optimization guidance or makes independent decisions. Join Microsoft Cloud Advocate Josh Ndemenge for these 4 live streams to learn everything you need to know.\\n\\n### Creating intelligent autonomous systems with project bonsai\\n\\n**Thursday, July 21, 9:00 AM Pacific Time**\\n\\n<a href=\'https://www.meetup.com/microsoft-reactor-new-york/events/287206950/\'>\\n<img src=\'https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F505559517%2F676x380.webp&w=3840&q=75\'  alt=\'Creating intelligent autonomous systems with project bonsai, Thursday, July 21, 9:00 AM Pacific Time\'/>\\n</a>&nbsp;\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-new-york/events/287206950/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Register on MeetUp\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/JulyOTIntelligentsystems\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Watch on YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>\\n\\n### Teaching Industrial Autonomous Systems\\n\\n**Tuesday, July 26, 7:00 AM Pacific Time**\\n\\n<a href=\'https://www.meetup.com/microsoft-reactor-toronto/events/286903784/\'>\\n<img src=\'https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F505225995%2F676x380.webp&w=3840&q=75\'  alt=\'Teaching Industrial Autonomous Systems, Tuesday, July 26, 7:00 AM Pacific Time\'/>\\n</a>&nbsp;\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-toronto/events/286903784/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Register on MeetUp\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/Jul26AutonomousSystems\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Watch on YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>\\n\\n### Building your first Bonsai Brain\\n\\n**Thursday, July 28, 9:00 AM Pacific Time**\\n\\n<a href=\'https://www.meetup.com/microsoft-reactor-new-york/events/287206943/\'>\\n<img src=\'https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F505559507%2F676x380.webp&w=3840&q=75\'  alt=\'Building your first Bonsai Brain, Thursday, July 28, 9:00 AM Pacific Time\'/>\\n</a>&nbsp;\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-new-york/events/287206943/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Register on MeetUp\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/JulyOTBonsaiBrain\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Watch on YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>\\n\\n### Deploying a Bonsai Brain using Azure IoT Edge\\n\\n**Thursday, August 4, 9:00 AM Pacific Time**\\n\\n<a href=\'https://www.meetup.com/microsoft-reactor-new-york/events/287206935/\'>\\n<img src=\'https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F505559460%2F676x380.webp&w=3840&q=75\'  alt=\'Deploying a Bonsai Brain using Azure IoT Edge, Thursday, August 4, 9:00 AM Pacific Time\'/>\\n</a>&nbsp;\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-new-york/events/287206935/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Register on MeetUp\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/JulyOTDeployBonsaiBrain\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Watch on YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>"},{"id":"20-azure-iot-pi-reterminal-juliot","metadata":{"permalink":"/blog/20-azure-iot-pi-reterminal-juliot","source":"@site/blog/2022-07-20-pi-reterminal-juliot.mdx","title":"20: Azure IoT con Raspberry Pi y reTerminal","description":"Bienvenida al dia 20 de #JulIoT!!","date":"2022-07-20T00:00:00.000Z","formattedDate":"July 20, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"}],"readingTime":2.085,"hasTruncateMarker":false,"authors":[{"name":"Bruno Capuano","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/elbruno","imageURL":"https://github.com/elbruno.png","key":"bruno"}],"frontMatter":{"slug":"20-azure-iot-pi-reterminal-juliot","title":"20: Azure IoT con Raspberry Pi y reTerminal","authors":["bruno"],"tags":["30days","iot","iot4b","aiatedge"],"draft":false},"prevItem":{"title":"21: Creating intelligent autonomous systems with project bonsai","permalink":"/blog/21-project-bonsai"},"nextItem":{"title":"20: Azure IoT with a Raspberry Pi and reTerminal","permalink":"/blog/20-azure-iot-pi-reterminal"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/20-azure-iot-pi-reterminal-juliot\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Azure IoT con Raspberry Pi y reTerminal\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Azure IoT con Raspberry Pi y reTerminal\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-20-azure-iot-pi-reterminal-juliot.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@elbruno\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/20-azure-iot-pi-reterminal-juliot\\" />\\n</head>\\n\\n> Bienvenida al dia 20 de **#JulIoT**!!\\n\\n![Post banner](/img/png/JulyOT-banner-20-azure-iot-pi-reterminal-juliot.png)\\n\\n_En esta serie de sesiones, mostraremos c\xf3mo crear una soluci\xf3n completa de Azure IoT/Digital Twin utilizando dispositivos populares como Raspberry Pi, SeeedStudio reTerminal y un ascensor real._\\n\\n## Azure IoT with a Raspberry Pi and reTerminal\\n\\nEn esta serie de sesiones, mostraremos c\xf3mo crear una soluci\xf3n completa de Azure IoT/Digital Twin utilizando dispositivos populares como Raspberry Pi, SeeedStudio reTerminal y un ascensor real.\\n\\nEsta serie cubrir\xe1 las siguientes sesiones:\\n\\n- [Configurar Raspberry Pi y reTerminal como dispositivos Azure IoT](#configurar-raspberry-pi-y-reterminal-como-dispositivos-azure-iot)\\n- [Azure IoT Edge y Machine Learning \ud83e\udde0 con Raspberry Pi y reTerminal](#azure-iot-edge-y-machine-learning-\ud83e\udde0-con-raspberry-pi-y-reterminal)\\n- [Crear una soluci\xf3n Digital Twin/Azure IoT para un elevador \ud83d\uded7](#crear-una-soluci\xf3n-digital-twinazure-iot-para-un-elevador-\ud83d\uded7)\\n\\nMostraremos el proceso paso a paso para cada uno de estos escenarios. Y compartiremos algunas opciones de implementaci\xf3n, para que sea posible obtener algunas ideas y salir con un plan para comenzar a crear su propia soluci\xf3n Azure IoT.\\n\\n### Configurar Raspberry Pi y reTerminal como dispositivos Azure IoT\\n\\nVea esta transmisi\xf3n en vivo el martes 26 de julio de 2022 a las 10 a.m PDT.\\n\\n[![Registro de Meetup](https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504722868%2F676x380.webp&w=3840&q=75)](https://www.meetup.com/microsoft-reactor-toronto/events/286475097/)\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-toronto/events/286475097/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Registro de Meetup\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/Julio26JulIOT1\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Ver en YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>\\n\\n### Azure IoT Edge y Machine Learning \ud83e\udde0 con Raspberry Pi y reTerminal\\n\\nVea esta transmisi\xf3n en vivo el jueves 28 de julio de 2022 a las 10 a.m. PDT\\n\\n[![Registro de Meetup](https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504722908%2F676x380.webp&w=3840&q=75)](https://www.meetup.com/microsoft-reactor-toronto/events/286474956/)\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-toronto/events/286474956/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Registro de Meetup\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/Julio28JulIOT2\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Ver en YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>\\n\\n### Crear una soluci\xf3n Digital Twin/Azure IoT para un elevador \ud83d\uded7\\n\\nVea esta transmisi\xf3n en vivo el viernes 29 de julio de 2022 a las 12 p.m. PDT\\n\\n[![Registro de Meetup](https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504722955%2F676x380.webp&w=3840&q=75)](https://www.meetup.com/microsoft-reactor-toronto/events/286474805/)\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-toronto/events/286474805/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Registro de Meetup\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/Julio29JulIOT3\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Ver en YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>"},{"id":"20-azure-iot-pi-reterminal","metadata":{"permalink":"/blog/20-azure-iot-pi-reterminal","source":"@site/blog/2022-07-20-pi-reterminal.mdx","title":"20: Azure IoT with a Raspberry Pi and reTerminal","description":"Welcome to Day 20 of #JulyOT!!","date":"2022-07-20T00:00:00.000Z","formattedDate":"July 20, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"}],"readingTime":2.14,"hasTruncateMarker":false,"authors":[{"name":"Bruno Capuano","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/elbruno","imageURL":"https://github.com/elbruno.png","key":"bruno"}],"frontMatter":{"slug":"20-azure-iot-pi-reterminal","title":"20: Azure IoT with a Raspberry Pi and reTerminal","authors":["bruno"],"tags":["30days","iot","iot4b","aiatedge"],"draft":false},"prevItem":{"title":"20: Azure IoT con Raspberry Pi y reTerminal","permalink":"/blog/20-azure-iot-pi-reterminal-juliot"},"nextItem":{"title":"19: Powering Azure Sphere C Development with DevX","permalink":"/blog/julyot-day19-embedded"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/20-azure-iot-pi-reterminal\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Azure IoT with a Raspberry Pi and reTerminal\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Azure IoT with a Raspberry Pi and reTerminal\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-20-azure-iot-pi-reterminal.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@elbruno\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/20-azure-iot-pi-reterminal\\" />\\n</head>\\n\\n> Welcome to Day 20 of **#JulyOT**!!\\n\\n![Post banner](/img/png/JulyOT-banner-20-azure-iot-pi-reterminal.png)\\n\\n_In this upcoming livestream series we will show how to create a complete Azure IoT / Digital Twin solution using popular devices like a Raspberry Pi, SeeedStudio reTerminal and a real elevator._\\n\\n## Azure IoT with a Raspberry Pi and reTerminal\\n\\nIn this upcoming series we will show how to create a complete Azure IoT / Digital Twin solution using popular devices like a Raspberry Pi, SeeedStudio reTerminal and a real elevator.\\n\\nThis series will cover the following sessions:\\n\\n- [Let\'s setup a Raspberry Pi and a reTerminal as an Azure IoT \u2601\ufe0f device](#lets-setup-a-raspberry-pi-and-a-reterminal-as-an-azure-iot-\u2601\ufe0f-device)\\n- [Azure IoT Edge and Machine Learning \ud83e\udde0 with Raspberry Pi and reTerminal](#azure-iot-edge-and-machine-learning-\ud83e\udde0-with-raspberry-pi-and-reterminal)\\n- [Let\'s create a Digital Twin solution for our Azure IoT Elevator \ud83d\uded7](#lets-create-a-digital-twin-solution-for-our-azure-iot-elevator-\ud83d\uded7)\\n\\nWe will show the step-by-step process for each one of these scenarios. And, we\'ll share a few implementation options, so you can get some ideas and walk away with a plan to start creating your own Azure IoT solution.\\n\\n### Let\'s setup a Raspberry Pi and a reTerminal as an Azure IoT \u2601\ufe0f device\\n\\nCatch this stream live on Monday, July 25, 2022 at 10AM Pacific Time.\\n\\n[![Meetup registration](https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504721831%2F676x380.webp&w=3840&q=75)](https://www.meetup.com/microsoft-reactor-toronto/events/286473772/)\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-toronto/events/286473772/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Register on MeetUp\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/July25JulyOT1\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Watch on YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>\\n\\n### Azure IoT Edge and Machine Learning \ud83e\udde0 with Raspberry Pi and reTerminal\\n\\nCatch this stream live on Wednesday, July 27, 2022 at 10AM Pacific Time.\\n\\n[![Meetup registration](https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504721895%2F676x380.webp&w=3840&q=75)](https://www.meetup.com/microsoft-reactor-toronto/events/286473800/)\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-toronto/events/286473800/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Register on MeetUp\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/July27JulyOT2\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Watch on YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>\\n\\n### Let\'s create a Digital Twin solution for our Azure IoT Elevator \ud83d\uded7\\n\\nCatch this stream live on Friday, July 29, 2022 at 10AM Pacific Time.\\n\\n[![Meetup registration](https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504721912%2F676x380.webp&w=3840&q=75)](https://www.meetup.com/microsoft-reactor-toronto/events/286473825/)\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://www.meetup.com/microsoft-reactor-toronto/events/286473825/\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Register on MeetUp\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n        <form action=\\"https://aka.ms/July29JulyOT3\\" target=\\"_blank\\">\\n            <input type=\\"submit\\" value=\\"Watch on YouTube\\" class=\\"clean-btn button button--secondary margin-left--md\\"/>\\n        </form>\\n    </td>\\n</tr>\\n</table>"},{"id":"julyot-day19-embedded","metadata":{"permalink":"/blog/julyot-day19-embedded","source":"@site/blog/2022-07-19-embedded.md","title":"19: Powering Azure Sphere C Development with DevX","description":"Welcome to Day 19 of #JulyOT!!","date":"2022-07-19T00:00:00.000Z","formattedDate":"July 19, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"}],"readingTime":2.115,"hasTruncateMarker":false,"authors":[{"name":"Dave Glover","title":"Senior Cloud Advocate @Microsoft","url":"https://github.com/gloveboxes","imageURL":"https://github.com/gloveboxes.png","key":"dave"}],"frontMatter":{"slug":"julyot-day19-embedded","title":"19: Powering Azure Sphere C Development with DevX","authors":["dave"],"tags":["30days","iot","iot4b","embeddediot"],"draft":false},"prevItem":{"title":"20: Azure IoT with a Raspberry Pi and reTerminal","permalink":"/blog/20-azure-iot-pi-reterminal"},"nextItem":{"title":"18: Unlimited possibilities with Azure Percept","permalink":"/blog/18-azure-percept-blog-posts"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/julyot-day19-embedded\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Powering Azure Sphere C Development with DevX\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Azure Sphere DevX is an Open-Source community-driven library that is based on the GitHub Azure Sphere samples and from real-life experiences building Azure Sphere applications.\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-19-sphere-devx.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@dglover\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/julyot-day19-embedded\\" />\\n</head>\\n\\n> Welcome to Day 19 of **#JulyOT**!!\\n\\n![Post banner](/img/png/JulyOT-banner-19-sphere-devx.png)\\n\\n_Azure Sphere is a unique highly secure IoT platform. You focus on your solution, Azure Sphere deals with security, identity, certificates, reporting, tracking emerging attack vectors, mitigating, updating the platform, and application distribution to protect your solutions, customers, and reputations._\\n\\nI started my Azure Sphere journey 2 years ago. I\u2019d done plenty of embedded development, but I quickly realized there was a lot to learn about Azure Sphere. If this sounds like your journey, then do check out the \u201c[Combining Azure Sphere IoT security with Azure RTOS real-time capabilities](https://techcommunity.microsoft.com/t5/internet-of-things/combining-azure-sphere-iot-security-with-azure-rtos-real-time/ba-p/1992869)\u201d article. There are links to the Azure Sphere developer Learning paths for IoT Hub and IoT Central.\\n\\n## Azure Sphere DevX\\n\\nAzure Sphere DevX is an Open-Source community-driven library that is based on the GitHub Azure Sphere samples and from real-life experiences building Azure Sphere applications. Community contributions are very welcome.\\n\\nThe DevX library accelerates your development and will help to improve your developer experience building Azure Sphere applications. The DevX library addresses many common Azure Sphere scenarios, it will help reduce the amount of code you write and improve readability and long-term application maintenance.\\n\\nThe DevX library addresses many common Azure Sphere scenarios including the following:\\n\\n1. Azure IoT Messaging:\\nImplements connection management and simplifies sending messages along with application and content properties metadata.\\n1. Azure IoT Hub Device Twins:\\nHandles Device Twin JSON serialization and deserialization along with a type system to validate data types received and sent.\\n1. Direct methods:\\nSimplifies in-bound direct methods message processing and passes direct method payload to the associated direct method handler.\\n1. Intercore messaging:\\nProvides a context model to simplify the passing of messages between high-level and real-time application cores.\\n1. Event timers:\\nSimplified API for all common Event Timer scenarios.\\n1. Deferred updates:\\nYou focus on when you want application and OS updates to occur rather than how to defer updates.\\n1. Async events:\\nAsync events enable you to marshal calls from one thread to another for event-driven applications.\\n\\n[![Click to play youtube introduction to Azure Sphere DevX](../static/img/png/youtube_cover.png)](https://youtu.be/rfXwEa-gMG8)\\n\\n## Get Started\\n\\nVisit the [Azure Sphere DevX library Wiki](https://github.com/Azure-Sphere-DevX/AzureSphereDevX.Examples/wiki) to learn more."},{"id":"18-azure-percept-blog-posts","metadata":{"permalink":"/blog/18-azure-percept-blog-posts","source":"@site/blog/2022-07-18-azure-percept-blog-posts.md","title":"18: Unlimited possibilities with Azure Percept","description":"Welcome to Day 18 of #JulyOT!","date":"2022-07-18T00:00:00.000Z","formattedDate":"July 18, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"}],"readingTime":2.06,"hasTruncateMarker":false,"authors":[{"name":"Amira Youssef","title":"Principal PM Manager @Microsoft","url":"https://github.com/Amiyouss","imageURL":"https://pbs.twimg.com/profile_images/1426589231422480385/OzZty9cq_400x400.jpg","key":"amira"}],"frontMatter":{"slug":"18-azure-percept-blog-posts","title":"18: Unlimited possibilities with Azure Percept","authors":["amira"],"tags":["30days","iot","aiatedge"],"draft":false},"prevItem":{"title":"19: Powering Azure Sphere C Development with DevX","permalink":"/blog/julyot-day19-embedded"},"nextItem":{"title":"16: IoT Device Selection List for Prototyping","permalink":"/blog/16-iot-devices-for-prototyping"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/18-azure-percept-blog-posts\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Unlimited possibilities with Azure Percept\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Unlimited possibilities with Azure Percept\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-18-azure-percept-blog-posts.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@Amiyouss1\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/18-azure-percept-blog-posts\\" />\\n</head>\\n\\n> Welcome to Day 18 of **#JulyOT**!\\n\\n![Page banner](/img/png/JulyOT-banner-18-azure-percept-blog-posts.png)\\n\\n_Today we learn more about the solutions that are possible with Azure Percept._\\n\\n# Unlimited possibilities with Azure Percept\\n\\nAzure Percept is a comprehensive, easy-to-use platform with added security for creating edge AI solutions. Start your proof of concept in minutes with hardware accelerators built to integrate seamlessly with Azure AI and Azure IoT services. Azure Percept works out of the box with Azure Cognitive Services, Azure Machine Learning, and other Azure services to deliver vision and audio insights in real time.\\n\\nTo help you learn more about the possibilities with Azure Percept, we\'ve curated a set of blog posts to show some of the many use cases.\\n\\n## Intel and Microsoft host Azure Percept Bootcamp to inspire partners creating Edge AI solutions\\n\\nThis blog post highlights some of the creative solutions and takeaways from our partners and customers designed during the recent 4-week Azure Percept Bootcamp program.\\n\\n<form action=\\"https://techcommunity.microsoft.com/t5/internet-of-things-blog/intel-and-microsoft-host-azure-percept-bootcamp-to-inspire/ba-p/3272166\\" target=\\"_blank\\">\\n    <input type=\\"submit\\" value=\\"Take me to the blog post on the Microsoft IoT TechCommunity\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n    <input type=\\"hidden\\" name=\\"wt.mc_id\\" value=\\"eventspg_16482_webpage_reactor\\" /> \\n</form>\\n\\n## Solve common challenges with Azure Percept: Inspirations from Microsoft Hackathon\\n\\nIn the Microsoft Hackathon, Microsoft employees completed numerous hacks with Azure Percept and brainstormed ways to create solutions for real-world challenges ranging from pedestrian safety to supply-chain efficiency. They used the Azure Percept development kit\'s built-in hardware accelerators, which integrate seamlessly with Azure AI and Azure IoT services, to experiment with what\'s possible. This blog posts shows a few of these real-world solutions that target uses cases across five different verticals: transportation, healthcare, telecommunications, AI for good, and public safety.\\n\\n<form action=\\"https://techcommunity.microsoft.com/t5/internet-of-things-blog/solve-common-challenges-with-azure-percept-inspirations-from/ba-p/3039450\\" target=\\"_blank\\">\\n    <input type=\\"submit\\" value=\\"Take me to the blog post on the Microsoft IoT TechCommunity\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n    <input type=\\"hidden\\" name=\\"wt.mc_id\\" value=\\"eventspg_16482_webpage_reactor\\" /> \\n</form>\\n\\n## Discover the possibilities with Azure Percept\\n\\nThis blog post explores some ingenious solutions that are driving value across manufacturing, retail, smart cities, smart buildings, and transportation. It also sharse some step-by-step projects and other resources to help you get started with Azure Percept.\\n\\n<form action=\\"https://techcommunity.microsoft.com/t5/internet-of-things-blog/discover-the-possibilities-with-azure-percept/ba-p/2733947\\" target=\\"_blank\\">\\n    <input type=\\"submit\\" value=\\"Take me to the blog post on the Microsoft IoT TechCommunity\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n    <input type=\\"hidden\\" name=\\"wt.mc_id\\" value=\\"eventspg_16482_webpage_reactor\\" /> \\n</form>"},{"id":"16-iot-devices-for-prototyping","metadata":{"permalink":"/blog/16-iot-devices-for-prototyping","source":"@site/blog/2022-07-16-iot-devices-for-prototyping.md","title":"16: IoT Device Selection List for Prototyping","description":"Welcome to Day 16 of #JulyOT!","date":"2022-07-16T00:00:00.000Z","formattedDate":"July 16, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"}],"readingTime":0.865,"hasTruncateMarker":false,"authors":[{"name":"Jen Fox","title":"Senior Program Manager @Microsoft","url":"https://github.com/jenfoxbot","imageURL":"https://pbs.twimg.com/profile_images/1251933030194704385/bFUIbxQ-_400x400.jpg","key":"jen"}],"frontMatter":{"slug":"16-iot-devices-for-prototyping","title":"16: IoT Device Selection List for Prototyping","authors":["jen"],"tags":["30days","iot","iot4b"],"draft":false},"prevItem":{"title":"18: Unlimited possibilities with Azure Percept","permalink":"/blog/18-azure-percept-blog-posts"},"nextItem":{"title":"15: IoT for Beginners lesson 3!","permalink":"/blog/15-julyot-iot-beginners"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/16-iot-devices-for-prototyping\\" />\\n  <meta name=\\"twitter:title\\" content=\\"IoT Device Selection List for Prototyping\\" />\\n  <meta name=\\"twitter:description\\" content=\\"IoT Device Selection List for Prototyping\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-16-iot-devices-for-prototyping.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@ellerbach\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/16-iot-devices-for-prototyping\\" />\\n</head>\\n\\n> Welcome to Day 16 of **#JulyOT**!\\n\\n![Page banner](/img/png/JulyOT-banner-16-iot-devices-for-prototyping.png)\\n\\n_Today we share a list of IoT devices for prototyping your IoT application._\\n\\n## IoT devices for prototyping\\n\\nThe MakeIt team at Microsoft is there to support the maker community, helping you to get your makes and prototypes built quicker with the best in class tools you need.\\n\\nOne way we are helping makers is sharing a list of IoT devices for prototyping your IoT application. This list aims to give partners a starting point with IoT hardware to build prototypes and proof-of-concepts quickly and easily.\\n\\nThis list is in an Excel spreadsheet, and is available from the [Microsoft Maker Community Resources repo on GitHub](https://github.com/microsoft/MakerCommunityResources).\\n\\n<form action=\\"https://github.com/microsoft/MakerCommunityResources/raw/main/IoT/IoT%20Device%20Selection%20List%20for%20Prototyping.xlsx\\" target=\\"_blank\\">\\n    <input type=\\"submit\\" value=\\"Download the list from GitHub\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n</form>"},{"id":"15-julyot-iot-beginners","metadata":{"permalink":"/blog/15-julyot-iot-beginners","source":"@site/blog/2022-07-15-iot-beginners.mdx","title":"15: IoT for Beginners lesson 3!","description":"Welcome to Day 15 of #JulyOT!!","date":"2022-07-15T00:00:00.000Z","formattedDate":"July 15, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"}],"readingTime":0.77,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"}],"frontMatter":{"slug":"15-julyot-iot-beginners","title":"15: IoT for Beginners lesson 3!","authors":["jimb"],"tags":["30days","iot","iot4b"],"draft":false},"prevItem":{"title":"16: IoT Device Selection List for Prototyping","permalink":"/blog/16-iot-devices-for-prototyping"},"nextItem":{"title":"15: .NET nanoFramework networking and Azure","permalink":"/blog/15-nano-framework"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/15-julyot-iot-beginners\\" />\\n  <meta name=\\"twitter:title\\" content=\\"IoT for Beginners lesson 3\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Join us to learn how to interact with the physical world with sensors and actuators as part of our live streamed IoT for Beginners lessons\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-15-iot-beginners.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/15-julyot-iot-beginners\\" />\\n</head>\\n\\n> Welcome to Day 15 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-15-iot-beginners.png)\\n\\n_Today we live stream lesson 3 of IoT for Beginners - interact with the physical world with sensors and actuators._\\n\\n## IoT For Beginners\\n\\n[IoT for beginners](https://aka.ms/iot-beginners) is a free, open source, 24-lesson IoT curriculum. The second lesson is live-streamed today from the Microsoft Reactor. Catch the recording on the Microsoft Reactor YouTube channel.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/v3d1ZhlmuSE\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nLearn more about IoT for Beginners on the official [IoT for Beginners GitHub repo](https://aka.ms/iot-beginners)."},{"id":"15-nano-framework","metadata":{"permalink":"/blog/15-nano-framework","source":"@site/blog/2022-07-15-nano-framework.md","title":"15: .NET nanoFramework networking and Azure","description":"Welcome to Day 15 of #JulyOT!","date":"2022-07-15T00:00:00.000Z","formattedDate":"July 15, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"}],"readingTime":26.735,"hasTruncateMarker":false,"authors":[{"name":"Laurent Ellerbach","title":"Principal Engineering Manager @Microsoft","url":"https://github.com/ellerbach","imageURL":"https://github.com/ellerbach.png","key":"laurent"},{"name":"Jos\xe9 Sim\xf5es","title":"CEO @Eclo Solutions","url":"https://github.com/josesimoes","imageURL":"https://github.com/josesimoes.png","key":"jose"}],"frontMatter":{"slug":"15-nano-framework","title":"15: .NET nanoFramework networking and Azure","authors":["laurent","jose"],"tags":["30days","iot","embeddediot"],"draft":false},"prevItem":{"title":"15: IoT for Beginners lesson 3!","permalink":"/blog/15-julyot-iot-beginners"},"nextItem":{"title":"14: AMA: IoT, cows, AI and poop - Jim discusses IoT in farming with Bryn Lewis","permalink":"/blog/14-iot-cow"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/15-nano-framework\\" />\\n  <meta name=\\"twitter:title\\" content=\\".NET nanoFramework networking and Azure\\" />\\n  <meta name=\\"twitter:description\\" content=\\".NET nanoFramework networking and Azure\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-15-nanoframework.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@ellerbach\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/15-nano-framework\\" />\\n</head>\\n\\n> Welcome to Day 15 of **#JulyOT**!\\n\\n![Page banner](/img/png/JulyOT-banner-15-nanoframework.png)\\n\\n# Networking and Azure\\n\\n.NET nanoFramework offers native secure network capabilities. The capabilities may differ depending on the MCU and associated hardware but if there is an ethernet adaptor or a Wi-Fi module, except if they are extremely exotic, they\'ll be supported! For example, the ESP32 supports secure Wi-Fi connectivity, all certificates to authenticate servers and devices are supported making the connection secure from end to end using the underlying TLS/SSL.\\n\\nWatch the [Connect to Azure IoT](https://www.youtube.com/watch?v=pxXgU3XcRr4) \\"IoT Show\\" episode to learn more about creating secure connections.\\n\\n[![Connect to Azure IoT video](https://img.youtube.com/vi/pxXgU3XcRr4/0.jpg)](https://youtube.com/watch?v=pxXgU3XcRr4 \\"Connect to Azure IoT video\\")\\n\\nConnecting to Azure IoT is easy with library support for Device Provisioning Services (DPS), SAS token and certificate authentication, Cloud to Device (C2D) messages, Device to Cloud (D2C) messages, remote function calls, twins, for clients and modules! There is also full support for [IoT Plug & Play](https://github.com/nanoframework/nanoFramework.Azure.Devices).\\n\\n## Announcing the first .NET nanoFramework Azure Certified Device\\n\\nIn May 2022, the PalThree device from OrgPal based on an STM32F7 MCU is the first [Azure Certified Device running .NET nanoFramework](https://www.nanoframework.net/palthree-board-becomes-azure-certified-device/) to be approved. This device is also IoT Plug and Play certified. The .NET nanoFramework is ready for production.\\n\\n## .NET nanoFramework communications capabilities\\n\\nThe .NET nanoFramework supports a wide range of communicators protocols including:\\n\\n1. TLS,\\n1. HTTPS,\\n1. .NET nanoFramework WebServer,\\n1. WebSockets,\\n1. SignalR,\\n1. MQTT, including support for MQTT v5.0,\\n1. [AMQP](https://github.com/nanoframework/amqpnetlite),\\n1. [TcpClient](https://github.com/nanoframework/System.Net.Sockets.TcpClient),\\n1. and [UdpClient](https://github.com/nanoframework/System.Net.Sockets.UdpClient).\\n\\n\\n\x3c!-- 1.  and we\'ll focus again on Azure IoT in a more detailed way. --\x3e\\n\\n## TLS and HTTPS\\n\\nTLS and secure HTTP is supported. You will find examples in the [sample repository](https://github.com/nanoframework/Samples/tree/main/samples/HTTP). The samples demonstrate how to use `WebRequest`, `HttpListener` as well as how to make low-level REST calls to Azure services.\\n\\nHttpClient is fully implemented and is a very convenient way to call REST services.  HttpClient works just like the full .NET implementation. You\'ll find the source in the .NET nanoFramework [System.Net.Http](https://github.com/nanoframework/System.Net.Http) repository.\\n\\nTo use `HttpClient`, create the HttpClient object and then perform calls. Note that `HttpClient` is meant to be reused throughout the application lifecycle. There is no need to create a new instance every time a call has to be performed. Like this:\\n\\n```csharp\\nstatic readonly HttpClient _httpClient = new HttpClient();\\n```\\n\\nTo pass the CA root certificate to validate the secure server certificate. The CA root cert can also come from a binary file or text file from a resource.\\n\\n```csharp\\n_httpClient.HttpsAuthentCert = new X509Certificate(\\n@\\"-----BEGIN CERTIFICATE-----\\nMIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\\nMCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\\nU3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\\nNjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\\nChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\\nZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\\nDQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\\n8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\\n+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\\nX9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\\nK4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\\n1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\\nA1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\\nzt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\\nYXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\\nbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\\nDQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\\nL7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\\neruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\\nxy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\\nVSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\\nWQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\\n-----END CERTIFICATE-----\\");\\n```\\n\\nIt\'s possible to add HTTP headers that will be sent with each request.\\n\\n```csharp\\n_httpClient.DefaultRequestHeaders.Add(\\"x-ms-blob-type\\", \\"BlockBlob\\");\\n```\\n\\n### Perform an HTTP GET request\\n\\nHere\'s a example of a HTTP request to read some content as a string:\\n\\n```csharp\\nHttpResponseMessage response = _httpClient.Get(\\"https://httpbin.org/get\\");\\nresponse.EnsureSuccessStatusCode();\\nvar responseBody = response.Content.ReadAsString();\\n```\\n\\nThe above call would return something similar to the following, which can be output in Visual Studio by calling `Debug.WriteLine(responseBody)`:\\n\\n```console\\n{\\n  \\"args\\": {},\\n  \\"headers\\": {\\n    \\"Host\\": \\"httpbin.org\\",\\n    \\"X-Amzn-Trace-Id\\": \\"Root=1-6214aad3-38e5f8357bdf90530300eb5f\\",\\n    \\"X-Ms-Blob-Type\\": \\"BlockBlob\\"\\n  },\\n  \\"origin\\": \\"5.249.47.208\\",\\n  \\"url\\": \\"https://httpbin.org/get\\"\\n}\\n```\\n\\nNote the call to `response.EnsureSuccessStatusCode();`. This will throw an `HttpRequestException` in case the status code from the HTTP request is not a successful one.\\n\\n### Perform an HTTP POST request\\n\\nFollowing is an example of an HTTP request performing a POST request to send some JSON content to an endpoint.\\n\\n```csharp\\nvar content = new StringContent(\\"{\\\\\\"someProperty\\\\\\":\\\\\\"someValue\\\\\\"}\\", Encoding.UTF8, \\"application/json\\");\\nvar result = _httpClient.Post(\\"https://httpbin.org/anything\\", content);\\nresult.EnsureSuccessStatusCode();\\n```\\n\\nWorth noting that the JSON content above it\'s presented as a simple string to simplify the code. There is a [json library](https://github.com/nanoframework/nanoFramework.Json) available to help with serializing and deserializing from/to C# classes, even the most complex ones.\\n\\nNote the call to `response.EnsureSuccessStatusCode();` to make sure the HTTP request was successfully performed.\\n\\n### Download binary content to a file\\n\\nUsing `HttpClient` makes it easy to deal with binary content. The following is an example of how to download a file from a web server.\\n\\n```csharp\\nHttpResponseMessage response = _httpClient.Get(\\"https://storage-on-the-cloud.net/file-with-binary-content\\");\\nresponse.EnsureSuccessStatusCode();\\n\\nusing FileStream fs = new FileStream($\\"I:\\\\\\\\i-am-a-binary-file.bin\\", FileMode.Create, FileAccess.Write);\\nresponse.Content.ReadAsStream().CopyTo(fs);\\n```\\n\\n### Debugging through a reverse proxy\\n\\nWhen code is deployed to an MCU it might be desirable to let the device connect to your development machine running IIS Express. This can be achieved with a proxy such as [iisexpress-proxy](https://www.npmjs.com/package/iisexpress-proxy).\\n\\nBe aware that this leads to SocketExceptions with the current version of **nanoFramework** System.Net.Http when sending consecutive requests to your development machine. A simple retry mechanism in Debug mode will get around this.\\n\\n## WebServer: almost like full ASP.NET\\n\\nThe title is correct, we kept the core ideas of the full ASP.NET framework. We shrink everything possible, but kept the controller, security authentication, and attribute decoration concepts. You\'ll find the source in the .NET nanoFramework [WebServer](https://github.com/nanoframework/nanoFramework.WebServer) repository. Features include:\\n\\n- Handling multi-thread requests\\n- Serve static files on any storage\\n- Handle parameters in URL\\n- Multiple WebServer running at the same time\\n- Supports GET/PUT\\n- Supports content in POST\\n- Supports any type of header\\n- Reflection for easy usage of controllers and routes\\n- Helpers to return error codes\\n- HTTPS support\\n- [URL decode/encode](https://github.com/nanoframework/lib-nanoFramework.System.Net.Http/blob/develop/nanoFramework.System.Net.Http/Http/System.Net.HttpUtility.cs)\\n\\nThe main limitations are:\\n\\n- No zip support for request or response streams\\n- No built-in dependency injection. This is coming and in private preview for the moment\\n\\n### Usage\\n\\nSpecify a port, a timeout for the queries, and add an event handler for incoming requests.\\n\\n```csharp\\nusing (WebServer server = new WebServer(80, HttpProtocol.Http)\\n{\\n    // Add a handler for commands that are received by the server.\\n    server.CommandReceived += ServerCommandReceived;\\n\\n    // Start the server.\\n    server.Start();\\n\\n    Thread.Sleep(Timeout.Infinite);\\n}\\n```\\n\\nYou can also pass a controller and routes and method decoration is supported.\\n\\n```csharp\\nusing (WebServer server = new WebServer(80, HttpProtocol.Http, new Type[] { typeof(ControllerPerson), typeof(ControllerTest) }))\\n{\\n    // Start the server.\\n    server.Start();\\n\\n    Thread.Sleep(Timeout.Infinite);\\n}\\n```\\n\\nIn this case, you\'re passing 2 classes where you have public methods decorated which will be called every time the route is found.\\n\\nWith the previous example, a straightforward Test controller will look like that:\\n\\n```csharp\\npublic class ControllerTest\\n{\\n    [Route(\\"test\\"), Route(\\"Test2\\"), Route(\\"test42\\"), Route(\\"TEST\\")]\\n    [CaseSensitive]\\n    [Method(\\"GET\\")]\\n    public void RoutePostTest(WebServerEventArgs e)\\n    {\\n        string route = $\\"The route asked is {e.Context.Request.RawUrl.TrimStart(\'/\').Split(\'/\')[0]}\\";\\n        e.Context.Response.ContentType = \\"text/plain\\";\\n        WebServer.OutPutStream(e.Context.Response, route);\\n    }\\n\\n    [Route(\\"test/any\\")]\\n    public void RouteAnyTest(WebServerEventArgs e)\\n    {\\n        WebServer.OutputHttpCode(e.Context.Response, HttpStatusCode.OK);\\n    }\\n}\\n```\\n\\nIn this example, the `RoutePostTest` routes are case sensitive as the routes are decorated with [CaseSensitive]. GET requests to routes `test`, `Test2`, `test42`, or `TEST` will succeed. A GET request to `Test` would fail. GET parameters are also supported.\\n\\nThe `RouteAnyTest`is called whenever the URL `test/any` is requested no matter what method is used.\\n\\nThere is a more advanced example with a simple REST API to get a list of Person and add a Person. Check it in the [sample](https://github.com/nanoframework/Samples/blob/main/samples/Webserver/WebServer.Sample/ControllerPerson.cs).\\n\\n> **Important**:\\n> * By default, the routes are not case sensitive and the attribute **must** be lowercase\\n> * If you want to use case-sensitive routes like in the previous example, use the attribute `CaseSensitive`. As in the previous example, you **must** write the route as you want it to be responded to.\\n\\nAnd you can pass default credentials to the server:\\n\\n```csharp\\nusing (WebServer server = new WebServer(80, HttpProtocol.Http, new Type[] { typeof(ControllerPerson), typeof(ControllerTest), typeof(ControllerAuth) }))\\n{\\n    // To test authentication with various scenarios\\n    server.ApiKey = \\"ATopSecretAPIKey1234\\";\\n    server.Credential = new NetworkCredential(\\"topuser\\", \\"topPassword\\");\\n\\n    // Start the server.\\n    server.Start();\\n\\n    Thread.Sleep(Timeout.Infinite);\\n}\\n```\\n\\n### Managing incoming queries thru events\\n\\nVery basic usage is the following:\\n\\n```csharp\\nprivate static void ServerCommandReceived(object source, WebServerEventArgs e)\\n{\\n    var url = e.Context.Request.RawUrl;\\n    Debug.WriteLine($\\"Command received: {url}, Method: {e.Context.Request.HttpMethod}\\");\\n\\n    if (url.ToLower() == \\"/sayhello\\")\\n    {\\n        // This is simple raw text returned\\n        WebServer.OutPutStream(e.Context.Response, \\"It\'s working, url is empty, this is just raw text, /sayhello is just returning a raw text\\");\\n    }\\n    else\\n    {\\n        WebServer.OutputHttpCode(e.Context.Response, HttpStatusCode.NotFound);\\n    }\\n}\\n```\\n\\nYou can do more advance scenario like returning a full HTML page:\\n\\n```csharp\\nWebServer.OutPutStream(e.Context.Response, \\"<html><head>\\" +\\n    \\"<title>Hi from nanoFramework Server</title></head><body>You want me to say hello in a real HTML page!<br/><a href=\'/useinternal\'>Generate an internal text.txt file</a><br />\\" +\\n    \\"<a href=\'/Text.txt\'>Download the Text.txt file</a><br>\\" +\\n    \\"Try this url with parameters: <a href=\'/param.htm?param1=42&second=24&NAme=Ellerbach\'>/param.htm?param1=42&second=24&NAme=Ellerbach</a></body></html>\\");\\n```\\n\\nAnd can get parameters from a URL a an example from the previous link on the param.html page:\\n\\n```csharp\\nif (url.ToLower().IndexOf(\\"/param.htm\\") == 0)\\n{\\n    // Test with parameters\\n    var parameters = WebServer.decryptParam(url);\\n    string toOutput = \\"<html><head>\\" +\\n        \\"<title>Hi from nanoFramework Server</title></head><body>Here are the parameters of this URL: <br />\\";\\n    foreach (var par in parameters)\\n    {\\n        toOutput += $\\"Parameter name: {par.Name}, Value: {par.Value}<br />\\";\\n    }\\n    toOutput += \\"</body></html>\\";\\n    WebServer.OutPutStream(e.Context.Response, toOutput);\\n}\\n```\\n\\nAnd server static files:\\n\\n```csharp\\nvar files = storage.GetFiles();\\nforeach (var file in files)\\n{\\n    if (file.Name == url)\\n    {\\n        WebServer.SendFileOverHTTP(e.Context.Response, file);\\n        return;\\n    }\\n}\\n\\nWebServer.OutputHttpCode(e.Context.Response, HttpStatusCode.NotFound);\\n```\\n\\nAnd also **REST API** is supported, here is a comprehensive example:\\n\\n```csharp\\nif (url.ToLower().IndexOf(\\"/api/\\") == 0)\\n{\\n    string ret = $\\"Your request type is: {e.Context.Request.HttpMethod}\\\\r\\\\n\\";\\n    ret += $\\"The request URL is: {e.Context.Request.RawUrl}\\\\r\\\\n\\";\\n    var parameters = WebServer.DecodeParam(e.Context.Request.RawUrl);\\n    if (parameters != null)\\n    {\\n        ret += \\"List of url parameters:\\\\r\\\\n\\";\\n        foreach (var param in parameters)\\n        {\\n            ret += $\\"  Parameter name: {param.Name}, value: {param.Value}\\\\r\\\\n\\";\\n        }\\n    }\\n\\n    if (e.Context.Request.Headers != null)\\n    {\\n        ret += $\\"Number of headers: {e.Context.Request.Headers.Count}\\\\r\\\\n\\";\\n    }\\n    else\\n    {\\n        ret += \\"There is no header in this request\\\\r\\\\n\\";\\n    }\\n\\n    foreach (var head in e.Context.Request.Headers?.AllKeys)\\n    {\\n        ret += $\\"  Header name: {head}, Values:\\";\\n        var vals = e.Context.Request.Headers.GetValues(head);\\n        foreach (var val in vals)\\n        {\\n            ret += $\\"{val} \\";\\n        }\\n\\n        ret += \\"\\\\r\\\\n\\";\\n    }\\n\\n    if (e.Context.Request.ContentLength64 > 0)\\n    {\\n\\n        ret += $\\"Size of content: {e.Context.Request.ContentLength64}\\\\r\\\\n\\";\\n        byte[] buff = new byte[e.Context.Request.ContentLength64];\\n        e.Context.Request.InputStream.Read(buff, 0, buff.Length);\\n        ret += $\\"Hex string representation:\\\\r\\\\n\\";\\n        for (int i = 0; i < buff.Length; i++)\\n        {\\n            ret += buff[i].ToString(\\"X\\") + \\" \\";\\n        }\\n\\n    }\\n\\n    WebServer.OutPutStream(e.Context.Response, ret);\\n}\\n```\\n\\nThis example is basic, but demonstrates how to access the HTTP method, the URL, URL parameters, content payload, and the controller called.\\n\\n\x3c!-- Example of a result with call:\\n\\n![result](./doc/POSTcapture.jpg) --\x3e\\n\\nAnd more information, check [the complete example](https://github.com/nanoframework/Samples/tree/main/samples/Webserver) for more about this WebServer!\\n\\n## Using HTTPS\\n\\nYou will need to generate a certificate and keys:\\n\\n```csharp\\nX509Certificate _myWebServerCertificate509 = new X509Certificate2(_myWebServerCrt, _myWebServerPrivateKey, \\"1234\\");\\n\\n// X509 RSA key PEM format 2048 bytes\\n        // generate with openssl:\\n        // > openssl req -newkey rsa:2048 -nodes -keyout selfcert.key -x509 -days 365 -out selfcert.crt\\n        // and paste selfcert.crt content below:\\n        private const string _myWebServerCrt =\\n@\\"-----BEGIN CERTIFICATE-----\\nMORETEXT\\n-----END CERTIFICATE-----\\";\\n\\n        // this one is generated with the command below. We need a password.\\n        // > openssl rsa -des3 -in selfcert.key -out selfcertenc.key\\n        // the one below was encoded with \'1234\' as the password.\\n        private const string _myWebServerPrivateKey =\\n@\\"-----BEGIN RSA PRIVATE KEY-----\\nMORETEXTANDENCRYPTED\\n-----END RSA PRIVATE KEY-----\\";\\n\\nusing (WebServer server = new WebServer(443, HttpProtocol.Https)\\n{\\n    // Add a handler for commands that are received by the server.\\n    server.CommandReceived += ServerCommandReceived;\\n    server.HttpsCert = _myWebServerCertificate509;\\n\\n    server.SslProtocols = System.Net.Security.SslProtocols.Tls | System.Net.Security.SslProtocols.Tls11 | System.Net.Security.SslProtocols.Tls12;\\n    // Start the server.\\n    server.Start();\\n\\n    Thread.Sleep(Timeout.Infinite);\\n}\\n```\\n\\n> IMPORTANT: because the certificate above is not issued by a Certificate Authority it won\'t be recognized as a valid certificate. If you want to access the nanoFramework device with your browser, for example, you\'ll have to add the (CRT file)[WebServer.Sample\\\\webserver-cert.crt] as a trusted one. On Windows, you just have to double click on the CRT file and then click \\"Install Certificate...\\".\\n\\nYou can use an event or controller or both. Anything that has been explained before without HTTPS will also work with HTTPS.\\n\\n## MQTT loves .NET nanoFramework\\n\\nThere is support for an MQTT client in .NET nanoFramework. You\'ll find the source in the .NET nanoFramework [MQTT](https://github.com/nanoframework/nanoFramework.m2mqtt) repository. The usage is the same whatever version is used, 3.1, 3.1.1, and 5.0 are supported. There are differences between v3.1.1 and v5.0. Version 5.0 brings more control and additional properties. For convenience, V5.0 properties are shown from Intellisense as `v5.0 only`. If you try to use v5.0 properties with the v3.1 or v3.1.1 protocols, they\'ll be ignored.\\n\\nHere is a basic example of creating a v3.1.1 server and connecting to it:\\n\\n```csharp\\nMqttClient mqtt = new MqttClient(\\"test.mosquitto.org\\", 8883, true, new X509Certificate(CertMosquitto), null, MqttSslProtocols.TLSv1_2);\\nvar ret = mqtt.Connect(\\"nanoTestDevice\\", true);\\nif (ret != MqttReasonCode.Success)\\n{\\n    Debug.WriteLine($\\"ERROR connecting: {ret}\\");\\n    mqtt.Disconnect();\\n    return;\\n}\\n```\\n\\nFor the v5.0, you just need to specify the version before the connection:\\n\\n```csharp\\nMqttClient mqtt = new MqttClient(\\"test.mosquitto.org\\", 8883, true, new X509Certificate(CertMosquitto), null, MqttSslProtocols.TLSv1_2);\\nmqtt.ProtocolVersion = MqttProtocolVersion.Version_5;\\nvar ret = mqtt.Connect(\\"nanoTestDevice\\", true);\\nif (ret != MqttReasonCode.Success)\\n{\\n    Debug.WriteLine($\\"ERROR connecting: {ret}\\");\\n    mqtt.Disconnect();\\n    return;\\n}\\n```\\n\\nNote: in both examples, a specific certificate is needed to connect to the Mosquitto server. You will find it in the [sample](https://github.com/nanoframework/nanoFramework.m2mqtt/tree/main/TestMqtt/TestAppv5.0). The v5.0 flow for authentication may be more complex and [is supported as well](https://github.com/nanoframework/nanoFramework.m2mqtt#v50-specific-authentication-flow).\\n\\n### Subscribing to events\\n\\nThe MqttClient supports subscribing to events. For example, you can get additional information when a connection is opened with the v5.0 protocol. The example below shows how to connect to Azure IoT Hub over MQTT v5.0.\\n\\n```csharp\\n// Create the client\\nMqttClient mqtt = new MqttClient(IoTHub, 8883, true, new X509Certificate(CertAzure), null, MqttSslProtocols.TLSv1_2);\\n// Setup the version\\nmqtt.ProtocolVersion = MqttProtocolVersion.Version_5;\\n// Register to events\\nmqtt.ConnectionOpened += MqttConnectionOpened;\\n// You can add additional properties\\nvar at = DateTime.UtcNow;\\nvar atString = (at.ToUnixTimeSeconds() * 1000).ToString();\\nvar expiry = at.AddMinutes(40);\\nvar expiryString = (expiry.ToUnixTimeSeconds() * 1000).ToString();\\nstring toSign = $\\"{IoTHub}\\\\n{DeviceID}\\\\n\\\\n{atString}\\\\n{expiryString}\\\\n\\";\\nvar hmac = new HMACSHA256(Convert.FromBase64String(Sas));\\nvar sas = hmac.ComputeHash(Encoding.UTF8.GetBytes(toSign));\\nmqtt.AuthenticationMethod = \\"SAS\\";\\nmqtt.AuthenticationData = sas;\\nmqtt.UserProperties.Add(new UserProperty(\\"sas-at\\", atString));\\nmqtt.UserProperties.Add(new UserProperty(\\"sas-expiry\\", expiryString));\\nmqtt.UserProperties.Add(new UserProperty(\\"api-version\\", \\"2020-10-01-preview\\"));\\nmqtt.UserProperties.Add(new UserProperty(\\"host\\", IoTHub));\\nvar ret = mqtt.Connect(DeviceID, null, null, false, MqttQoSLevel.AtLeastOnce, false, null, null, true, 60);\\n// You will have more code here\\n\\nprivate static void MqttConnectionOpened(object sender, ConnectionOpenedEventArgs e)\\n{\\n    Debug.WriteLine($\\"Connection open\\");\\n    Debug.WriteLine($\\"  ClientID: {((MqttClient)sender).ClientId}\\");\\n    Debug.WriteLine($\\"  Assigned client id: {e.Message.AssignedClientIdentifier}\\");\\n    if (e.Message.AuthenticationData != null) Debug.WriteLine($\\"  Auth data length: {e.Message.AuthenticationData.Length}\\");\\n    Debug.WriteLine($\\"  Auth method: {e.Message.AuthenticationMethod}\\");\\n    Debug.WriteLine($\\"  Dup flag: {e.Message.DupFlag}\\");\\n    Debug.WriteLine($\\"  Max packet size: {e.Message.MaximumPacketSize}\\");\\n    Debug.WriteLine($\\"  Max QoS: {e.Message.MaximumQoS}\\");\\n    Debug.WriteLine($\\"  Msg ID: {e.Message.MessageId}\\");\\n    Debug.WriteLine($\\"  Qos level: {e.Message.QosLevel}\\");\\n    Debug.WriteLine($\\"  Reason: {e.Message.Reason}\\");\\n    Debug.WriteLine($\\"  Receive max: {e.Message.ReceiveMaximum}\\");\\n    Debug.WriteLine($\\"  Rep info: {e.Message.ResponseInformation}\\");\\n    Debug.WriteLine($\\"  Retain: {e.Message.Retain}\\");\\n    Debug.WriteLine($\\"  Retain available: {e.Message.RetainAvailable}\\");\\n    Debug.WriteLine($\\"  Return code: {e.Message.ReturnCode}\\");\\n    Debug.WriteLine($\\"  Server keep alive: {e.Message.ServerKeepAlive}\\");\\n    Debug.WriteLine($\\"  Server ref: {e.Message.ServerReference}\\");\\n    Debug.WriteLine($\\"  Session exp inter: {e.Message.SessionExpiryInterval}\\");\\n    Debug.WriteLine($\\"  Session present: {e.Message.SessionPresent}\\");\\n    Debug.WriteLine($\\"  Shared subs available: {e.Message.SharedSubscriptionAvailable}\\");\\n    Debug.WriteLine($\\"  Shared identifier available: {e.Message.SubscriptionIdentifiersAvailable}\\");\\n    Debug.WriteLine($\\"  Topic alias max: {e.Message.TopicAliasMaximum}\\");\\n    Debug.WriteLine($\\"  Num user props: {e.Message.UserProperties.Count}\\");\\n    foreach (UserProperty prop in e.Message.UserProperties)\\n    {\\n        Debug.WriteLine($\\"    Key  : {prop.Name}\\");\\n        Debug.WriteLine($\\"    Value: {prop.Value}\\");\\n    }\\n\\n    Debug.WriteLine($\\"  Wildcard available: {e.Message.WildcardSubscriptionAvailable}\\");\\n}\\n```\\n\\n### Example\\n\\nThe M2Mqtt library provides the main class `MqttClient` that represents the MQTT client to connect to a broker. You can connect to the broker by providing its IP address or hostname and optionally some parameters related to MQTT protocol.\\n\\nAfter connecting to the broker, use the `Publish()` method to publish a message to a topic and `Subscribe()` method to subscribe to a topic and receive messages published on it.\\n\\nThe `MqttClient` class is event-based, you receive an event when a message is published to a topic you subscribed to. You can receive events when message publishing is complete, and when subscribing or unsubscribing to topics.\\n\\nFollowing is an example of client subscribing to a topic:\\n\\n```csharp\\nstring MQTT_BROKER_ADDRESS = \\"192.168.1.2\\";\\n// create client instance\\nMqttClient client = new MqttClient(IPAddress.Parse(MQTT_BROKER_ADDRESS));\\n\\n// register to message received\\nclient.MqttMsgPublishReceived += client_MqttMsgPublishReceived;\\n\\nstring clientId = Guid.NewGuid().ToString();\\nclient.Connect(clientId);\\n\\n// subscribe to the topic \\"/home/temperature\\" with QoS 2\\nclient.Subscribe(new string[] { \\"/home/temperature\\" }, new MqttQoSLevel[] { MqttMsgBase.ExactlyOnce });\\n\\n// You can add some code here\\n\\nstatic void client_MqttMsgPublishReceived(object sender, MqttMsgPublishEventArgs e)\\n{\\n// handle message received\\n}\\n```\\n\\nFollowing an example of client publisher to a topic :\\n\\n```csharp\\nstring MQTT_BROKER_ADDRESS = \\"192.168.1.2\\";\\n// create client instance\\nMqttClient client = new MqttClient(IPAddress.Parse(MQTT_BROKER_ADDRESS));\\n\\nstring clientId = Guid.NewGuid().ToString();\\nclient.Connect(clientId);\\n\\nstring strValue = Convert.ToString(value);\\n\\n// publish a message on \\"/home/temperature\\" topic with QoS 2\\nclient.Publish(\\"/home/temperature\\", Encoding.UTF8.GetBytes(strValue), MqttQoSLevel.ExactlyOnce, false);\\n\\n// More code goes here\\n```\\n\\n### Avoiding certificate check\\n\\nIn some cases, it can be handy to avoid the certificate checks when connecting over a TLS connection. While this scenario is **not** recommended, you can adjust for it like this:\\n\\n```csharp\\n// You can specify no certificate at all\\nMqttClient mqtt = new MqttClient(IoTHub, 8883, true, null, null, MqttSslProtocols.TLSv1_2);\\n// And you have to setup the ValidateServerCertificate to false\\nmqtt.Settings.ValidateServerCertificate = false;\\nstring clientId = Guid.NewGuid().ToString();\\nclient.Connect(clientId);\\n```\\n\\n## WebSockets and SignalR\\n\\nWebSockets and SignalR are supported. We do have a set of sample packs for all of them. \\n\\nWebSockets can be used as a client, a server, or both at the same time. You\'ll find the source in the .NET nanoFramework [WebSockets](https://github.com/nanoframework/System.Net.WebSockets) and [SignalR](https://github.com/nanoframework/nanoFramework.SignalR.Client) repositories.\\n\\n### WebSockets Server Sample\\n\\n[Server.RgbSample](https://github.com/nanoframework/Samples/tree/main/samples/WebSockets/WebSockets.Server.RgbSample) shows how to use WebSocket Server with a WebServer hosting a WebApp that controls the RGB led on an Atom Lite ESP32.\\n\\n### WebSockets Client Sample\\n\\n[Client.Sample](https://github.com/nanoframework/Samples/tree/main/samples/WebSockets/Websockets.ServerClient.Sample) shows how to use the WebSocket Client.\\n\\n### WebSockets Server and Client sample\\n\\n[ServerClient.Sample](https://github.com/nanoframework/Samples/tree/main/samples/WebSockets/Websockets.ServerClient.Sample) shows how to configure and start a WebSocket Server and (SSL) Client.\\n\\nThe SignalR Client library enables you to connect your .net nanoFramework device to a SignalR Hub.  SignalR is part of the ASP.NET Framework that makes it easy to create web applications that update in real-time. For IoT apps, SignalR can be used to create a web app to display a live graph of connected smart meters, or perhaps control a robot arm.\\n\\nImportant: You must be connected to a network with a valid IP address. Please check the examples with the Network Helpers on how to set this up.\\n\\n### Connecting to a SignalR hub\\n\\nCreate a `HubConnection` client to establish a connection to a SignalR hub. You have to set the hub URL upon initialization of the HubConnection. You can also set custom headers by adding `ClientWebsocketHeaders` and set extra options by adding `HubConnectionOptions` upon initialization. The options are mainly used to change the settings of the underlying WebSocket and to set extra SSL options.\\nStart the connection by calling `Start`.\\n\\n```csharp\\nusing System;\\nusing System.Diagnostics;\\nusing System.Threading;\\nusing nanoFramework.SignalR.Client;\\n\\nnamespace NFSignalrTestClient\\n{\\n    public class Program\\n    {\\n        public static void Main()\\n        {\\n            //setup connection\\n            var options = new HubConnectionOptions() { Reconnect = true };\\n            HubConnection hubConnection = new HubConnection(\\"http://YourSignalrTestServer/testhub\\", options: options);\\n\\n            hubConnection.Closed += HubConnection_Closed;\\n\\n            hubConnection.On(\\"ReceiveMessage\\", new Type[] { typeof(string), typeof(string) }, (sender, args) =>\\n            {\\n                var name = (string)args[0];\\n                var message = (string)args[1];\\n\\n                Console.WriteLine($\\"{name} : {message}\\");\\n            });\\n\\n            //start connection\\n            hubConnection.Start();\\n\\n\\n            AsyncResult dashboardClientConnected = hubConnection.InvokeCoreAsync(\\"AwaitCientConnected\\", typeof(bool), new object[] { }, -1);\\n\\n            int seconds = 0;\\n\\n            while (!dashboardClientConnected.Completed)\\n            {\\n                Debug.WriteLine($\\"Waited {seconds} for client to open webapp\\");\\n                seconds++;\\n                Thread.Sleep(1000);\\n            }\\n\\n            if ((bool)dashboardClientConnected.Value)\\n            {\\n                hubConnection.SendCore(\\"ReportStatus\\", new object[] { \\"Client Connected\\" });\\n\\n                int count = 0;\\n                while (hubConnection.State == HubConnectionState.Connected)\\n                {\\n                    hubConnection.InvokeCore(\\"SendMessage\\", null, new object[] { count, \\"this is a control message\\" });\\n                    count++;\\n                    Thread.Sleep(1000);\\n                }\\n            }\\n            else\\n            {\\n                hubConnection.Stop(\\"client failed to connect\\");\\n            }\\n        }\\n\\n        private static void HubConnection_Closed(object sender, SignalrEventMessageArgs message)\\n        {\\n            Debug.WriteLine($\\"closed received with message: {message.Message}\\");\\n        }\\n    }\\n}\\n```\\n\\n### Handling lost SignalR connections\\n\\nUse retry policies to handle lost connections to a SignalR hub. To get the connection state, create an AsyncResult object and call methods to check the connection state.\\n\\nThe `AsyncResult` monitors the return message of the hub method. Upon completion, `Completed` will be true. Upon completion, the `Value` will hold the return object that needs to be cast to the right type. Calling `Value` before completion will result in the awaiting of the server return. If an error occurs, `Error` will be true and the error message will be inside `ErrorMessage`.\\n\\n```csharp\\nAsyncResult dashboardClientConnected = hubConnection.InvokeCoreAsync(\\"AwaitCientConnected\\", typeof(bool), new object[] { }, -1);\\n\\nint seconds = 0;\\n\\nwhile (!dashboardClientConnected.Completed)\\n{\\n    Debug.WriteLine($\\"Waited {seconds} for client to open webapp\\");\\n    seconds++;\\n    Thread.Sleep(1000);\\n}\\n\\nif ((bool)dashboardClientConnected.Value)\\n{\\n    Debug.WriteLine(\\"The client connected to the dashboard, start sending live data\\");\\n}\\n```\\n\\n### Call client methods from a Signalr hub\\n\\nDefine the method the hub calls using connection.On after building, but before starting the connection.\\n\\n```csharp\\nconnection.On<string, string>(\\"ReceiveMessage\\", (sender, args) =>\\n{\\n    var name = args[0] as string;\\n    var message = args[1] as string;\\n\\n    Debug.WriteLine($\\"{name} : {message}\\");\\n});\\n```\\n\\nThe preceding code in connection.On runs when server-side code calls it using the SendAsync method.\\n\\n```csharp\\npublic async Task SendMessage(string user, string message)\\n{\\n    await Clients.All.SendAsync(\\"ReceiveMessage\\", user, message);\\n}\\n```\\n\\n## Azure library: all you need is there!\\n\\nYou\'ll find the source in the .NET nanoFramework [Azure IoT library](https://github.com/nanoframework/nanoFramework.Azure.Devices) repository.\\n\\n**Important**: You **must** be connected to a network with a valid IP address and date/time. Check the Network Helpers examples for information on IP addresses and syncing date and time.\\n\\nThe .NET nanoFramework Azure IoT Hub library uses the MQTT protocol. You need to ensure you can connect to port 8883 using TLS protocol. If you are connected to an enterprise network, this may be blocked. In most cases, this is not an issue.\\n\\nTo aid portability, the .NET nanoFramework Azure IoT Hub library aims to match the namespaces, class, and method names found in the full .NET C# Azure IoT SDK.\\n\\n### Certificates\\n\\nThere are two options to provide an Azure IoT TLS certificate:\\n\\n- Parse it [into the constructor](https://github.com/nanoframework/nanoFramework.Azure.Devices/blob/main/README.md#through-the-constructor)\\n- Store it [on the device](https://github.com/nanoframework/nanoFramework.Azure.Devices/blob/main/README.md#storing-the-certificate-on-the-device)\\n\\nThe [AzureCertificates](https://github.com/nanoframework/nanoFramework.Azure.Devices/tree/main/AzureCertificates) contains, for your convenience, the root certificate used to connect to Azure IoT. Starting from June 2022, the Digicert Global Root 2 certificate must be used. For more information, refer to the [Azure IoT TLS: Critical changes are almost here! (\u2026and why you should care)](https://techcommunity.microsoft.com/t5/internet-of-things/azure-iot-tls-critical-changes-are-almost-here-and-why-you/ba-p/2393169) article.\\n\\n### Creating a DeviceClient\\n\\nYou can connect to Azure IoT Hub using either a symmetric Key or a certificate. The following example shows how to use a symmetric key:\\n\\n```csharp\\nconst string DeviceID = \\"nanoEdgeTwin\\";\\nconst string IotBrokerAddress = \\"youriothub.azure-devices.net\\";\\nconst string SasKey = \\"yoursaskey\\";\\nDeviceClient azureIoT = new DeviceClient(IotBrokerAddress, DeviceID, SasKey);\\n```\\n\\nNote: please see the previous section to understand how to better parse the certificate for your usage. The example shows the certificate uploaded into the device and not in the code.\\n\\n### Azure IoT Plug&Play\\n\\nAzure IoT Plug&Play is supported, to use, provide a model ID when creating the DeviceClient:\\n\\n```csharp\\nDeviceClient azureIoT = new DeviceClient(IotBrokerAddress, DeviceID, SasKey, modelID:\\"dtmi:com:example:Thermostat;1\\");\\n```\\n\\n#### IoT Plug&Play property updates\\n\\nThe following example shows how to subscribe to property updates.\\n\\n```csharp\\nconst string TargetTemperature = \\"targetTemperature\\";\\nDeviceClient azureIoT = new DeviceClient(Secrets.IotHub, Secrets.DeviceName, Secrets.SasKey, azureCert: new X509Certificate(Resource.GetBytes(Resource.BinaryResources.AzureRoot)), modelId: \\"dtmi:com:example:Thermostat;1\\");\\nazureIoT.TwinUpdated += AzureTwinUpdated;\\nazureIoT.Open();\\n\\nvoid AzureTwinUpdated(object sender, TwinUpdateEventArgs e)\\n{\\n    if (e.Twin.Contains(TargetTemperature))\\n    {\\n        // We got an update for the target temperature\\n        var target = e.Twin[TargetTemperature];\\n        Debug.WriteLine($\\"Target temperature updated: {target}\\");\\n        PropertyAcknowledge targetReport = new() { Version = (int)e.Twin.Version, Status = PropertyStatus.Completed, Description = \\"All perfect\\", Value = target };\\n        TwinCollection twin = new TwinCollection();\\n        twin.Add(TargetTemperature, targetReport.BuildAcknowledge());\\n        azureIoT.UpdateReportedProperties(twin);\\n    }\\n}\\n```\\n\\nIn this example, the property we are interested in is called `targetTemperature`. To receive updates, we subscribe to twin updates. We get the twin value from a call to the `e.Twin[TargetTemperature]` method.\\n\\nThe pattern to publish a writable property is simple, just build a `PropertyAcknowledge` object, create a TwinCollection, and add the property name, in this case, `targetTemperature`.\\n\\nYou can add more than one property. Note that you add to the TwinCollection, once done, just ask the library to update the twin through the `UpdateReportedProperties` method.\\n\\n#### Receiving IoT Plug&Play commands\\n\\nAn IoT Plug & Play command is a method callback. The following example shows how to map an IoT Play & Play command to a C# method. The method is called `getMaxMinReport`, the name of the C# method **must** match the command name as defined in the DTDL file.\\n\\n```csharp\\nDeviceClient azureIoT = new DeviceClient(Secrets.IotHub, Secrets.DeviceName, Secrets.SasKey, azureCert: new X509Certificate(Resource.GetBytes(Resource.BinaryResources.AzureRoot)), modelId: \\"dtmi:com:example:Thermostat;1\\");\\nazureIoT.AddMethodCallback(getMaxMinReport);\\nazureIoT.Open();\\n\\nstring getMaxMinReport(int rid, string payload)\\n{\\n    TemperatureReporting reporting = new() { avgTemp = 20, maxTemp = 42, minTemp = 12.34, startTime = DateTime.UtcNow.AddDays(-10), endTime = DateTime.UtcNow };\\n    return JsonConvert.SerializeObject(reporting);\\n}\\n```\\n\\nIn this example, the expected result is an object. Just populate the object and serialize it as a JSON as the command expect and return it. If any parameter to this command, it will be in the payload.\\n\\n### Getting and updating Twin\\n\\nYou can request the state of a Azure IoT Twin by calling the `GetTwin` method.\\n\\n```csharp\\nvar twin = azureIoT.GetTwin(new CancellationTokenSource(20000).Token);\\nif (twin == null)\\n{\\n    Debug.WriteLine($\\"Can\'t get the twins\\");\\n    azureIoT.Close();\\n    return;\\n}\\n\\nDebug.WriteLine($\\"Twin DeviceID: {twin.DeviceId}, #desired: {twin.Properties.Desired.Count}, #reported: {twin.Properties.Reported.Count}\\");\\n```\\n\\nNote: it\'s important to use a `CancellationToken` that will be canceled after a certain amount of time. Otherwise, this will block the calling thread up to the point the twin is received.\\n\\nTwins have properties, reported and desired. They are collections and you can get or try to get any element.\\n\\nYou can report your Twin as simple as this:\\n\\n```csharp\\nTwinCollection reported = new TwinCollection();\\nreported.Add(\\"firmware\\", \\"myNano\\");\\nreported.Add(\\"sdk\\", 0.2);\\nazureIoT.UpdateReportedProperties(reported);\\n```\\n\\nYou also have the option to wait for the twin update confirmation, in this case, use a `CancellationToken` that can be canceled. Otherwise, the check will be ignored.\\n\\nNote: the function will return false if the twin reception confirmation is not checked or if it did not arrive on time.\\n\\nYou can also register for any twin update:\\n\\n```csharp\\nazureIoT.TwinUpdated += TwinUpdatedEvent;\\n\\nvoid TwinUpdatedEvent(object sender, TwinUpdateEventArgs e)\\n{\\n    Debug.WriteLine($\\"Twin update received: {e.Twin.Count}\\");\\n}\\n```\\n\\n### Sending message\\n\\nUse the `SendMessage` function to send messages to Azure IoT. Use a `CancellationToken` to ensure message delivery. If a CancellationToken is not provided, then delivery assurance will be ignored and the function will return false.\\n\\n```csharp\\nvar isReceived = azureIoT.SendMessage($\\"{{\\\\\\"Temperature\\\\\\":42,\\\\\\"Pressure\\\\\\":1024}}\\", new CancellationTokenSource(5000).Token);\\nDebug.WriteLine($\\"Message received by IoT Hub: {isReceived}\\");\\n```\\n\\nNote: The message will be sent with the default service quality of service you created the device with. You won\'t get any answer for the quality `0`. In this case, you can simplify it to:\\n\\n```csharp\\nazureIoT.SendMessage($\\"{{\\\\\\"Temperature\\\\\\":42,\\\\\\"Pressure\\\\\\":1024}}\\");\\n```\\n\\n### Cloud to device messages\\n\\nYou can register an event to receive Cloud to device messages:\\n\\n```csharp\\nazureIoT.CloudToDeviceMessage += CloudToDeviceMessageEvent;\\n\\n// The following example shows how to display all keys in debug\\nvoid CloudToDeviceMessageEvent(object sender, CloudToDeviceMessageEventArgs e)\\n{\\n    Debug.WriteLine($\\"Message arrived: {e.Message}\\");\\n    foreach (string key in e.Properties.Keys)\\n    {\\n        Debug.Write($\\"  Key: {key} = \\");\\n        if (e.Properties[key] == null)\\n        {\\n            Debug.WriteLine(\\"null\\");\\n        }\\n        else\\n        {\\n            Debug.WriteLine((string)e.Properties[key]);\\n        }\\n    }\\n\\n    // e.Message contains the message itself\\n    if(e.Message == \\"stop\\")\\n    {\\n        ShoudIStop = true;\\n    }\\n}\\n```\\n\\nNote: the `sender` is a `DeviceClient` class, you can then send a confirmation message back, or execute any logic you\'ve put in place.\\n\\n### Method callback\\n\\nMethod callback is supported as well. You can register and unregister your methods. Here are a few examples:\\n\\n```csharp\\nazureIoT.AddMethodCallback(MethodCallbackTest);\\nazureIoT.AddMethodCallback(MakeAddition);\\nazureIoT.AddMethodCallback(RaiseExceptionCallbackTest);\\n\\nstring MethodCallbackTest(int rid, string payload)\\n{\\n    Debug.WriteLine($\\"Call back called :-) rid={rid}, payload={payload}\\");\\n    return \\"{\\\\\\"Yes\\\\\\":\\\\\\"baby\\\\\\",\\\\\\"itisworking\\\\\\":42}\\";\\n}\\n\\nstring MakeAddition(int rid, string payload)\\n{\\n    Hashtable variables = (Hashtable)JsonConvert.DeserializeObject(payload, typeof(Hashtable));\\n    int arg1 = (int)variables[\\"arg1\\"];\\n    int arg2 = (int)variables[\\"arg2\\"];\\n    return $\\"{{\\\\\\"result\\\\\\":{arg1 + arg2}}}\\";\\n}\\n\\nstring RaiseExceptionCallbackTest(int rid, string payload)\\n{\\n    // This will properly return as well the exception error\\n    throw new Exception(\\"I got you, it\'s to test the 504\\");\\n}\\n```\\n\\n> **Important**: method names are case-sensitive. So make sure you name your functions in C# using the same case.\\n\\n### Status update event\\n\\nA status update event is available:\\n\\n```csharp\\nazureIoT.StatusUpdated += StatusUpdatedEvent;\\n\\nvoid StatusUpdatedEvent(object sender, StatusUpdatedEventArgs e)\\n{\\n    Debug.WriteLine($\\"Status changed: {e.IoTHubStatus.Status}, {e.IoTHubStatus.Message}\\");\\n    // You may want to reconnect or use a similar retry mechanism\\n    ////if (e.IoTHubStatus.Status == Status.Disconnected)\\n    ////{\\n    ////    mqtt.Open();\\n    ////}\\n}\\n```\\n\\nNote that those are status change based, so once the connect or disconnect event arrives, they\'ll be replaced by other events as soon as something else happened like receiving a twin.\\n\\n### QoS Level\\n\\nBy default, connections to an IoT Hub use QoS 1 for message exchange with the IoT hub. You can change this by setting the `qosLevel` argument of the `DeviceClient` constructor.\\n\\nHere are existing QoS levels that you can use:\\n\\n* AtMostOnce: The broker/client will deliver the message once, with no confirmation.\\n* AtLeastOnce: The broker/client will deliver the message at least once, with confirmation required.\\n* ExactlyOnce: The broker/client will deliver the message exactly once by using a four-step handshake.\\n\\nWhile it\'s possible to configure QoS 0 (AtMostOnce) for faster message exchange, you should note that the delivery isn\'t guaranteed nor acknowledged. For this reason, QoS 0 is often referred as \\"fire and forget\\".\\n\\n### Module support\\n\\nModules are supported, you will have to use the constructor to pass the module ID either with a SAS token or with a certificate. The rest works like a normal device. Everything is supported including module direct method, telemetry and twins!\\n\\nFor example here with a SAS token. Note that the certificates are fully supported as well. And if you are not storing the Azure root certificate on the device, you\'ll need to pass it to the constructor.\\n\\n```csharp\\nconst string DeviceID = \\"nanoEdgeTwin\\";\\nconst string ModuleID = \\"myModule\\";\\nconst string IotBrokerAddress = \\"youriothub.azure-devices.net\\";\\nconst string SasKey = \\"yoursaskey\\";\\nDeviceClient module = new DeviceClient(IotBrokerAddress, DeviceID, ModuleID, SasKey);\\n```\\n\\n### Azure IoT Device Provisioning Service (DPS) support\\n\\nThis SDK also supports the Azure IoT Device Provisioning Service. Group and individual provisioning scenarios are supported either with a symmetric key or with certificates. To understand the mechanism behind DPS, it is recommended to read the [documentation](https://docs.microsoft.com/azure/iot-dps/?wt.mc_id=eventspg_16482_webpage_reactor).\\n\\n### Provisioning using symmetric key\\n\\nFor symmetric key provisioning you only need the following elements:\\n\\n- A registration ID\\n- The ID Scope\\n- The device name\\n- The key or the derived key for group provisioning\\n\\nThe code is then straight forward:\\n\\n```csharp\\nconst string RegistrationID = \\"nanoDPStTest\\";\\nconst string DpsAddress = \\"global.azure-devices-provisioning.net\\";\\nconst string IdScope = \\"0ne01234567\\";\\nconst string SasKey = \\"alongkeyencodedbase64\\";\\n\\n// See the previous sections in the SDK help, you either need to have the Azure certificate embedded\\n// Either passing it in the constructor\\nX509Certificate azureCA = new X509Certificate(DpsSampleApp.Resources.GetBytes(DpsSampleApp.Resources.BinaryResources.BaltimoreRootCA_crt));\\nvar provisioning = ProvisioningDeviceClient.Create(DpsAddress, IdScope, RegistrationID, SasKey, azureCA);\\nvar myDevice = provisioning.Register(new CancellationTokenSource(60000).Token);\\n\\nif(myDevice.Status != ProvisioningRegistrationStatusType.Assigned)\\n{\\n    Debug.WriteLine($\\"Registration is not assigned: {myDevice.Status}, error message: {myDevice.ErrorMessage}\\");\\n    return;\\n}\\n\\n// You can then create the device\\nvar device = new DeviceClient(myDevice.AssignedHub, myDevice.DeviceId, SasKey, nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtLeastOnce, azureCA);\\n// Open it and continue like for the previous sections\\nvar res = device.Open();\\nif(!res)\\n{\\n    Debug.WriteLine($\\"can\'t open the device\\");\\n    return;\\n}\\n```\\n\\nIn case a [DPS model](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md) is going to be used, the ID of the model has to be passed to the ProvisioningDeviceClient and DeviceClient constructor.\\nThe code above requires the following changes.\\n\\nAdd the model ID as a constant:\\n\\n```csharp\\npublic const string ModelId = \\"dtmi:orgpal:palthree:palthree_demo_0;1\\";\\n\\n```\\n\\nCreate the additional payload information with the model ID to be sent along with the registration with DPS and pass that to the call to `Register()`.\\n\\n```csharp\\nvar pnpPayload = new ProvisioningRegistrationAdditionalData\\n{\\n    JsonData = PnpConvention.CreateDpsPayload(ModelId),\\n};\\n\\nvar myDevice = provisioning.Register(pnpPayload, new CancellationTokenSource(60000).Token);\\n\\n```\\n\\nCreate the device client passing the model ID to the respective parameter in the constructor.\\n\\n```csharp\\nvar device = new DeviceClient(myDevice.AssignedHub, myDevice.DeviceId, SasKey, nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtLeastOnce, azureCA, ModelId);\\n```\\n\\nNote: like for the `DeviceClient` you need to make sure you are connected to a network properly and also have the date and time set on the device.\\n\\nProvisioning using certificates is supported as well and [described here](https://github.com/nanoframework/nanoFramework.Azure.Devices#provisioning-using-certificates).\\n\\n### Additional payload\\n\\nAdditional payload is supported as well. You can set it as a JSON string in the `ProvisioningRegistrationAdditionalData` class when calling the `Register` function. When the device has been provisioned, you may have as well additional payload provided.\\n\\n## Running on battery for 8 years and connecting to Azure\\n\\nOne of the advantages of MCU is their low consumption and ability to deep sleep very long even when connecting to Azure. You\'ll find a full article describing some of the secrets [here](https://devblogs.microsoft.com/dotnet/show-dotnet-running-my-net-nanoframework-for-8-years-on-a-battery/).\\n\\n## Conclusion\\n\\nIn this (long) article, we hope we have demonstrated **all** you need to connect your MCU using .NET nanoFramework to almost anything! As a recap, here are the repositories related to networking in .NET nanoFramework:\\n\\n* [TcpClient](https://github.com/nanoframework/System.Net.Sockets.TcpClient),\\n* [UdpClient](https://github.com/nanoframework/System.Net.Sockets.UdpClient),\\n* [System.Net.Http](https://github.com/nanoframework/System.Net.Http),\\n* [WebServer](https://github.com/nanoframework/nanoFramework.WebServer),\\n* [WebSockets](https://github.com/nanoframework/System.Net.WebSockets),\\n* [SignalR](https://github.com/nanoframework/nanoFramework.SignalR.Client),\\n* [AMQP](https://github.com/nanoframework/amqpnetlite),\\n* [MQTT](https://github.com/nanoframework/nanoFramework.m2mqtt),\\n* [Azure IoT library](https://github.com/nanoframework/nanoFramework.Azure.Devices),\\n* And of course, the Sample pack related to [networking](https://github.com/nanoframework/Samples#networking-including-http-ssl), [MQTT](https://github.com/nanoframework/Samples#mqtt), [AMQP](https://github.com/nanoframework/Samples#amqp), and [Azure](https://github.com/nanoframework/Samples#azure-specific)\\n\\nNext Friday, we\'ll see an advanced scenario: rebuilding fully a .NET nanoFramework image and including native C interoperability. Stay tuned! And as always, feedback is welcome!"},{"id":"14-iot-cow","metadata":{"permalink":"/blog/14-iot-cow","source":"@site/blog/2022-07-14-iot-cow.md","title":"14: AMA: IoT, cows, AI and poop - Jim discusses IoT in farming with Bryn Lewis","description":"Welcome to Day 14 of #JulyOT!!","date":"2022-07-14T00:00:00.000Z","formattedDate":"July 14, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"atatedge","permalink":"/blog/tags/atatedge"},{"label":"embedded","permalink":"/blog/tags/embedded"}],"readingTime":1.285,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"},{"name":"Bryn Lewis","title":"Consultant @devMobile Software","url":"https://github.com/kiwibryn","imageURL":"https://github.com/kiwibryn.png","key":"bryn"}],"frontMatter":{"slug":"14-iot-cow","title":"14: AMA: IoT, cows, AI and poop - Jim discusses IoT in farming with Bryn Lewis","authors":["jimb","bryn"],"tags":["30days","iot","iot4b","atatedge","embedded"],"draft":false},"prevItem":{"title":"15: .NET nanoFramework networking and Azure","permalink":"/blog/15-nano-framework"},"nextItem":{"title":"13: Ask Me Anything at Reactor: Azure IoT!","permalink":"/blog/13-iot-ama"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/14-iot-cow\\" />\\n  <meta name=\\"twitter:title\\" content=\\"AMA - IoT in farming\\" />\\n  <meta name=\\"twitter:description\\" content=\\"AMA: IoT, cows, AI and poop - Jim discusses IoT in farming with Bryn Lewis\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-14-iot-cow.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/14-iot-cow\\" />\\n</head>\\n\\n> Welcome to Day 14 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-14-iot-cow.png)\\n\\n_Join in the conversation and ask out IoT experts about digital agriculture._\\n\\n## AMA: IoT, cows, AI and \ud83d\udca9 - Jim discusses IoT in farming with Bryn Lewis\\n\\nDigital agriculture is a massively important use case for IoT. From simple solutions monitoring soil moisture levels to control watering, to complex AI solutions for animal health, IoT is helping farmers bring food to the tables of the growing world.\\n\\nIn this session, Jim is joined by Bryn Lewis, a Microsoft MVP and IoT expert who is working with farms in New Zealand to implement solutions using AI and IoT. Jim and Bryn will dive into some of the cool projects that Bryn is working on, discussing how AI and IoT can improve cow health, make milking easier, and even reduce water usage for cleanup, all within a hostile environment with wide temperature variances throughout the year, and way too much poop.\\n\\nJoin us for this AMA style conversation, and bring your own questions on digital agriculture to get answered by our Kiwi expert.\\n\\nCatch the recording on the Microsoft Reactor YouTube channel!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/EkCygi4o2rM\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>"},{"id":"13-iot-ama","metadata":{"permalink":"/blog/13-iot-ama","source":"@site/blog/2022-07-13-ama-reactor.md","title":"13: Ask Me Anything at Reactor: Azure IoT!","description":"Welcome to Day 13 of #JulyOT!!","date":"2022-07-13T00:00:00.000Z","formattedDate":"July 13, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"}],"readingTime":0.83,"hasTruncateMarker":false,"authors":[{"name":"Bruno Capuano","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/elbruno","imageURL":"https://github.com/elbruno.png","key":"bruno"},{"name":"Maria-Anastasia Moustaka","title":"Software Engineer @CANDI Advanced Business And Digital Solutions","url":"https://github.com/mariamou7","imageURL":"https://github.com/mariamou7.png","key":"mariaanastasia"}],"frontMatter":{"slug":"13-iot-ama","title":"13: Ask Me Anything at Reactor: Azure IoT!","authors":["bruno","mariaanastasia"],"tags":["30days","iot","iot4b"],"draft":false},"prevItem":{"title":"14: AMA: IoT, cows, AI and poop - Jim discusses IoT in farming with Bryn Lewis","permalink":"/blog/14-iot-cow"},"nextItem":{"title":"12: AI-powered predictive maintenance with Azure Sphere","permalink":"/blog/julyot-day12-embedded"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/13-iot-ama\\" />\\n  <meta name=\\"twitter:title\\" content=\\"AMA - Azure IoT\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Ask Me Anything at Reactor: Azure IoT\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-13-ama-reactor.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/13-iot-ama\\" />\\n</head>\\n\\n> Welcome to Day 13 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-13-ama-reactor.png)\\n\\n_Get your IoT questions answered by experts._\\n\\n## Ask Me Anything at Reactor: Azure IoT\\n\\nThis session is part of a series of Ask Me Anything at Reactor sessions that are giving us a platform to share stories, listen, ask respectful questions, and continue on our journey to improve and collaborate with User Groups and Online Communities.\\n\\nJoin us as we welcome our speakers Bruno Capuano and Maria-Anastasia Moustaka to the Ask Me Anything stage. They will be sharing their knowledge on Azure IoT and a variety of other topics.\\n\\nCatch the recording on the Microsoft Reactor YouTube channel!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/__Ky0TmZfak\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>"},{"id":"julyot-day12-embedded","metadata":{"permalink":"/blog/julyot-day12-embedded","source":"@site/blog/2022-07-12-embedded.md","title":"12: AI-powered predictive maintenance with Azure Sphere","description":"Welcome to Day 12 of #JulyOT!!","date":"2022-07-12T00:00:00.000Z","formattedDate":"July 12, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"}],"readingTime":3.085,"hasTruncateMarker":false,"authors":[{"name":"Dave Glover","title":"Senior Cloud Advocate @Microsoft","url":"https://github.com/gloveboxes","imageURL":"https://github.com/gloveboxes.png","key":"dave"}],"frontMatter":{"slug":"julyot-day12-embedded","title":"12: AI-powered predictive maintenance with Azure Sphere","authors":["dave"],"tags":["30days","iot","iot4b","embeddediot"],"draft":false},"prevItem":{"title":"13: Ask Me Anything at Reactor: Azure IoT!","permalink":"/blog/13-iot-ama"},"nextItem":{"title":"11: Cohetes de agua - Water rockets!","permalink":"/blog/11-cohetes-de-agua"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/julyot-day12-embedded\\" />\\n  <meta name=\\"twitter:title\\" content=\\"AI-powered predictive maintenance with Azure Sphere\\" />\\n  <meta name=\\"twitter:description\\" content=\\"AI-powered predictive maintenance can help identify a faulty machine before a real problem occurs, reducing maintenance costs, improving availability and customer satisfaction\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-12-sphere.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@dglover\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/julyot-day12-embedded\\" />\\n</head>\\n\\n> Welcome to Day 12 of **#JulyOT**!!\\n\\n![Post banner](/img/png/JulyOT-banner-12-sphere.png)\\n\\n_HVAC ([Heating, ventilation, and air conditioning](https://en.wikipedia.org/wiki/Heating,_ventilation,_and_air_conditioning)) units regulate our home and workplace environments. HVAC systems are ideal candidates for predictive maintenance, as they require regular costly maintenance._\\n\\n![HVAC System](https://upload.wikimedia.org/wikipedia/commons/9/90/Rooftop_Packaged_Units.JPG)\\n\\n## Watch the 10-minute end-to-end demonstration\\n\\n[![The image is the youtube thumbnail for the intro video](../static/img/png/predictive_maintenace_youtube.png)](https://youtu.be/62XKxzRld28)\\n\\n## Machine Learning on Embedded Hardware\\n\\nAI-powered predictive maintenance can help identify a faulty machine before a real problem occurs, reducing maintenance costs, improving availability and customer satisfaction. The advantages of predictive maintenance include:\\n\\n- Reduced carbon footprint. Keeping equipment running well has straightforward benefits for operating efficiency, but we should also ensure our processes are efficient. Fault monitoring can generate high volumes of low-value data. Sending this data to cloud systems consumes power and network resources. Running an ML model on embedded hardware consumes less electricity and network resources. Only predicted maintenance events get sent to the backend systems. Disabling network interfaces (for example, Wi-Fi) can further reduce power consumption until a high-value predictive maintenance event occurs.\\n- Access to better data for faster fault resolution.\\n- Low latency response to system faults. There are fault monitoring use cases that require immediate action to shut down a system. Sending fault monitoring data to cloud systems for processing might be too slow, further damaging the machine.\\n\\n## Predictive Maintenance on Azure Sphere\\n\\n![Image shows the Machine Learning Predictive Maintenance rig](../static/img/png/ml_predictive_maintenance_rig.jpeg)\\n\\n[Azure Sphere](https://azure.microsoft.com/services/azure-sphere) is a secure embedded platform that is ideal for quickly developing an IoT system. By providing a platform meeting all [7 properties of highly secured devices](https://www.microsoft.com/research/wp-content/uploads/2017/03/SevenPropertiesofHighlySecureDevices.pdf?wt.mc_id=eventspg_16482_webpage_reactor), Azure Sphere eliminates the need to be a hardware, OS, and security expert. These seven properties make Azure Sphere ideal for running and updating ML models. You don\u2019t want to solve one problem (equipment operation) and introduce a larger one (security).\\n\\nYou can deploy up to 3 custom apps on Azure Sphere, including two ML workloads on the low-power real-time cores. The predictive maintenance solution runs a continuous movement classification TinyML model on one of the Azure Sphere real-time cores. When the TinyML model detects movement, for example, a rattle, or a faulty motor bearing, an event is sent to the predictive maintenance app running on the high-level core. The predictive maintenance app then powers up the network connection and sends the event to Azure IoT Central. Azure IoT Central exports the predictive maintenance event to a Logic App, which generates a message destined for Microsoft Teams.\\n\\nThe beauty of this solution is that you are combining building blocks. You don\u2019t need to be a security expert, Azure Sphere has got you covered, Edge Impulse simplifies model development, and IoT Central, Logic Apps, and Microsoft Teams are low code offerings making it easier to pull everything together.\\n\\n![This image shows the predictive maintenance solution architecture](../static/img/png/predictive_maintenance_solution_architecture.png)\\n\\n## Building the TinyML model\\n\\nThe TinyML (TensorFlow Lite) model was built with [Edge Impulse](https://www.edgeimpulse.com/). Edge Impulse simplifies building machine learning models for embedded hardware such as Azure Sphere. The cloud service is designed for developers, so you don\u2019t need to be a data science guru. There are tools for ML training data acquisition, and wizards lead you through the process of training, testing, and exporting models. Learn more about Edge Impulse on their [getting started](https://docs.edgeimpulse.com/docs) page.\\n\\n## Get Started\\n\\nHead to the [AI-powered Predictive Maintenance](https://github.com/gloveboxes/AzureSphereMLPredictiveMaintenanceEW) repo to get started."},{"id":"11-cohetes-de-agua","metadata":{"permalink":"/blog/11-cohetes-de-agua","source":"@site/blog/2022-07-11-arduino-rockets.md","title":"11: Cohetes de agua - Water rockets!","description":"Welcome to Day 11 of #JulIoT!!","date":"2022-07-11T00:00:00.000Z","formattedDate":"July 11, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"juliot","permalink":"/blog/tags/juliot"}],"readingTime":3.915,"hasTruncateMarker":false,"authors":[{"name":"Francisco Dominguez","title":"Electrical Engineer and Project Manager, maker on IoT and other things in his spare time.","url":"https://github.com/fdominguezr","imageURL":"https://github.com/fdominguezr.png","key":"francisco"}],"frontMatter":{"slug":"11-cohetes-de-agua","title":"11: Cohetes de agua - Water rockets!","authors":["francisco"],"tags":["30days","iot","iot4b","juliot"],"draft":false},"prevItem":{"title":"12: AI-powered predictive maintenance with Azure Sphere","permalink":"/blog/julyot-day12-embedded"},"nextItem":{"title":"11: Learn Azure Percept from conference sessions","permalink":"/blog/11-azure-percept-conference-sessions"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/11-cohetes-de-agua\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Cohetes de agua - Water rockets\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Entra en la carrera espacial con Arduino y cohetes de agua.\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-11-cohetes-de-agua.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@Franciscodr\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/11-cohetes-de-agua\\" />\\n</head>\\n\\n> Welcome to Day 11 of **#JulIoT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-11-cohetes-de-agua.png)\\n\\n_This year we are also celebrating #JulIoT - JulyOT in Spanish!_\\n\\n## Cohetes de agua\\n\\n\xbfQuieres ver o incluso entrar en la carrera espacial?\\nAhora puedes con los cohetes de agua autom\xe1ticos. Hasta 100 metros de altura, captura de datos y despliegue autom\xe1tico de paraca\xeddas con Arduino.\\n\\n### Tutorial c\xf3mo crear un cohete de agua sencillo\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/C5G8b00kDKo\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nOs presento el tutorial de c\xf3mo hacer un cohete de agua sencillo. Incluye cohete y plataforma de lanzamiento. Suena complicado pero es f\xe1cil de hacer, volar y mantener.\\n\\nNo esperes que llegue muy alto, pero s\xed te asegurar\xe1 horas de diversi\xf3n mientras lo montas y luego vol\xe1ndolo. [Aqu\xed el v\xeddeo que me inspir\xf3 de Raketfued Rockets.](https://www.youtube.com/watch?v=i_W3VkJkZF0)\\n\\n[Y aqu\xed la lista de materiales traducida y con fotos de ejemplo para que se vea m\xe1s claro](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbjJnMi0zcUVhaU9SSnlaTTQyeGFfOVJXRVpSUXxBQ3Jtc0tuTjJ2MlRUMm5pTEJCQ1NRWkpFLWo0WVF4OGRBdk1PWDhZNnpMUVh0REVrRmUwMGZGd2ptYV9zQ29xWGNBQmhJWGZzdS1wSExZME1RVXJDVFFoRzdYQWJtNG5wTU1TZF9TbldzbUg3UlV0QjdXdmpfZw&q=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2F12s2KHlCgusn7dC_QWjIeuUqwQCy3Kw05XQkTBkiW7DE%2Fedit%23gid%3D0&v=C5G8b00kDKo)\\n\\n[Tienes el instructable aqu\xed (en ingl\xe9s)](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbHpUSnY3OXE5UmtBSDMyVk9zZHhyelRNalp2Z3xBQ3Jtc0traDZQcmNkYjkyaHdXaDdxOGgtM3FGbklqR3J2THNiUVFBQmFraDZMMUl1ZlNJY1FZYWh4ems5UWZ4Q25xNEFhMVRDNzdOZmVTc1pNa2VObW4xc1ZVRkNnTEpxZldxZmhXYzI1MWRKcWdRM0UtTDZzcw&q=https%3A%2F%2Fwww.instructables.com%2Fid%2FSimplified-Water-Rocket%2F&v=C5G8b00kDKo).\\n\\nOjo: vu\xe9lalo en un sitio despejado y d\xf3nde no haya gente. Si est\xe1s cerca mientras lo manejas hazlo con precauci\xf3n.\\n\\n### Videos from the water rocket (I) Oxford (UK)\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/r3aAcTf5RU0\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nFinally the rocket flies high, and I installed a camera onboard, so we can see more things.\\n\\n### Videos from a water rocket II. Oxford (UK)\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/4GGwC14PO_k\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nHere is the second part of the water rocket test!\\nWe\'ve got some progress on the electronics and new videos, don\'t miss them!\\n\\n### Automatic parachute for water rocket\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/sznkx21Y2Eg\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nFinally we have a parachute that works!\\nWell it only worked in 1 out of 4 attempts. Why? How is it working?\\nThe mechanism is very simple, with Arduino and a few components. I left everything explained in this video.\\n\\n### New automatic parachute system\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/6DkI61BpZuc\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n Here we have the new version of the water rocket, with all the secrets and improvements on:\\n- the launchpad, to avoid pressure leakage.\\n- The fins for a more straight flight.\\n- The automatic parachute system, more reliable and lighter.\\n- The navigation software, for a more accurate detection of launch, apogee, and data storage in the Arduino EEPROM.\\n\\n### Visita al Museo de la Ciencia de Londres. Cohetes\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/xw_YkiJrFGs\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nAqu\xed os traigo un mini tour por uno de los museos que m\xe1s me gustan: el Museo de la Ciencia de Londres.\\nNo es una pasada, sino lo siguiente!\\nMe centro especialmente en el apartado de cohetes porque es la parte que m\xe1s me gusta. \\nPero si te gusta la ciencia, la ingenier\xeda o simplemente curiosear c\xf3mo funcionan las cosas encontrar\xe1s de todo.\\nA ver, cosas pr\xe1cticas para saber:\\n- Entrada gratis. Piden donativo pero si no quieres no das. Recomiendo dar algo siempre para el mantenimiento del museo. Comprando cosas en su tienda, que es una pasada tambi\xe9n ayudas.\\n- Mejores horarios: en general primera hora (a las 10) o a \xfaltima hora (a las 16h). Cierran a las 18h. Te aconsejo mirar el horario en Google Maps porque te suele decir lo concurrido que est\xe1 en el momento que quieres ir.\\n- Tienes un simulador en la planta baja de las misiones Apolo que est\xe1 bien: se mueven los asientos y es 3D. En la \xfaltima planta tambi\xe9n hay simuladores chulos.\\n\\n### (One of the) First in the World landing gear for water rockets\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/IzD6kzDOr1E\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nFinally I could make it. This is a great advancement of a landing system for a water rocket.\\n(Thanks for your comments correcting me. If you did it before or in other way, please let me know. As you see I corrected the title too to be fair \ud83d\ude09 ).\\n\\nAs you can see there are already some progress like:\\n- the self deployed legs.\\n- the automatic mechanism, entirely design from scratch.\\n\\nI did already some reliability tests, with all the parts integrated.\\nNext steps are to connect the servo mechanism to the Arduino and program the system."},{"id":"11-azure-percept-conference-sessions","metadata":{"permalink":"/blog/11-azure-percept-conference-sessions","source":"@site/blog/2022-07-11-azure-percept-conference-sessions.md","title":"11: Learn Azure Percept from conference sessions","description":"Welcome to Day 11 of #JulyOT!","date":"2022-07-11T00:00:00.000Z","formattedDate":"July 11, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"}],"readingTime":4.4,"hasTruncateMarker":false,"authors":[{"name":"Amira Youssef","title":"Principal PM Manager @Microsoft","url":"https://github.com/Amiyouss","imageURL":"https://pbs.twimg.com/profile_images/1426589231422480385/OzZty9cq_400x400.jpg","key":"amira"}],"frontMatter":{"slug":"11-azure-percept-conference-sessions","title":"11: Learn Azure Percept from conference sessions","authors":["amira"],"tags":["30days","iot","aiatedge"],"draft":false},"prevItem":{"title":"11: Cohetes de agua - Water rockets!","permalink":"/blog/11-cohetes-de-agua"},"nextItem":{"title":"09: Getting Started with Microsoft Azure and CircuitPython","permalink":"/blog/09-azure-circuit-python"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/11-azure-percept-conference-sessions\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Learn Azure Percept from conference sessions\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Learn Azure Percept from conference sessions\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-11-azure-percept-conference-sessions.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@Amiyouss1\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/11-azure-percept-conference-sessions\\" />\\n</head>\\n\\n> Welcome to Day 11 of **#JulyOT**!\\n\\n![Page banner](/img/png/JulyOT-banner-11-azure-percept-conference-sessions.png)\\n\\n_Today we learn more about Azure Percept._\\n\\n# Learn Azure Percept from conference sessions\\n\\nAzure Percept is a comprehensive, easy-to-use platform with added security for creating edge AI solutions. Start your proof of concept in minutes with hardware accelerators built to integrate seamlessly with Azure AI and Azure IoT services. Azure Percept works out of the box with Azure Cognitive Services, Azure Machine Learning, and other Azure services to deliver vision and audio insights in real time.\\n\\nTo help you learn more about Azure Percept, we\'ve curated a set of recorded sessions and blog posts from 3 different conferences.\\n\\n## Microsoft Build 2022\\n\\n### Microsoft Build Into Focus: Preparing for the metaverse\\n\\nThe metaverse is an emerging concept and there are many questions around what it is, and what can companies do with it? In this session, we\'ll invite a panel of industry experts from Microsoft to share their perspectives on the metaverse, how enterprises can benefit from metaverse experiences, and how to leverage current technologies to get started.\\n\\n[![Into focus Metaverse video](/img/png/build-into-focus-metaverse.png)](https://mybuild.microsoft.com/sessions/545e4d7d-152c-4f1a-8f32-5e7519098dbb?wt.mc_id=eventspg_16482_webpage_reactor)\\n\\n### Embrace digital transformation at the edge with Azure Percept\\n\\nDiscover how to accelerate edge AI with Azure Percept and Azure Stack HCI, and other Azure services that simplify AI and machine learning training and deployment at scale. Also get a glimpse of what\u2019s to come next with edge AI and internet-of-things innovation from Azure Percept.\\n\\n[![Embrace digital transformation video](/img/png/build-embrace-transformation.png)](https://mybuild.microsoft.com/sessions/f40fdc70-648a-4353-b483-cdf763b16c2f?wt.mc_id=eventspg_16482_webpage_reactor)\\n\\n## NVIDIA GTC Spring 2022\\n\\n### Transforming AI and ML at the Edge with Microsoft and NVIDIA (Presented by Microsoft Azure)\\n\\nNVIDIA and Microsoft are working together to transform AI and machine learning, leveraging the power of the GPU at the edge combined with Azure AI services. Discover how to accelerate edge AI with Azure Percept and Azure Stack HCI, and other Azure services that simplify AI and machine learning training and deployment at scale, as well as making it more accessible to non-developers and data scientists. Also get a glimpse of what\u2019s to come next with edge AI and internet-of-things innovation from Microsoft. Watch this session for a chance to be entered to win a special SWAG Box sponsored by Microsoft and NVIDIA.\\n\\n[![NVIDIA transforming AI at the edge video](/img/png/nvidia-transforming-ai-edge.png)](https://www.nvidia.com/on-demand/session/gtcspring22-s42525/)\\n\\n### Embrace digital transformation at the edge with Azure Percept\\n\\nRight now, a paradigm shift is underway. Customers are increasingly investing in artificial intelligence (AI) and machine learning (ML) at the edge to transform business operations, deploying intelligent devices that will generate more data in the next three years than in the past 30 years combined.\\n\\nLearn more in [this blog post](https://techcommunity.microsoft.com/t5/internet-of-things-blog/embrace-digital-transformation-at-the-edge-with-azure-percept/ba-p/3261300?wt.mc_id=eventspg_16482_webpage_reactor).\\n\\n[![Azure percept overview](https://techcommunity.microsoft.com/t5/image/serverpage/image-id/357015iAAA87FD555D8FEC3/image-dimensions/701x394?v=v2)](https://techcommunity.microsoft.com/t5/internet-of-things-blog/embrace-digital-transformation-at-the-edge-with-azure-percept/ba-p/3261300?wt.mc_id=eventspg_16482_webpage_reactor)\\n\\n## Microsoft Ignite 2021\\n\\n### Automate Your Operations with Edge AI\\n\\nAutomating your operations doesn\u2019t need to be a challenge\u2014and it\u2019s something you can do today. Join this session with NVIDIA and Microsoft to discover how you can use Edge AI for your automation needs. We will provide a behind-the-scenes look at the technology making it all possible, including Microsoft Azure Percept and Azure Stack HCI. Select partners and solution providers will also join us to share more about the innovative hardware that you can run in your edge location.\\n\\n[![Automate Your Operations video](/img/png/ignite-automate-operations.png)](https://myignite.microsoft.com/sessions/dfc3448c-4048-4f15-b8f4-86c0f1a76684?wt.mc_id=eventspg_16482_webpage_reactor)\\n\\n### Microsoft and NVIDIA partner to accelerate edge AI deployment\\n\\nIn a journey to understand the typical edge AI deployment journey, Microsoft spoke to over 500 customers and partners about their biggest barriers to entry. We heard about complexities when trying to scale, no end-to-end solution platforms, even security concerns. With these findings in mind, we released Azure Percept DK to public preview in Spring 2021. It\'s now [available to customers in 16 markets](https://techcommunity.microsoft.com/t5/internet-of-things/azure-percept-dk-and-azure-percept-audio-now-available-in-more/ba-p/2712969?wt.mc_id=eventspg_16482_webpage_reactor) around the world.\\n\\nLearn more in [this blog post](https://techcommunity.microsoft.com/t5/internet-of-things-blog/microsoft-and-nvidia-partner-to-accelerate-edge-ai-deployment/ba-p/2897307?wt.mc_id=eventspg_16482_webpage_reactor).\\n\\n[![Microsoft and NVIDIA partner to accelerate edge AI deployment](https://techcommunity.microsoft.com/t5/image/serverpage/image-id/321596i1E16377022E488B2/image-size/large?v=v2&px=999)](https://techcommunity.microsoft.com/t5/internet-of-things/azure-percept-dk-and-azure-percept-audio-now-available-in-more/ba-p/2712969?wt.mc_id=eventspg_16482_webpage_reactor)\\n\\n### Time to Ignite: NVIDIA Works With Microsoft to Bolster GPU-Accelerated Edge AI and Visualization\\n\\nExplore how the companies\u2019 AI solutions deliver breakthroughs across industries, at Microsoft Ignite 2021.\\n\\nLearn more in [this blog post](https://blogs.nvidia.com/blog/2021/10/28/nvidia-at-microsoft-ignite/).\\n\\n[![NVIDIA Works With Microsoft to Bolster GPU-Accelerated Edge AI and Visualization](https://blogs.nvidia.com/wp-content/uploads/2021/10/microsoft-ignite-rollup-1280x680-1.jpg)](https://blogs.nvidia.com/blog/2021/10/28/nvidia-at-microsoft-ignite/)\\n\\n### Discover how DataRobot & Microsoft deliver more connected AI solutions at scale\\n\\nTo realize the full potential of AI, organizations need to bring together teams, unify data and operate, at scale, across all environments - from the cloud, to the data center, to the edge. Together, DataRobot AI Cloud and Microsoft can deliver this next generation of AI. Learn how you can run DataRobot AI Cloud platform on Azure, harness the power of AI at the edge with Azure Percept, and soon, drive real-time collaboration between data scientists and data managers on Teams.\\n\\n[![Discover how DataRobot & Microsoft deliver more connected AI solutions video](/img/png/ignite-datarobot-microsoft.png)](https://myignite.microsoft.com/sessions/163fd807-58d7-492f-b9e6-a6882397e0fb?wt.mc_id=eventspg_16482_webpage_reactor)\\n\\n### Deliver More Connected, Intelligent AI Solutions at Scale with Microsoft and DataRobot AI Cloud\\n\\nAt this year\u2019s Microsoft Ignite event, DataRobot is thrilled to join forces with Microsoft to bring organizations better AI-enabled experiences that deliver world-class customer experience and impactful business results.\\n\\nLearn more in [this blog post](https://www.datarobot.com/blog/intelligent-ai-solutions-at-scale-with-microsoft-and-datarobot-ai-cloud/).\\n\\n[![Discover how DataRobot & Microsoft deliver more connected AI solutions video](/img/png/ignite-datarobot-microsoft.png)](https://www.datarobot.com/blog/intelligent-ai-solutions-at-scale-with-microsoft-and-datarobot-ai-cloud/)"},{"id":"09-azure-circuit-python","metadata":{"permalink":"/blog/09-azure-circuit-python","source":"@site/blog/2022-07-09-azure-circuit-python.mdx","title":"09: Getting Started with Microsoft Azure and CircuitPython","description":"Welcome to Day 9 of #JulyOT!","date":"2022-07-09T00:00:00.000Z","formattedDate":"July 9, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"}],"readingTime":0.85,"hasTruncateMarker":false,"authors":[{"name":"Jen Fox","title":"Senior Program Manager @Microsoft","url":"https://github.com/jenfoxbot","imageURL":"https://pbs.twimg.com/profile_images/1251933030194704385/bFUIbxQ-_400x400.jpg","key":"jen"}],"frontMatter":{"slug":"09-azure-circuit-python","title":"09: Getting Started with Microsoft Azure and CircuitPython","authors":["jen"],"tags":["30days","iot","iot4b"],"draft":false},"prevItem":{"title":"11: Learn Azure Percept from conference sessions","permalink":"/blog/11-azure-percept-conference-sessions"},"nextItem":{"title":"08: IoT for Beginners lesson 2!","permalink":"/blog/08-julyot-iot-beginners"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/09-azure-circuit-python\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Getting Started with Microsoft Azure and CircuitPython\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Getting Started with Microsoft Azure and CircuitPython\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-9-azure-circuitpython.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@ellerbach\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/09-azure-circuit-python\\" />\\n</head>\\n\\n> Welcome to Day 9 of **#JulyOT**!\\n\\n![Page banner](/img/png/JulyOT-banner-9-azure-circuitpython.png)\\n\\n_Today we learn about using Azure IoT with Circuit Python._\\n\\n## Getting Started with Microsoft Azure and CircuitPython\\n\\nLearn how to use Microsoft Azure IoT with CircuitPython! If you are an embedded developer who loves CircuitPython and want to connect to the cloud, then [this guide on the Adafruit Learn platform](https://learn.adafruit.com/getting-started-with-microsoft-azure-and-circuitpython) is for you.\\n\\nThis guide will walk you through how to get started with Microsoft Azure using a Feather ESP32-S2 TFT and a BME688 sensor to monitor temperature, humidity and air pressure. The data is logged to Microsoft Azure every fifteen minutes and can be viewed on a dashboard.\\n\\n<form action=\\"https://learn.adafruit.com/getting-started-with-microsoft-azure-and-circuitpython\\" target=\\"_blank\\">\\n    <input type=\\"submit\\" value=\\"Take me to the guide\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n</form>"},{"id":"08-julyot-iot-beginners","metadata":{"permalink":"/blog/08-julyot-iot-beginners","source":"@site/blog/2022-07-08-iot-beginners.mdx","title":"08: IoT for Beginners lesson 2!","description":"Welcome to Day 8 of #JulyOT!!","date":"2022-07-08T00:00:00.000Z","formattedDate":"July 8, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"}],"readingTime":0.72,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"}],"frontMatter":{"slug":"08-julyot-iot-beginners","title":"08: IoT for Beginners lesson 2!","authors":["jimb"],"tags":["30days","iot","iot4b"],"draft":false},"prevItem":{"title":"09: Getting Started with Microsoft Azure and CircuitPython","permalink":"/blog/09-azure-circuit-python"},"nextItem":{"title":"08: .NET nanoFramework GPIO, I2C, SPI and other IO support","permalink":"/blog/08-nano-framework"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/08-julyot-iot-beginners\\" />\\n  <meta name=\\"twitter:title\\" content=\\"IoT for Beginners lesson 2\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Join us for a deeper dive into IoT devices as part of our live streamed IoT for Beginners lessons\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-8-iot-beginners.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/08-julyot-iot-beginners\\" />\\n</head>\\n\\n> Welcome to Day 8 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-8-iot-beginners.png)\\n\\n_Today we live stream lesson 2 of IoT for Beginners - a deeper dive into IoT._\\n\\n## IoT For Beginners\\n\\n[IoT for beginners](https://aka.ms/iot-beginners) is a free, open source, 24-lesson IoT curriculum. The second lesson is live-streamed today from the Microsoft Reactor. Catch the recording on the Microsoft Reactor YouTube channel.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/NAcTzfMSxA8\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nLearn more about IoT for Beginners on the official [IoT for Beginners GitHub repo](https://aka.ms/iot-beginners)."},{"id":"08-nano-framework","metadata":{"permalink":"/blog/08-nano-framework","source":"@site/blog/2022-07-08-nano-framework.md","title":"08: .NET nanoFramework GPIO, I2C, SPI and other IO support","description":"Welcome to Day 8 of #JulyOT!","date":"2022-07-08T00:00:00.000Z","formattedDate":"July 8, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"}],"readingTime":10.33,"hasTruncateMarker":false,"authors":[{"name":"Laurent Ellerbach","title":"Principal Engineering Manager @Microsoft","url":"https://github.com/ellerbach","imageURL":"https://github.com/ellerbach.png","key":"laurent"},{"name":"Jos\xe9 Sim\xf5es","title":"CEO @Eclo Solutions","url":"https://github.com/josesimoes","imageURL":"https://github.com/josesimoes.png","key":"jose"}],"frontMatter":{"slug":"08-nano-framework","title":"08: .NET nanoFramework GPIO, I2C, SPI and other IO support","authors":["laurent","jose"],"tags":["30days","iot","embeddediot"],"draft":false},"prevItem":{"title":"08: IoT for Beginners lesson 2!","permalink":"/blog/08-julyot-iot-beginners"},"nextItem":{"title":"07: A Closed Captioning Example on Raspberry Pi using Azure Cognitive services","permalink":"/blog/07-closed-captioning-rpi"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/08-nano-framework\\" />\\n  <meta name=\\"twitter:title\\" content=\\".NET nanoFramework GPIO, I2C, SPI and other IO support\\" />\\n  <meta name=\\"twitter:description\\" content=\\".NET nanoFramework GPIO, I2C, SPI and other IO support\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-8-nanoframework.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@ellerbach\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/08-nano-framework\\" />\\n</head>\\n\\n> Welcome to Day 8 of **#JulyOT**!\\n\\n![Page banner](/img/png/JulyOT-banner-8-nanoframework.png)\\n\\n# GPIO, I2C, SPI, PWM, ADC, DAC, Serial and more!\\n\\n .NET nanoFramework has support for GPIO, I2C, SPI, PWM, ADC, DAC, Serial, 1-Wire. Also the API are aligned with [.NET IoT](https://github.com/dotnet/iot/) making it easy for code reuse between development on a Raspberry Pi with .NET 6.0 and an MCU running .NET nanoFramework.\\n\\n A comparison on how to reuse code and the differences between .NET IoT and .NET nanoFramework is available [here](https://github.com/dotnet/samples/tree/main/iot/dotnet-iot-and-nanoframework).\\n\\n There are dedicated classes with detailed documentation and samples for each of them:\\n\\n - General Purpose Input and Output (GPIO): [System.Device.Gpio](https://github.com/nanoframework/System.Device.Gpio) and associated documentation for the [class library](https://docs.nanoframework.net/api/System.Device.Gpio.html)\\n\\n     And a code snipet to blink a led:\\n\\n     ```csharp\\n     // Creates a GPIO controller\\n     GpioController controller = new();\\n     // Open the pin\\n     GpioPin led = controller.OpenPin(12, PinMode.Output);\\n     // Change the value of the pin. Equivalent code as the next line: controller.Write(12, PinValue.Low)\\n     led.Write(PinValue.Low);\\n     while (true)\\n     {\\n         // Toggle the value of the pin\\n         led.Toggle();\\n         Thread.Sleep(125);\\n     }\\n     ```\\n\\n     [Blink your first led](https://github.com/nanoframework/Samples/blob/main/samples/Blinky)! [GPIO sample pack](https://github.com/nanoframework/Samples/blob/main/samples/Gpio) including event management.\\n\\n - Serial Peripheral Interface (SPI): [System.Device.Spi](https://github.com/nanoframework/System.Device.Spi)and associated document for the [class library](https://docs.nanoframework.net/api/System.Device.Spi.html)\\n\\n     To create a SpiDevice, you need to follow this pattern:\\n\\n     ```csharp\\n     SpiDevice spiDevice;\\n     SpiConnectionSettings connectionSettings;\\n     // Note: the ChipSelect pin should be adjusted to your device, here 12\\n     // You can adjust as well the bus, here 1 for SPI1\\n     connectionSettings = new SpiConnectionSettings(1, 12);\\n     spiDevice = SpiDevice.Create(connectionSettings);\\n     ```\\n\\n     You can write a SpanByte like this:\\n\\n     ```csharp\\n     SpanByte writeBuffer = new byte[2] { 42, 84 };\\n     spiDevice.Write(writeBuffer);\\n     ```\\n\\n     You can write a ushort array like this:\\n\\n     ```csharp\\n     ushort[] writeBuffer = new ushort[2] { 4200, 8432 };\\n     spiDevice.Write(writeBuffer);\\n     ```\\n\\n     You can write single bytes:\\n     ```csharp\\n     spiDevice.WriteByte(42);\\n     ```\\n\\n     Read operations are similar:\\n\\n     ```csharp\\n     SpanByte readBuffer = new byte[2];\\n     // This will read 2 bytes\\n     spiDevice.Read(readBuffer);\\n     ushort[] readUshort = new ushort[4];\\n     // This will read 4 ushort\\n     spiDevice.Read(readUshort);\\n     // read 1 byte\\n     byte readMe = spiDevice.ReadByte();\\n     ```\\n\\n     For full transfer, you need to have 2 arrays of the same size and perform a full duplex transfer:\\n\\n     ```csharp\\n     SpanByte writeBuffer = new byte[4] { 0xAA, 0xBB, 0xCC, 0x42 };\\n     SpanByte readBuffer = new byte[4];\\n     spiDevice.TransferFullDuplex(writeBuffer, readBuffer);\\n     // Same for ushirt arrays:\\n     ushort[] writeBuffer = new ushort[4] { 0xAABC, 0x00BB, 0xCC00, 0x4242 };\\n     ushort[] readBuffer = new ushort[4];\\n     spiDevice.TransferFullDuplex(writeBuffer, readBuffer);\\n     ```\\n\\n     More [System.Device.Spi samples](https://github.com/nanoframework/Samples/blob/main/samples/SPI).\\n\\n - Inter-Integrated Circuit (I2C): [System.Device.I2c](https://github.com/nanoframework/System.Device.I2c) and associated document for the [class library](https://docs.nanoframework.net/api/System.Device.I2c.html)\\n\\n     Here is a short example on how to use I2C:\\n\\n     ```csharp\\n     // In this case we are opening the bus 1 and the device address 0x42\\n     I2cDevice i2c = new(new I2cConnectionSettings(1, 0x42));\\n     // We write a byte, in this case 0x07, we can write a SpanByte as well\\n     var res = i2c.WriteByte(0x07);\\n     // A successfull write will be: 0x10 Write: 1, transferred: 1\\n     // A non successful one: 0x0F Write: 4, transferred: 0\\n     Debug.Write($\\"0x{i:X2} Write: {res.Status}, transferred: {res.BytesTransferred}\\");\\n     // We\'re now trying to read 2 bytes\\n     SpanByte span = new byte[2];\\n     res = i2c.Read(span);\\n     // A successfull write will be: Read: 1, transferred: 1\\n     // A non successfull one: Read: 2, transferred: 0\\n     Debug.WriteLine($\\", Read: {res.Status}, transferred: {res.BytesTransferred}\\");\\n     ```\\n\\n     [I2C sample sample pack](https://github.com/nanoframework/Samples/blob/main/samples/I2C) containing as well [I2C GPS sample](https://github.com/nanoframework/Samples/blob/main/samples/I2C/System.Device.I2c/GPS) and an [I2C Scanner sample](https://github.com/nanoframework/Samples/blob/main/samples/I2C/NanoI2cScanner).\\n\\n - Digital-to-analog converter (DAC): [System.Device.Dac](https://github.com/nanoframework/System.Device.Dac) and associated document for the [class library](https://docs.nanoframework.net/api/System.Device.Dac.html)\\n\\n     A simple example for DAC is to create a specific sinus wave for example:\\n\\n     ```csharp\\n     // Gets the controller\\n     DacController dac = DacController.GetDefault();\\n     // Open channel 0\\n     DacChannel dacChannel = dac.OpenChannel(0);\\n     // Gete DAC resolution\\n     dacResolution = dac.ResolutionInBits;\\n\\n     int upperValue, midRange;\\n     double radian = 0;\\n     // Gets upper value from DAC resolution\\n     upperValue = (int)Math.Pow(2.0, dacResolution);\\n\\n     // compute a reasonable increment value from the resolution\\n     float increment = maxRads / (dacResolution * 10);\\n     midRange = upperValue / 2;\\n\\n     while(true)\\n     {\\n         // because the DAC can\'t output negative values\\n         // we have to offset the sine wave to half the DAC output range\\n         uint value = (uint)((Math.Sin(radian) * (midRange - 1)) + midRange);\\n         //Output the current value to console when in debug.\\n         Debug.WriteLine($\\"DAC SineWave output current value: {value}\\");\\n         // output to DAC\\n         channel.WriteValue((ushort)value);\\n         // increment angle\\n         radian += increment;\\n         if (radian >= maxRads)\\n         {\\n             // tweak the value so it doesn\'t overflow the DAC\\n             radian = 0;\\n         }\\n\\n         // Wait 5 milliseconds before the next point\\n         Thread.Sleep(5);\\n     }\\n     ```\\n\\n     [Digital Analog Converter samples](https://github.com/nanoframework/Samples/blob/main/samples/DAC).\\n\\n - Analog-to-digital converter (ADC): [System.Device.Adc](https://github.com/nanoframework/System.Device.Adc) and associated document for the [class library](https://docs.nanoframework.net/api/System.Device.Adc.html)\\n\\n     Each target device has an ADC Controller. To read a channel, first, instantiate the ADC controller and open the channel you want to read from. To read the raw value from an ADC channel, it\'s a simple matter of calling the Read() method on an open channel.\\n\\n     ```csharp\\n     AdcController adc1 = new AdcController();\\n     AdcChannel channel0 = adc1.OpenChannel(0);\\n     int myAdcRawvalue = channel0.ReadValue();\\n     ```\\n\\n     To find details about the ADC controller, query the ADC controller properties, like this.\\n\\n     ```csharp\\n     // get maximum raw value from the ADC controller\\n     int max1 = adc1.MaxValue;\\n     // get minimum raw value from the ADC controller\\n     int min1 = adc1.MinValue;\\n     // find how many channels are available \\n     int channelCount = adc1.ChannelCount;\\n     // resolution provided by the ADC controller\\n     int adcResolution = adc1.ResolutionInBits;\\n     ```\\n\\n     [Analogic/Digital converter sample](https://github.com/nanoframework/Samples/blob/main/samples/ADC).\\n\\n - Pulse-width Modulation (PWM): [System.Device.Pwm](https://github.com/nanoframework/System.Device.Pwm) and associated document for the [class library](https://docs.nanoframework.net/api/System.Device.Pwm.html)\\n\\n     You can create a PWM channel from a pin number. For an ESP32 device, allocate the pin, for an STM32 device ensure the selected pin is PWM enabled.\\n\\n     ```csharp\\n     // Case of ESP32, you need to set the pin function, in this example PWM3 for pin 18:\\n     Configuration.SetPinFunction(18, DeviceFunction.PWM3);\\n     PwmChannel pwmPin = PwmChannel.CreateFromPin(18, 40000);\\n     // You can check then if it has created a valid one:\\n     if (pwmPin != null)\\n     {\\n         // You do have a valid one\\n     }\\n     ```\\n\\n     You can adjust the duty cycle by using the property:\\n\\n     ```csharp\\n     pwmPin.DutyCycle = 0.42;\\n     ```\\n\\n     The duty cycle goes from 0.0 to 1.0.\\n\\n     It is recommended to set the frequency when creating the PWM Channel. You can technically change it at any time but keep in mind some platforms may not behave properly when adjusting this element.\\n\\n     Alternatively, if you know the chip/timer Id and the channel then follow this example:\\n\\n     ```csharp\\n     PwmChannel pwmPin = new(1, 2, 40000, 0.5);\\n     ```\\n\\n     More on [System.Device.Pwm sample](https://github.com/nanoframework/Samples/blob/main/samples/PWM/System.Device.Pwm).\\n\\n - Serial Port: [System.IO.Ports](https://github.com/nanoframework/System.IO.Ports)and associated documentation for the [class library](https://docs.nanoframework.net/api/System.IO.Ports.html)\\n\\n     Serial ports are often used to communicate with sensors. The `SerialPort` must be first opened before it can be used. The serial port can also be closed, when the serial port is disposed, the `SerialPort` will perform the close operation regardless of any ongoing receive or transmit operations.\\n\\n     ```csharp\\n     // You can specify baud rate, parity, bit stops and number of bits as well:\\n     var port = new SerialPort(\\"COM2\\");\\n     port.Open();\\n     // Do a lot of things here, write, read\\n     port.Close();\\n     ```\\n\\n     There are functions to read and write, some are byte related, others string related. Note that string functions will use UTF8 `Encoding` charset.\\n\\n     Example of sending and reading byte arrays:\\n\\n     ```csharp\\n     byte[] toSend = new byte[] { 0x42, 0xAA, 0x11, 0x00 };\\n     byte[] toReceive = new byte[50];\\n     // this will send the 4 bytes:\\n     port.Write(toSend, 0, toSend.Length);\\n     // This will only send the bytes AA and 11:\\n     port.Write(toSend, 1, 2);\\n     // This will check then number of available bytes to read\\n     var numBytesToRead = port.BytesToRead;\\n     // This will read 50 characters:\\n     port.Read(toReceive, 0, toReceive.Length);\\n     // this will read 10 characters and place them at the offset position 3:\\n     port.Read(toReceive, 3, 10);\\n     // Note: in case of time out while reading or writing, you will receive a TimeoutException\\n     // And you can as well read a single byte:\\n     byte oneByte = port.ReadByte();\\n     ```\\n\\n     Sending and receiving string example:\\n\\n     ```csharp\\n     string toSend = \\"I \u2764 nanoFramework\\";\\n     port.WriteLine(toSend);\\n     // this will send the string encoded finishing by a new line, by default `\\\\n`\\n     // You can change the new line to be anything:\\n     port.NewLine = \\"\u2764\u2764\\";\\n     // Now it will send 2 hearts as the line ending `WriteLine` and will use 2 hearts as the terminator for `ReadLine`.\\n     // You can change it back to the `\\\\n` default at anytime:\\n     port.NewLine = SerialPort.DefaultNewLine; // default is \\"\\\\n\\"\\n     // This will read the existing buffer:\\n     string existingString = port.ReadExisting();\\n     // Note that if it can\'t properly convert the bytes to a string, you\'ll get an exception\\n     // This will read a full line, it has to be terminated by the NewLine string.\\n     // If nothing is found ending by the NewLine in the ReadTimeout time frame, a TimeoutException will be raised.\\n     string aFullLine = port.ReadLine();\\n     ```\\n\\n     SerialPort supports events when characters are received.\\n\\n     ```csharp\\n         // Subscribe to the event\\n         port.DataReceived += DataReceivedNormalEvent;\\n\\n         // When you\'re done, you can as well unsubscribe\\n         port.DataReceived -= DataReceivedNormalEvent;\\n\\n     private void DataReceivedNormalEvent(object sender, SerialDataReceivedEventArgs e)\\n     {\\n         var ser = (SerialPort)sender;\\n         // Now you can check how many characters are available, read a line for example\\n         var numBytesToRead = port.BytesToRead;\\n         string aFullLine = ser.ReadLine();\\n     }\\n     ```\\n\\n     There are more supported. Check it in the [System.IO.Ports serial Communication sample](https://github.com/nanoframework/Samples/blob/main/samples/SerialCommunication).\\n\\n - One Wire or 1-Wire: [nanoFramework.Device.OneWire](https://github.com/nanoframework/nanoFramework.Device.OneWire) and associated document for the [class library](https://docs.nanoframework.net/api/nanoFramework.Device.OneWire.html)\\n\\n     To connect to a 1-Wire bus, first, instantiate an OneWireHost object, then perform operations with the connected devices.\\n\\n     ```csharp\\n     OneWireHost _OneWireHost = new OneWireHost();\\n     ```\\n\\n     To find the first device connected to the 1-Wire bus, and perform a reset on the bus before performing the search, call the `FindFirstDevice` method:\\n\\n     ```csharp\\n     _OneWireHost.FindFirstDevice(true, false);\\n     ```\\n\\n     To write a byte with the value 0x44 to the connected device:\\n\\n     ```csharp\\n     _OneWireHost.WriteByte(0x44);\\n     ```\\n\\n     To get a list with the serial number of all the 1-Wire devices connected to the bus:\\n\\n     ```csharp\\n     var deviceList = _OneWireHost.FindAllDevices();\\n\\n     foreach(byte[] device in deviceList)\\n     {\\n         string serial = \\"\\";\\n\\n         foreach (byte b in device)\\n         {\\n             serial += b.ToString(\\"X2\\");\\n         }\\n\\n         Console.WriteLine($\\"{serial}\\");\\n     }\\n     ```\\n\\n     Check out the [1-Wire sample](https://github.com/nanoframework/Samples/blob/main/samples/1-Wire).\\n\\n > Note: devices have different ways to name pins and set them up. It is important to check the default configuration, especially for any STM32 devices. ESP32 devices can be set dynamically. A NuGet package is available for this [nanoFramework.Hardware.Esp32](https://github.com/nanoframework/nanoFramework.Hardware.Esp32). In that case, you would have to set the pins if they don\'t match your [defaults pins](https://docs.nanoframework.net/content/esp32/esp32_pin_out.html).\\n\\n ## IoT Repository and advanced bindings\\n\\n The alignment between .NET IoT and .NET nanoFramework allows code reuse between the different platforms. While it\'s not technically possible to have the same NuGet for both platforms, reusing API and code is possible. A lot of work and effort has been put in place to facilitate the creation of individual NuGet packages for almost all of the .NET IoT bindings! The [IoT Device repository](https://github.com/nanoframework/nanoFramework.IoT.Device) contains all the tools and the code for all of the available bindings.\\n\\n The .NET nanoFramework does not *yet* support Generics or Linq, and in places, compromises have been made so the framework fits on constrained devices. [This page](https://docs.nanoframework.net/content/architecture/simplifications-and-trade-offs.html) explains most of them.\\n\\n Tools to help in the migration have been built to automate some of the migration and [initial work started back in May 2021](https://www.nanoframework.net/net-iot-bindings-available/). Now more than 98 bindings are available, some specific for MCU and optimized for a specific platform like ESP32. .NET IoT also benefited from this work as some of those new bindings have been migrated back to .NET IoT.\\n\\n Here is a view of the devices!\\n\\n [![device list](../static/img/png/iot-device-list.png)](https://github.com/nanoframework/nanoFramework.IoT.Device#list-of-devices)\\n\\n Each binding has a sample. All is well organized and you\'ll find those in the `/devices/BindingName/samples` directory. And as an example, here is how you can use a BMP280:\\n\\n ```csharp\\n // bus id on the MCU\\n const int busId = 1;\\n\\n I2cConnectionSettings i2cSettings = new(busId, Bmp280.DefaultI2cAddress);\\n I2cDevice i2cDevice = I2cDevice.Create(i2cSettings);\\n using var i2CBmp280 = new Bmp280(i2cDevice);\\n\\n // set higher sampling\\n i2CBmp280.TemperatureSampling = Sampling.LowPower;\\n i2CBmp280.PressureSampling = Sampling.UltraHighResolution;\\n\\n // Perform a synchronous measurement\\n var readResult = i2CBmp280.Read();\\n\\n // Print out the measured data\\n Debug.WriteLine($\\"Temperature: {readResult.Temperature?.DegreesCelsius:N1}\\\\u00B0C\\");\\n Debug.WriteLine($\\"Pressure: {readResult.Pressure?.Hectopascals:N2}hPa\\");\\n ```\\n\\n Note the usage of [UnitsNet](https://github.com/angularsen/UnitsNet). UnitsNet is used to facilitate unit conversions. We\'ve implemented the most popular unit conversions and provided them as NuGet packages. This simplifies development, for example, you don\'t need to worry about providing a temperature value in Celsius or Fahrenheit. It\'s just a temperature, the developer can choose the unit to display. The rest of the magic is done for you."},{"id":"07-closed-captioning-rpi","metadata":{"permalink":"/blog/07-closed-captioning-rpi","source":"@site/blog/2022-07-07-close-captioning-rpi.mdx","title":"07: A Closed Captioning Example on Raspberry Pi using Azure Cognitive services","description":"Welcome to Day 7 of #JulyOT!!","date":"2022-07-07T00:00:00.000Z","formattedDate":"July 7, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"}],"readingTime":0.975,"hasTruncateMarker":false,"authors":[{"name":"Jen Fox","title":"Senior Program Manager @Microsoft","url":"https://github.com/jenfoxbot","imageURL":"https://pbs.twimg.com/profile_images/1251933030194704385/bFUIbxQ-_400x400.jpg","key":"jen"}],"frontMatter":{"slug":"07-closed-captioning-rpi","title":"07: A Closed Captioning Example on Raspberry Pi using Azure Cognitive services","authors":["jen"],"tags":["30days","iot","iot4b","aiatedge"],"draft":false},"prevItem":{"title":"08: .NET nanoFramework GPIO, I2C, SPI and other IO support","permalink":"/blog/08-nano-framework"},"nextItem":{"title":"07: Plug and Play IoT device development with PnPFlow","permalink":"/blog/07-pnpflow"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/07-closed-captioning-rpi\\" />\\n  <meta name=\\"twitter:title\\" content=\\"A Closed Captioning Example on RaspberryPi using Azure Cognitive services\\" />\\n  <meta name=\\"twitter:description\\" content=\\"A Closed Captioning Example on RaspberryPi using Azure Cognitive services\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-7-closed-captioning.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jenfoxbot\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/07-closed-captioning-rpi\\" />\\n</head>\\n\\n> Welcome to Day 7 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-7-closed-captioning.png)\\n\\n_Build a close captioning tool using a Raspberry Pi and Azure_\\n\\n## The project\\n\\nCheck out this cool GitHub repo that shows you how to use the Azure Cognitive services from Microsoft and build an example of the Speech to text on a IoT device like raspberry. We will be using youtube videos for our source of speech which would be the input, we will consume the speech data via Mic connected to raspberry and display the converted text in real time over a LCD screen.\\n\\n### See it in action\\n\\nCheck out this video to see this project in action.\\n\\n<video width=\\"640\\" height=\\"480\\" controls>\\n  <source src=\\"https://user-images.githubusercontent.com/46184494/172901241-2b21438e-2600-4397-a6b6-4cd5b5c7c63d.mp4\\" type=\\"video/mp4\\"/>\\n</video>\\n\\n### Get the instructions\\n\\nCheck out the [GitHub repo](https://github.com/m-mohsin-ali/closed-captioning-azure-speech-ai) for all the instructions.\\n\\n<form action=\\"https://github.com/m-mohsin-ali/closed-captioning-azure-speech-ai\\" target=\\"_blank\\">\\n    <input type=\\"submit\\" value=\\"GitHub repo\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n</form>"},{"id":"07-pnpflow","metadata":{"permalink":"/blog/07-pnpflow","source":"@site/blog/2022-07-07-pnpflow.md","title":"07: Plug and Play IoT device development with PnPFlow","description":"Welcome to Day 7 of #JulyOT!!","date":"2022-07-07T00:00:00.000Z","formattedDate":"July 7, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"pnp","permalink":"/blog/tags/pnp"},{"label":"low-code","permalink":"/blog/tags/low-code"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"}],"readingTime":6.04,"hasTruncateMarker":false,"authors":[{"name":"Neo Xiong","title":"Senior Technical Specialist @Microsoft","url":"https://github.com/xiongyu0523","imageURL":"https://github.com/xiongyu0523.png","key":"neo"},{"name":"Jimmy Lai","title":"CEO @M5Stack","url":"https://github.com/m5stack","imageURL":"https://github.com/M5StackJimmyLai.png","key":"jimmylai"}],"frontMatter":{"slug":"07-pnpflow","title":"07: Plug and Play IoT device development with PnPFlow","authors":["neo","jimmylai"],"tags":["30days","iot","pnp","low-code","embeddediot"],"draft":false},"prevItem":{"title":"07: A Closed Captioning Example on Raspberry Pi using Azure Cognitive services","permalink":"/blog/07-closed-captioning-rpi"},"nextItem":{"title":"06: Edge Impulse Project of the Month competition","permalink":"/blog/06-edge-impulse-competition"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/07-pnpflow\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Plug and Play IoT device development with PnPFlow\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Plug and Play IoT device development with PnPFlow\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-7-pnpflow.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/07-pnpflow\\" />\\n</head>\\n\\n> Welcome to Day 7 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-7-pnpflow.png)\\n\\n## What we have for you today\\n\\n* [**Plug and Play on Windows**](#plug-and-play-on-windows)\\n* [**Azure IoT Plug and Play**](#iot-plug-and-play)\\n* [**The rise of Low-code IoT development**](#the-rise-of-low-code-iot-development)\\n* [**About M5STACK**](#introducing-m5stack)\\n* [**What is PnPFlow?**](#what-is-pnpflow)\\n* [**How does PnPFlow work**](#how-does-pnpflow-work)\\n* [**Associated links**](#associated-links)\\n\\n## Watch the introduction to PnPFlow\\n\\n<iframe width=\\"720\\" height=\\"405\\" src=\\"https://www.youtube.com/embed/Oo8HVQYg_ok\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n## Plug and Play on Windows\\n\\nEveryone loves plug-and-play. When you connect a printer or a disk to your computer, they just work, and you don\'t have to worry about having installing drivers or configuring devices.\\n\\nThe introduction of the [Windows Plug and Play](https://docs.microsoft.com/windows-hardware/drivers/kernel/introduction-to-plug-and-play?wt.mc_id=eventspg_16482_webpage_reactor) framework solved problems with installing and configuring devices. The Plug and Play framework provided a standard interface for device builders, driver developers and the operating system.\\n\\nWindows Plug and Play provides a set of rules for device discovery, driver interfaces, device configuration, and user notification. When everyone communicates according to unified rules, plug-and-play become a reality, end users can use devices without worrying how to set them up.\\n\\n![IOT plug and play banner](/img/png/iotpnp.png)\\n\\n## IoT Plug and Play\\n\\nFrom the PC industry to the IoT world, the situation is even more complicated. Fragmentation in the IoT industry is a long-standing problem. There are many players involved, and there aren\'t well-accepted standards for interoperability. Complexity increases costs and slows down the progress of enterprise IoT deployment and digital transformation.\\n\\n[IoT Plug and Play](https://docs.microsoft.com/azure/iot-develop/overview-iot-plug-and-play?wt.mc_id=eventspg_16482_webpage_reactor) is Microsoft\'s answer to IoT interoperability. Building an ecosystem to provide seamless integration between off-the-shelf devices and cloud solutions.\\n\\nIoT Plug and Play is based on the open modeling language [DTDL](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md) that allows IoT devices to declare their capabilities to a solution. At the center of IoT Plug and Play is a schema that describes device capabilities with a [JSON-LD](https://json-ld.org/) model document.\\n\\nAn IoT Plug and Play model uses the following interfaces to describe and model any device:\\n\\n* Telemetry\\n  Usually time-series data like temperature measurements or events such as alerts).\\n* Properties\\n  Attributes like firmware version or long-running settings like target fan speed.\\n* Commands\\n  For example, reboot a device, or open a door lock.\\n\\nThe modeling architecture supports interface reuse across device capability models to facilitate collaboration and speed development.\\n\\nSolutions built on Azure IoT, including Azure IoT Hub and Central, support IoT Plug and Play natively. Application developers can also build IoT Plug and Play enabled solutions that adapt to IoT devices by parsing their DTDL models.\\n\\n> IoT Plug and Play is also part of the [Azure Certified Device program](https://www.microsoft.com/azure/partners/azure-certified-device?wt.mc_id=eventspg_16482_webpage_reactor) which enables device developers to differentiate and certify their IoT devices and a central catalogue for customers to discover IoT devices.\\n\\n## The rise of Low-code IoT development\\n\\nThe benefits of plug-and-play go beyond just connecting two systems, it is also useful for accelerating IoT hardware and software development.\\n\\nTo achieve hardware plug-and-play, the interface should be standardized and the hardware should be modular. Just like Lego building blocks, various prototypes can be easily designed. From the rise of Arduino to various open-source hardware, such as Microsoft [Jacdac](https://microsoft.github.io/jacdac-docs/), device manufacturers want ways to make hardware connections less expensive and more convenient.\\n\\nFrom a software development perspective, graphical programming and low-code development are very popular. [NodeRed](https://nodered.org/) and Microsoft [MakeCode](https://www.microsoft.com/makecode?wt.mc_id=eventspg_16482_webpage_reactor) are two great examples. Anyone can quickly implement business logic and build prototypes without requiring deep professional knowledge and programming skills. Countless innovative projects around the world use these platforms to solve real problems.\\n\\n## Introducing M5STACK\\n\\nM5STACK is a great example of a company that builds products that are both modular and use low-code graphic programming, this makes IoT development easier.\\n\\n[M5STACK](https://m5stack.com/), based in Shenzhen, China, is a technology company that designs and manufactures open-source IoT development devices for the global market. They\'re also an IoT device partner of Microsoft Azure, offering IoT modules and engineering services to enterprise customers.\\n\\n![A photo of a huge range of M5 stack devices such as sensors and actuators](/img/png/m5stackdevice.png)\\n\\nM5STACK builds hundreds of sensors, actuators, and communication modules that can be connected through standard interfaces. These modules plug and play with the [UIFLOW](https://flow.m5stack.com) low-code graphical programming IDE to give the best IoT project prototyping experience from entry-level hobbyists to professional developers.\\n\\nWith UIFLOW, a user builds a solution with single blocks, or they can implement more advanced scenarios by combining several blocks. For example, blocks can be combined to move data between industrial networks like Modbus to internet services over TCP/IP without requiring a deep understanding of these protocols.\\n\\n![A block based editor for coding the M5 stack](/img/png/uiflow.png)\\n\\nM5STACK aims to cooperate with other companies to create a more open and interconnected IoT developer platform. Their [kits](https://devicecatalog.azure.com/devices/84fe4cc3-cdf1-48a1-8b58-07685890f359) are certified for Azure IoT Plug and Play. UIFLOW has advanced [Azure IoT support](https://docs.m5stack.com/en/uiflow/iotcloud/azure) built-in.  Users can build a device with just a few clicks to connect to Azure IoT Hub or Azure IoT Central.\\n\\n## What is PnPFlow?\\n\\nProject PnPFlow is the latest collaboration between M5STACK and the Azure IoT team. A better together experience for developer to build an IoT Plug and Play device without knowing the complexity of Plug and Play protocol and DTDL model. All you have to do is to drag and drop blocks to build a business-centric application in UIFLOW. The device will be automatically provisioned on Azure IoT Central and seamlessly will work with IoT Central template based web-UI .\\n\\n## How does PnPFlow work?\\n\\n1. Each supported hardware component, be it standalone hardware like a UNIT sensor, or a built-in Core module component, such as a built-in RTC peripheral, have capabilities modeled as an IoT Plug and Play interface. The models are hosted on [Github](https://github.com/m5stack/M5-iot-plugandplay-models).\\n\\n2. The UIFLOW has built-in intelligence to load predefined models, generate \'Smart\' blocks to represent each telemetry, property, or command operation, and associate with hardware blocks using an assignment expression. The l-value is a schema-aware object defined in the model, and the r-value is the corresponding hardware operations or a user-provided value.\\n\\n    ![A block based editor showing how to write PnP flow code](/img/png/pnpflowblock.png)\\n\\n3. The user can choose one or more \'Smart\' blocks, manipulate them and integrate them with custom application logic. The UIFLOW will dynamically compose predefined interfaces into a single top-level device model.\\n\\n4. To further improve developer experience, UIFLOW  natively integrates with Azure IoT Central. Users can log in to their IoT Central applications, create and update device templates, and manage device identities without leaving UIFLOW. The IoT Central application template will be customized to reflect the device\'s capabilities and a default page will be automatically generated.\\n\\n    ![An animated GIF showing how to connect the UI flow block based editor to Azure IoT Central](/img/gif/pnpflow-iotcentral.gif)\\n\\nAre you exciting about Plug and Play IoT development? Get some devices from M5STACK and go to [UIFLOW](https://flow.m5stack.com) to test it out.\\n\\n## Associated links\\n\\n* [Build with Azure IoT Central and IoT Plug and Play](https://azure.microsoft.com/en-us/blog/build-with-azure-iot-central-and-iot-plug-and-play/?wt.mc_id=eventspg_16482_webpage_reactor)\\n* [Understanding IoT Plug and Play modeling](https://docs.microsoft.com/azure/iot-develop/concepts-modeling-guide?wt.mc_id=eventspg_16482_webpage_reactor)\\n* [M5STACK UIFLOW Documentation](https://docs.m5stack.com/en/quick_start/m5core/uiflow)"},{"id":"06-edge-impulse-competition","metadata":{"permalink":"/blog/06-edge-impulse-competition","source":"@site/blog/2022-07-06-edge-impulse-competition.mdx","title":"06: Edge Impulse Project of the Month competition","description":"Welcome to Day 6 of #JulyOT!!","date":"2022-07-06T00:00:00.000Z","formattedDate":"July 6, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"},{"label":"embedded","permalink":"/blog/tags/embedded"}],"readingTime":1.315,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"}],"frontMatter":{"slug":"06-edge-impulse-competition","title":"06: Edge Impulse Project of the Month competition","authors":["jimb"],"tags":["30days","iot","aiatedge","embedded"],"draft":false},"prevItem":{"title":"07: Plug and Play IoT device development with PnPFlow","permalink":"/blog/07-pnpflow"},"nextItem":{"title":"05: Altair Everywhere","permalink":"/blog/julyot-day5-embedded"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/06-edge-impulse-competition\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Build and share your object detection project in minutes\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Edge Impulse Challenge of the month: July - Build and share your object detection project in minutes\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-6-edge-impulse-competition.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/06-edge-impulse-competition\\" />\\n</head>\\n\\n> Welcome to Day 6 of **#JulyOT**!!\\n\\n![Post banner](/img/png/JulyOT-banner-6-edge-impulse-competition.png)\\n\\n# Edge Impulse challenge of the month - July\\n\\n[Edge Impulse](https://edgeimpulse.com) have announced their challenge of the month for July, perfecting timing for #JulyOT.\\n\\nimport ThemedImage from \'@theme/ThemedImage\';\\n\\n<ThemedImage\\n  alt=\\"Docusaurus themed image\\"\\n  sources={{\\n    light: \'/img/svg/edge-impulse-dark.svg\',\\n    dark: \'/img/svg/edge-impulse-light.svg\',\\n  }}\\n/>\\n\\n## Build and share your object detection project in minutes\\n\\nPublic Projects help the community learn from each other, and teach developers and engineers how to solve real-world problems with Edge Impulse. This month we are asking developers to see what problems they can solve with object detection on tiny devices!\\n\\nWith object detection you are able to detect the presence and the position of any object within an image. Use our object detection pre-built ML block that leverages transfer learning to quickly get your device to detect the objects of your choice.\\n\\n## Win prizes!\\n\\nThe top prize for the best project is $2000 and an entry into their annual competition to win a macBook Pro, AirPods and an Edge Impulse backpack. 2 runners up get $200.\\n\\nYou can find all the details and the rules on the [Edge Impulse competition page](https://edgeimpulse.com/projectofthemonth).\\n\\n<form action=\\"https://edgeimpulse.com/projectofthemonth\\" target=\\"_blank\\">\\n    <input type=\\"submit\\" value=\\"Learn more and enter\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n</form>"},{"id":"julyot-day5-embedded","metadata":{"permalink":"/blog/julyot-day5-embedded","source":"@site/blog/2022-07-05-embedded.md","title":"05: Altair Everywhere","description":"Welcome to Day 5 of #JulyOT!!","date":"2022-07-05T00:00:00.000Z","formattedDate":"July 5, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"}],"readingTime":2.765,"hasTruncateMarker":false,"authors":[{"name":"Dave Glover","title":"Senior Cloud Advocate @Microsoft","url":"https://github.com/gloveboxes","imageURL":"https://github.com/gloveboxes.png","key":"dave"}],"frontMatter":{"slug":"julyot-day5-embedded","title":"05: Altair Everywhere","authors":["dave"],"tags":["30days","iot","iot4b","embeddediot"],"draft":false},"prevItem":{"title":"06: Edge Impulse Project of the Month competition","permalink":"/blog/06-edge-impulse-competition"},"nextItem":{"title":"04: Detect the very big with the very small \u2013 counting bears with TinyML meetup from IoT North","permalink":"/blog/julyot-day4"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/julyot-day5-embedded\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Altair IoT Everywhere!\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Altair Everywhere scale IoT apps from embedded to desktop\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-5-altair.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@dglover\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/julyot-day5-embedded\\" />\\n</head>\\n\\n> Welcome to Day 5 of **#JulyOT**!!\\n\\n![Post banner](/img/png/JulyOT-banner-5-altair.png)\\n\\n_The goal of the cloud-connected Altair project is to provide a unique blend of [computing history](https://en.wikipedia.org/wiki/Retrocomputing) with modern cloud computing. You\'ll learn about computing fundamentals, software development, and modern IoT, Data, and AI cloud services that address today\'s real-world IT challenges._\\n\\n## Run Altair Everywhere\\n\\nThe Altair Everywhere project is tested and runs on the following platforms:\\n\\n1. On a [POSIX](https://en.wikipedia.org/wiki/POSIX) compatible operating system including Linux, Windows with [WSL 2](https://docs.microsoft.com/windows/wsl/install?wt.mc_id=eventspg_16482_webpage_reactor), macOS on Apple Silicon and Intel.\\n1. [Raspberry Pi](https://www.raspberrypi.org/), models, Zero 1 & 2, 2B, 3B, 3B, and 4 running Raspberry Pi OS.\\n\\n    | Raspberry Pi with Pi Sense HAT  | Raspberry Pi Sense HAT |\\n    |--|--|\\n    | ![The image shows the address and data bus LEDs](../static/img/png/raspberry_pi_sense_hat_map.png) | ![The gif shows the address and data bus LEDs in action](../static/img/gif/raspberry_pi_sense_hat.gif) |\\n\\n1. [Azure Sphere Avnet and Seeed Developer Kits](https://azure.microsoft.com/services/azure-sphere/) running embedded Linux.\\n\\n    | Azure Sphere with the Altair front panel kit | MikroE Retro Click |\\n    |--|--|\\n    | ![The gif shows the Altair on Azure Sphere with the Altair front panel](../static/img/gif/altair_on_sphere.gif) | ![The gif shows the address and data bus LEDs in action](../static/img/gif/avnet_retro_click.gif) |\\n\\n## What We\'ll Cover\\n\\nThe Altair project can be viewed through three lenses:\\n\\n1. Learn how to develop multithreaded event-driven IoT C applications that scale from embedded [microcontrollers](https://en.wikipedia.org/wiki/Microcontroller) to [Raspberry Pis](https://en.wikipedia.org/wiki/Raspberry_Pi), to desktop-class computers.\\n1. A fantastic safe way to explore Intel 8080 machine-level programming and Assembly programming, along with C and BASIC development.\\n1. If you are interested in retro gaming, chill out playing retro games from yesteryear.\\n\\n## Cloud services integration\\n\\nOptionally, the project integrates free weather and pollution cloud services from Open Weather Map, Azure IoT Central, and Azure Anomaly Detection Cognitive Service. The following reports were generated from data published by the Altair emulator using data sourced from Open Weather Map.\\n\\n| IoT Central Sydney pollution report | Azure Anomaly Detection report|\\n|------|-----|\\n| ![The images shows pollution report for Sydney](../static/img/png/iot_central_pollution_report.png) | ![The following images shows temperature based anomalies](../static/img/png/univariate-anomalies.png) |\\n\\n## Get Started\\n\\nHead to the [Altair Everywhere](https://github.com/gloveboxes/Altair8800.Emulator.UN-X/wiki) repo, get started, have some fun, learn new skills, and impress your friends and family :)\\n\\n## Altair History\\n\\n![The image shows the Altair 8800](../static/img/png/altair-8800-smithsonian-museum.png)\\n\\n[Altair 8800 image attribution - Smithsonian Museum](https://commons.wikimedia.org/wiki/File:Altair_8800,_Smithsonian_Museum.jpg)\\n\\nThe Altair 8800 was built on the [Intel 8080](https://en.wikipedia.org/wiki/Intel_8080?azure-portal=true) CPU, the second 8-bit microprocessor manufactured by Intel in 1974. By today\'s standards, it\'s a simple CPU design, perfect for learning computing fundamentals because of its small instruction set.\\n\\nThe original Altair 8800 was programmed by setting switches on the front panel. It was a painstaking, error-prone process to load and run a program. The Altair 8800 had a series of LEDs and switches that you used to load apps and determine the state of the Altair.\\n\\nYou could save and load applications from a paper tape reader connected to the Altair 8800. As the Altair 8800 grew in popularity, more options became available. You could attach a keyboard, a computer monitor, and disk drives, a more reliable way to save and load applications."},{"id":"julyot-day4","metadata":{"permalink":"/blog/julyot-day4","source":"@site/blog/2022-07-04-iot-north.md","title":"04: Detect the very big with the very small \u2013 counting bears with TinyML meetup from IoT North","description":"Welcome to Day 4 of #JulyOT!!","date":"2022-07-04T00:00:00.000Z","formattedDate":"July 4, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"}],"readingTime":2.25,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"}],"frontMatter":{"slug":"julyot-day4","title":"04: Detect the very big with the very small \u2013 counting bears with TinyML meetup from IoT North","authors":["jimb"],"tags":["30days","iot","aiatedge"],"draft":false},"prevItem":{"title":"05: Altair Everywhere","permalink":"/blog/julyot-day5-embedded"},"nextItem":{"title":"02: IoT for beginners","permalink":"/blog/julyot-day2"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/julyot-day4\\" />\\n  <meta name=\\"twitter:title\\" content=\\"IoT North meetup\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Detect the very big with the very small \u2013 counting bears with TinyML meetup from IoT North\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-4-iot-north.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/julyot-day4\\" />\\n</head>\\n\\n> Welcome to Day 4 of **#JulyOT**!!\\n\\n![Page banner](/img/png/JulyOT-banner-4-iot-north.png)\\n\\n# Detect the very big with the very small \u2013 counting bears with TinyML meetup from IoT North\\n\\nToday we have a sneak peek at a meetup coming tomorrow (5th July), to give you time to sign up and join! This meetup event will be live streamed from IoT North, and starts on the 5th July at 6PM BST/10AM PDT.\\n\\nCatch the recording here!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/8imvkDhdxnw\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n## IoT North\\n\\nIoT North is meetup for makers and developers working on all kinds of hardware and software projects around the Internet of Things (IoT). Come and talk about your projects, what you\'re working on and share experiences.\\n\\nNow a part of IoT North - www.IoTNorth.uk - giving businesses a North in IoT\\n\\n## What this meetup is about\\n\\nJim left the UK a few years ago to move to the Pacific North West of the US. Back in the UK the scariest animal he might have encountered would be a sudden hedgehog, but in Washington State where he lives it seems there are bears! He even lost an apple tree and a fence to one once.\\n\\nA useful tool for him would be a bear detector \u2013 a device to alert him if there are bears in the garden. Such a tool could be built using an AI model trained in the cloud and running on a powerful computer. But who wants to risk a powerful computer outside when there are bears?\\n\\nWhat if he could run a bear detector on a relatively inexpensive microcontroller, then see the results on a cloud dashboard?\\n\\nThis is where TinyML comes in! TinyML is shrinking AI models down very small, as in kilobytes in size, then running them on low power microcontrollers, or tiny computers like a Raspberry Pi Zero.\\n\\nIn this session Jim will train a bear detector using [Edge Impulse](https://edgeimpulse.com), an on-line development platform for TinyML models, taking advantage of their new FOMO object detection model. He\u2019ll then show how to run this model on a low powered device, uploading the detection results to an Azure IoT Central dashboard.\\n\\nBy the end of this session, you will have an understanding of TinyML, how to train models, how to visualize data, and just how wary of bears Jim actually is\u2026"},{"id":"julyot-day2","metadata":{"permalink":"/blog/julyot-day2","source":"@site/blog/2022-07-02.mdx","title":"02: IoT for beginners","description":"Welcome to Day 2 of #JulyOT!!","date":"2022-07-02T00:00:00.000Z","formattedDate":"July 2, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"}],"readingTime":1.765,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"}],"frontMatter":{"slug":"julyot-day2","title":"02: IoT for beginners","authors":["jimb"],"tags":["30days","iot","iot4b"],"draft":false},"prevItem":{"title":"04: Detect the very big with the very small \u2013 counting bears with TinyML meetup from IoT North","permalink":"/blog/julyot-day4"},"nextItem":{"title":"01: Getting started with nanoFramework!","permalink":"/blog/01-nano-framework"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/julyot-day2\\" />\\n  <meta name=\\"twitter:title\\" content=\\"IoT for beginners!\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Spend your weekend learning with IoT for beginners!\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-2-iot-for-beginners.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/julyot-day2\\" />\\n</head>\\n\\n> Welcome to Day 2 of **#JulyOT**!! \\n\\n![Page banner](/img/png/JulyOT-banner-2-iot-for-beginners.png)\\n\\nAs we go into the first weekend of July, and a long weekend for some, there\'s no better time to brush up on your basics.\\n\\nFor day 2 of #JulyOT we are dipping into the archives to bring you [IoT for Beginners](https://aka.ms/iot-beginners), a 12-week, 24-lesson free and open source IoT curriculum to teach you IoT from the ground up. You can use this for self learning, or re-use hte contents any way you need for teaching or learning. Whether you are a professional developer who wants to learn a new skill, or a teacher looking for IoT classroom content, this curriculum is for you.\\n\\n  <form action=\\"https://aka.ms/iot-beginners\\" target=\\"_blank\\">\\n      <input type=\\"submit\\" value=\\"Start the course\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n  </form>\\n\\n## Course outline\\n\\n![A rodmap for IoT for beginners](https://github.com/microsoft/IoT-For-Beginners/raw/main/sketchnotes/Roadmap.jpg)\\n\\nIoT for Beginners is split into 6 projects, each one teaching important IoT concepts and coupled with you actually building something. The projects follow the path from farm to table, showing how IoT can improve the journey food makes, and covering industrial IoT, digital agriculture, AI on the edge, retail IoT, and consumer IoT.\\n\\n* Introduction - build an IoT nightlight\\n* Digital agriculture - build an automated watering system\\n* Logistics - build a vehicle tracker with a dashboard and location alerts\\n* Manufacturing - use AI on the edge to build a fruit monitor\\n* Retail - use AI on the edge to do stock monitoring\\n* Consumer - build a voice controlled smart timer\\n\\n## Meet the team\\n\\nThis course was put together as a collaboration between IoT experts at Microsoft, and students from all around the world. You can learn more from the following video:\\n\\n[![Promo video](https://github.com/microsoft/IoT-For-Beginners/raw/main/images/IOT.gif)](https://youtu.be/-wippUJRi5k)\\n\\n**Gif by** [Mohit Jaisal](https://linkedin.com/in/mohitjaisal)\\n\\n## Get started\\n\\nWhat are you waiting for? Head to the [IoT for Beginners repo on GitHub](https://aka.ms/iot-beginners) and get started!"},{"id":"01-nano-framework","metadata":{"permalink":"/blog/01-nano-framework","source":"@site/blog/2022-07-01-nano-framework.md","title":"01: Getting started with nanoFramework!","description":"Welcome to Day 1 of #JulyOT!","date":"2022-07-01T00:00:00.000Z","formattedDate":"July 1, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"}],"readingTime":5.48,"hasTruncateMarker":false,"authors":[{"name":"Laurent Ellerbach","title":"Principal Engineering Manager @Microsoft","url":"https://github.com/ellerbach","imageURL":"https://github.com/ellerbach.png","key":"laurent"},{"name":"Jos\xe9 Sim\xf5es","title":"CEO @Eclo Solutions","url":"https://github.com/josesimoes","imageURL":"https://github.com/josesimoes.png","key":"jose"}],"frontMatter":{"slug":"01-nano-framework","title":"01: Getting started with nanoFramework!","authors":["laurent","jose"],"tags":["30days","iot","embeddediot"],"draft":false},"prevItem":{"title":"02: IoT for beginners","permalink":"/blog/julyot-day2"},"nextItem":{"title":"01: Welcome to #JulyOT!","permalink":"/blog/01-julyot-kickoff"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/01-nano-framework\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Getting started with nanoFramework\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Getting started with nanoFramework\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-1-nanoframework.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/01-nano-framework\\" />\\n</head>\\n\\n> Welcome to Day 1 of **#JulyOT**!\\n\\n![Page banner](/img/png/JulyOT-banner-1-nanoframework.png)\\n\\n## What we have for you today\\n\\n* [**Getting started with nanoFramework**](#getting-started-with-nanoframework)\\n* [**What is .NET nanoFramework?**](#what-is-net-nanoframework)\\n* [**Why use .NET nanoFramework?**](#why-use-net-nanoframework)\\n* [**Associated links:**](#associated-links)\\n\\n## Getting started with nanoFramework\\n\\n.NET nanoFramework: Our mantra is about **making it easy to write C# code for embedded systems!** And all that we\'re doing here is about that. This free and Open Source platform enables the writing of managed code applications for constrained embedded devices. As a developer, you can use your powerful and familiar tools like Microsoft Visual Studio IDE and your .NET C# skills to write code on a microcontroller.\\n\\n.NET nanoFramework supports a large variety of Micro Controller Units (MCU): STM32, ESP32, TI, and NXP. The .NET nanoFramework provides access to low-level IO and protocols, as well as networking and advanced security features allowing connection to the Cloud.\\n\\nHere you\'ll find all the tools, examples, documentation and a great developer ecosystem to help you on your next embedded systems project.\\n\\n> **New**: Adoption of .NET nanoFramework is growing fast. It just reached 2 million NuGet downloads, it took 5 years to reach the first million and only 9 months for the second one! Read more about it [here](https://www.nanoframework.net/2-million-nuget-downloads-and-counting/)\\n\\nTo get started, you can use our [step by step guide](https://docs.nanoframework.net/content/getting-started-guides/getting-started-managed.html) containing as well short videos.\\n\\nYou\'ll go through the installation of the Visual Studio extension:\\n\\n![step by step](https://docs.nanoframework.net/images/getting-started-guides/getting-started-extension-installation.gif)\\n\\nThen installing `nanoff`, the tool to flash your device, and flashing your device:\\n\\n![install and flash nanoff](https://docs.nanoframework.net/images/getting-started-guides/getting-started-install-nanoff-flash-esp32.gif)\\n\\nAnd then coding your first hello .NET nanoFramework application and setting debug breakpoints in your code:\\n\\n![Hello nano](https://docs.nanoframework.net/images/getting-started-guides/getting-started-first-project.gif)\\n\\nIn a matter of a few minutes, you\'ll be up and running with .NET nanoFramework!\\n\\nAnd a lot of samples to start: <https://github.com/nanoframework/Samples>\\n\\n## What is .NET nanoFramework?\\n\\n.NET **nanoFramework** is a [free and open-source](https://en.wikipedia.org/wiki/Free_and_open-source_software) platform that enables the writing of managed code applications for constrained [embedded devices](https://en.wikipedia.org/wiki/Embedded_system). It is suitable for many types of projects including IoT sensors, wearables, academic proof of concept, robotics, hobbyist/makers creations, or even complex industrial equipment. The .NET nanoFramework makes development easier, faster, and less costly by giving embedded developers access to modern technologies and tools used by desktop application developers.\\n\\nDevelopers can harness the powerful and familiar [Microsoft Visual Studio IDE](https://www.visualstudio.com/vs/?wt.mc_id=eventspg_16482_webpage_reactor) and their [.NET](https://en.wikipedia.org/wiki/.NET_Framework) [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language)) knowledge to quickly write code without having to worry about the low-level hardware intricacies of a microcontroller. Desktop .NET developers will feel \u201cat home\u201d and can use their skills in embedded systems development, enlarging the pool of qualified embedded developers. Using Microsoft Visual Studio, a developer can deploy and debug the code directly on real hardware.\\n\\nThe .NET nanoFramework includes a reduced version of the .NET [Common Language Runtime](https://en.wikipedia.org/wiki/Common_Language_Runtime) (CLR) and features a subset of the .NET base class libraries along with the most common APIs included in [.NET IoT](https://docs.microsoft.com/uwp/api/?wt.mc_id=eventspg_16482_webpage_reactor) allowing code reuse from .NET IoT applications, thousands of code examples, and open source projects.\\n\\nThe project is supported by the .NET Foundation.\\n\\nYou can watch this video from the Microsoft [IoT Show](https://aka.ms/iotshow) featuring .NET nanoFramework connected to Azure IoT Hub, measuring a [BMP280 sensors](https://docs.nanoframework.net/devices/Iot.Device.Bmxx80.Bmp280.html), and using the unique deep sleep feature from microcontrollers. A real-life example with .NET nanoFramework:\\n\\n[![IoT Show](/img/jpg/nanoframework-iot-show.jpg)](https://docs.microsoft.com/shows/internet-of-things-show/introduction-to-net-nanoframework?wt.mc_id=eventspg_16482_webpage_reactor)\\n\\n## Why use .NET nanoFramework?\\n\\n.NET **nanoFramework** is the perfect enabler for developing software that works on embedded devices. Start with a low-cost and readily available development board, then use nanoFramework to write, debug and deploy your code.\\n\\nWhether this is your first foray into programming or you are a seasoned developer, if you want a powerful and easy-to-use tool for developing software that runs on embedded devices, you are in the right place. With its modular architecture, it\'s easy to grab the core components (like the CLR, debugger, and interpreter) and extend them to new hardware platforms, .NET nanoFramework is the perfect partner for your project. The current reference implementation uses [ChibiOS](http://www.chibios.org/dokuwiki/doku.php) supporting several [ST Microelectronics](http://www.st.com/content/st_com/en.html) development boards, Espressif [ESP32](https://en.wikipedia.org/wiki/ESP32), Texas Instruments [CC3220 Launchpad](https://www.ti.com/tool/CC3220SF-LAUNCHXL), [CC1352 Launchpad](https://www.ti.com/tool/LAUNCHXL-CC1352R1), and NXP [MIMXRT1060-EVK](https://www.nxp.com/part/MIMXRT1060-EVK#/).\\n\\nBecause it\'s completely [free and Open Source](https://en.wikipedia.org/wiki/Free_and_open-source_software) you have access to and the ability to modify all parts of the code including the ability to leverage what others have already contributed. If you are willing to, you can help shape the future by contributing back to the project and rapidly growing community.\\n\\nHere are a couple of supported boards:\\n\\n![nucleo](https://docs.nanoframework.net/images/reference-targets/nucleo64-f091rc.jpg)![esp32](https://docs.nanoframework.net/images/reference-targets/esp32-devkitc.jpg)![M5Stack](https://docs.nanoframework.net/images/reference-targets/m5stack.jpg)![OrgPall PalThree](https://docs.nanoframework.net/images/reference-targets/orgpal-palthree.jpg)![NXP](https://docs.nanoframework.net/images/reference-targets/mimxrt1060_evk.jpg)\\n\\nOur reference boards can be found [here](https://github.com/nanoframework/nf-interpreter#net-nanoframework-interpreter-for-reference-boards). And community boards [here](https://github.com/nanoframework/nf-Community-Targets#available-community-boards). Depending on your board, it can be a matter of a few hours to get your board supported! A blog post will explain how.\\n\\nHere are some of its unique features:\\n\\n* Can run on resource-constrained devices with as low as 128kB of flash and 64kB of RAM.\\n* Runs directly on bare metal. Currently, [ARM Cortex-M](https://en.wikipedia.org/wiki/ARM_Cortex-M) and [ESP32](https://en.wikipedia.org/wiki/ESP32) devices are supported.\\n* Supports common embedded peripherals and interconnects like GPIO, UART, SPI, I2C, USB, and networking.\\n* Provides multi-threading support natively.\\n* Support for energy-efficient operations such as devices running on batteries.\\n* Support for Interop code allows developers to easily write libraries that have both managed (C#) and native code (C/C++).\\n* No manual memory management because of its simpler mark-and-sweep [garbage collector](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)).\\n* Execution constraints to catch device lockups and crashes.\\n\\nHere are some advantages over other similar systems:\\n\\n* First-class debugger experience right on the target hardware with breakpoints, single step, step into, step out, step over, pause and stop.\\n* Powerful and free developer tools with [Microsoft Visual Studio IDE](https://www.visualstudio.com/vs/?wt.mc_id=eventspg_16482_webpage_reactor).\\n* Support for a large range of inexpensive boards from several manufacturers including Discovery and Nucleo boards from [ST Microelectronics](http://www.st.com/content/st_com/en.html), [Quail](https://www.mikroe.com/quail) from Mikrobus, [Netduino](https://www.wildernesslabs.co/Netduino) from Wilderness Labs, [ESP32](https://en.wikipedia.org/wiki/ESP32) DevKit C, Texas Instruments [CC3220 Launchpad](https://www.ti.com/tool/CC3220SF-LAUNCHXL), [CC1352 Launchpad](https://www.ti.com/tool/LAUNCHXL-CC1352R1), and NXP [MIMXRT1060-EVK](https://www.nxp.com/part/MIMXRT1060-EVK#/).\\n* Easily expandable to other hardware and [RTOS](https://en.wikipedia.org/wiki/Real-time_operating_system) platforms. Currently targets [CMSIS](https://developer.arm.com/embedded/cmsis) and ESP32 FreeRTOS ports.\\n* Completely free and Open Source. From the core components to the utilities used for building, deploying, debugging, and IDE components.\\n\\n## Associated links:\\n\\n* Official .NET nanoFramework [site and blog](https://www.nanoframework.net/).\\n* [All our documentation](https://docs.nanoframework.net/) for API, classes, how to install, build your own images, architecture, and more!.\\n* THE place to go to get any code: our [Github .NET nanoFramework](https://github.com/nanoframework).\\n\\nFind us on Fridays all July! See you for another post on how to use GPIO, SPI, I2C, PWM, and more on .NET nanoFramework! And feedback is welcome."},{"id":"01-julyot-kickoff","metadata":{"permalink":"/blog/01-julyot-kickoff","source":"@site/blog/2022-07-01.md","title":"01: Welcome to #JulyOT!","description":"Welcome to Day 1 of #JulyOT!!","date":"2022-07-01T00:00:00.000Z","formattedDate":"July 1, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"kickoff","permalink":"/blog/tags/kickoff"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"},{"label":"iotcerts","permalink":"/blog/tags/iotcerts"}],"readingTime":2.145,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"}],"frontMatter":{"slug":"01-julyot-kickoff","title":"01: Welcome to #JulyOT!","authors":["jimb"],"tags":["30days","iot","kickoff","iot4b","embeddediot","aiatedge","iotcerts"],"draft":false},"prevItem":{"title":"01: Getting started with nanoFramework!","permalink":"/blog/01-nano-framework"},"nextItem":{"title":"00: #JulyOT Is Coming!","permalink":"/blog/julyot-teaser"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/01-julyot-kickoff\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Day 1 of #JulyOT!\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Jumpstart 31 days of IoT celebrations with #JulyOT\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/JulyOT-banner-1-welcome.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jimbobbennett\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/01-julyot-kickoff\\" />\\n</head>\\n\\n> Welcome to Day 1 of **#JulyOT**!!\\n\\n![Welcome banner](/img/png/JulyOT-banner-1-welcome.png)\\n\\n#JulyOT 2022 is finally here, and we are excited to share 31 days of IoT goodness throughout this month.\\n\\nEach weekday we will be publishing one or more articles here all grouped into the following themes:\\n\\n* Beginners, makers, and students\\n* Embedded development\\n* AI on the Edge\\n* Learning and certifications\\n\\nSome will be full blog posts, others will direct you to videos, GitHub repos, other blogs, or code samples.\\n\\nCheck back here every day for more IoT goodness.\\n\\n## In this post\\n\\n* [**Upskill by joining the IoT Cloud skills challenge**](#iot-cloud-skills-challenge)\\n* [**Learn IoT with IoT For Beginners**](#iot-for-beginners)\\n* [**Digital swag**](#digital-swag)\\n\\n## IoT Cloud Skills Challenge\\n\\nWant to become a subject matter in the IoT Domain? Take the [Microsoft Cloud Skills Challenge](https://docs.microsoft.com/learn/challenges?id=261fd583-fa7b-4b1f-86eb-6a52b5468a23&wt.mc_id=eventspg_16482_webpage_reactor) - skill yourself up in 31 days and complete the Cloud Skills Challenge. This starts 1st July, so sign up now.\\n\\n<table>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}></td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}>\\n    <form action=\\"https://docs.microsoft.com/learn/challenges\\" target=\\"_blank\\">\\n        <input type=\\"submit\\" value=\\"Join the Cloud Skills Challenge\\" class=\\"clean-btn button button--primary margin-left--md\\"/>\\n        <input type=\\"hidden\\" name=\\"id\\" value=\\"261fd583-fa7b-4b1f-86eb-6a52b5468a23\\" /> \\n        <input type=\\"hidden\\" name=\\"wt.mc_id\\" value=\\"eventspg_16482_webpage_reactor\\" /> \\n    </form>\\n    </td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}></td>\\n</tr>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}><img src=\'https://docs.microsoft.com/en-us/media/learn/challenge/how_it_works_1.png?branch=main\' width=\'75%\' alt=\'A cuddly document and a purple yeti coding\'/></td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}><img src=\'https://docs.microsoft.com/en-us/media/learn/challenge/how_it_works_2.png?branch=main\' width=\'75%\' alt=\'A cuddly document and a purple yeti coding\'/></td>\\n    <td style={{border:\'0px\', \'text-align\': \'center\'}}><img src=\'https://docs.microsoft.com/en-us/media/learn/challenge/how_it_works_3.png?branch=main\' width=\'75%\' alt=\'A cuddly document and a purple yeti coding\'/></td>\\n</tr>\\n<tr style={{border:\'0px\', \'background-color\':\'#00000000\'}}>\\n    <td style={{border:\'0px\', \'vertical-align\':\'top\'}}><b>Compete</b><br/><br/>Benchmark your progress against friends and coworkers. It\'s always better when we learn together.</td>\\n    <td style={{border:\'0px\', \'vertical-align\':\'top\'}}><b>Learn</b><br/><br/>Increase your understanding with easy-to-read instruction and stay up on the bleeding-edge of technology.</td>\\n    <td style={{border:\'0px\', \'vertical-align\':\'top\'}}><b>Develop skills</b><br/><br/>By the end of the challenge, you will have marketable skills to better yourself and your career.</td>\\n</tr>\\n</table>\\n\\n## IoT For Beginners\\n\\n[IoT for beginners](https://aka.ms/iot-beginners) is a free, open source, 24-lesson IoT curriculum. The first lesson is live-streamed today from the Microsoft Reactor. Catch the recording on the Microsoft Reactor YouTube channel.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/1KVrBjSqS5s\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nLearn more about IoT for Beginners on the official [IoT for Beginners GitHub repo](https://aka.ms/iot-beginners).\\n\\n## Digital swag\\n\\nCheck out [digital swag](/digitalswag) page for #JulyOT social media images, sticker templates, desktop backgrounds and video chat backgrounds."},{"id":"julyot-teaser","metadata":{"permalink":"/blog/julyot-teaser","source":"@site/blog/2022-06-23.md","title":"00: #JulyOT Is Coming!","description":"#JulyOT is coming!","date":"2022-06-23T00:00:00.000Z","formattedDate":"June 23, 2022","tags":[{"label":"30days","permalink":"/blog/tags/30-days"},{"label":"iot","permalink":"/blog/tags/iot"},{"label":"kickoff","permalink":"/blog/tags/kickoff"},{"label":"iot4b","permalink":"/blog/tags/iot-4-b"},{"label":"embeddediot","permalink":"/blog/tags/embeddediot"},{"label":"aiatedge","permalink":"/blog/tags/aiatedge"},{"label":"iotcerts","permalink":"/blog/tags/iotcerts"}],"readingTime":3.135,"hasTruncateMarker":false,"authors":[{"name":"Jim Bennett","title":"Senior Regional Cloud Advocate @Microsoft","url":"https://github.com/jimbobbennett","imageURL":"https://github.com/jimbobbennett.png","key":"jimb"}],"frontMatter":{"slug":"julyot-teaser","title":"00: #JulyOT Is Coming!","authors":["jimb"],"tags":["30days","iot","kickoff","iot4b","embeddediot","aiatedge","iotcerts"],"draft":false},"prevItem":{"title":"01: Welcome to #JulyOT!","permalink":"/blog/01-julyot-kickoff"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://julyot.dev/blog/julyot-teaser\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Teaser: #JulyOT is Coming - Celebrate IoT All Month Long!\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Jumpstart 31 days of IoT celebrations with #JulyOT\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://julyot.dev/img/png/julyot-kickoff-banner.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@jim\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://julyot.dev/blog/julyot-teaser\\" />\\n</head>\\n\\n> #JulyOT is coming!\\n\\n![Jumpstart 31 days of IoT celebrations with #JulyOT](../static/img/png/julyot-kickoff-banner.png)\\n\\nWe can\'t believe it\'s already the last week of June!! Wait - you know what that means right?\\n\\nClear up your cables, dust off your Raspberry Pi, dig our your Arduino board, fire up Visual Studio Code with PlatformIO, or the Arduino IDE, and login to the cloud! It\'s almost time to celebrate the Internet of Things, one thing at a time! It\'s almost #JulyOT!\\n\\n![Animated JulyOT logo](../static/img/gif/julyot-single-loop.gif)\\n\\nAs always #JulyOT will be kicking off on the 1st July, and every day we will be bringing you some awesome IoT content to get you excited about the Internet of Things.\\n\\nWe\'ll have a mix of live streams, videos, blog posts and code samples, all grouped into the following themes:\\n\\n* Beginners, makers, and students\\n* Embedded development\\n* AI on the Edge\\n* Learning and certifications\\n\\nWe invite everyone to build and share your creations throughout month as you gain knowledge from these and other resources throughout #JulyOT!  Be sure to spread the word about this initiative and your own projects by sharing the [hashtag #JulyOT on social media](https://twitter.com/hashtag/JulyOT)! We\'ll be sharing our favorite projects that we find.\\n\\nCheck back here daily to get all the latest goodness, or subscribe to [our RSS feed](https://julyot.dev/blog/rss.xml).\\n\\n## #JulyOT has a new home!\\n\\nIn the past #JulyOT has lived on the [Microsoft IoT Tech Community](https://techcommunity.microsoft.com/t5/internet-of-things-blog/bg-p/IoTBlog), but going forward we have a new home - here at [JulyOT.dev](https://julyOT.dev).\\n\\nAll the content for #JulyOT now lives [in GitHub](https://github.com/JulyOT/JulyOT). If you want to submit content then join us there, raise an issue with what you want to add, and we can help get your content shared with the world. For blog posts you can write the whole post here, or link out to your own blog. For all other content we can link to your GitHub repo, video or wherever!\\n\\n## #JulIoT\\n\\n#JulyOT is spreading it wings to Spanish! We are excited to bring you #JulIoT!\\n\\n![Julio T anumated logo](../static/img/gif/juliot.gif)\\n\\nWe have some live streams and blogs in Spanish lined up for you over the month. Check out the [live streams](/livestreams) page for a sneak peak of whats coming!\\n\\n## Our first event\\n\\nLaunching #JulyOT will be a series of IoT for Beginners live streams, based off the hugely popular [IoT for Beginners Curriculum](https://aka.ms/iot-beginners) that offers 24 free, open source lessons on IoT. We will be running the first 4 lessons as live streams, starting Friday 1st July at 9am Pacific Time.\\n\\n<a href=\'https://www.meetup.com/Microsoft-Reactor-Redmond/events/286453689/\'>\\n<img src=\'https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504717110%2F676x380.webp&w=3840&q=75\' width=\'45%\' alt=\'IoT for beginners - Lesson 1, Introduction to IoT, Friday July 1st, 9am Pacific Time\'/>\\n</a>\\n\\nYou can register for this event on Meetup.com and get a reminder, or join us on YouTube.\\n\\n<a href=\\"https://www.meetup.com/Microsoft-Reactor-Redmond/events/286453689\\"><img src=\\"https://raw.githubusercontent.com/jimbobbennett/ColoredBadges/main/svg/social/meetup.svg\\" alt=\\"Meetup registration link\\"/></a>  <a href=\\"https://aka.ms/IoTforbeginnersLess1\\"><img src=\\"https://raw.githubusercontent.com/jimbobbennett/ColoredBadges/main/svg/streaming/youtube.svg\\" alt=\\"YouTube live stream link\\"/></a>\\n\\n## Microsoft Cloud Skills challenge\\n\\n![A cartoon racoon holding medals](../static/img/svg/image_medals.svg)\\n\\nAs part of #JulyOT we will be running a Microsoft Cloud Skills challenge, giving you a guided path to learn the Microsoft IoT stack, and compete in your learning against others. Check out the [Cloud Skills Challenge page](/skills) to sign up!\\n\\n## JulyOT digital swag\\n\\nThis year we also have [#JulyOT digital swag](/digitalswag)! Get a new desktop background, or a background for your favorite video chat tool like Microsoft Teams.\\n\\n## IoT resources\\n\\nFor more IoT resources, check out the [resources link](/resources) above. Whether you want videos to help you learn, or beginner tutorials, we have you covered."}]}')}}]);