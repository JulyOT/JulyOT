<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>#JulyOT Blog</title>
        <link>https://JulyOT.dev/blog</link>
        <description>#JulyOT Blog</description>
        <lastBuildDate>Wed, 27 Jul 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[27: Exam AZ-220 Study Guide - Process and Manage Data]]></title>
            <link>https://JulyOT.dev/blog/julyot-day27-az220</link>
            <guid>julyot-day27-az220</guid>
            <pubDate>Wed, 27 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 27 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 27 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-27-az220-process-and-manage-data-f7e5dfbd37dd97c5725492f3fa74b9c8.png" width="1000" height="420" class="img_ev3q"></p><p><em>This is part 5 of a series of posts to help you pass the AZ-220 Azure IoT Developer specialty exam. 15-20% of the AZ-220 exam will measure your ability to process and manage data.</em></p><p>The Microsoft Global Partner Solutions (GPS) Technical Team, IoT Product Group, IoT Advocates, and Microsoft Worldwide Learning have collaborated to create this guide to help you prepare for the Microsoft Azure IoT Developer exam!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skills-measured-process-and-manage-data">Skills Measured: Process and Manage Data<a class="hash-link" href="#skills-measured-process-and-manage-data" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="configure-message-routing-in-azure-iot-hub"><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messages-d2c?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure message routing in Azure IoT Hub</a><a class="hash-link" href="#configure-message-routing-in-azure-iot-hub" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-message-enrichments-overview?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement message enrichment in IoT Hub</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messages-d2c?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement routing of IoT device telemetry to endpoints</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-non-telemetry-event-schema?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement routing of IoT Hub non-telemetry events to endpoints</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messages-d2c#testing-routes?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Define and test routing queries</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-event-grid?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure IoT Hub as an Azure Event Grid source</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-endpoints?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Reconfigure the default Azure Event Hubs endpoint when there are multiple endpoints</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="configure-stream-processing-of-iot-data-"><a href="https://docs.microsoft.com/azure/stream-analytics/stream-analytics-get-started-with-azure-stream-analytics-to-process-data-from-iot-devices?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure stream processing of IoT data </a><a class="hash-link" href="#configure-stream-processing-of-iot-data-" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/stream-analytics/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create Azure Stream Analytics for data, and stream processing by using the Azure portal</a></li><li><a href="https://docs.microsoft.com/azure/azure-functions/functions-bindings-event-iot-output?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Process and filter IoT data by using Azure Functions</a></li><li><a href="https://docs.microsoft.com/azure/stream-analytics/functions-overview?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Write user-defined functions and aggregations in Stream Analytics</a></li><li><a href="https://docs.microsoft.com/azure/stream-analytics/machine-learning-udf?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Consume Azure Machine Learning functions in Stream Analytics</a></li><li><a href="https://docs.microsoft.com/azure/stream-analytics/stream-analytics-define-outputs?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure Stream Analytics outputs</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="create-azure-stream-analytics-queries"><a href="https://docs.microsoft.com/stream-analytics-query/stream-analytics-query-language-reference?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create Azure Stream Analytics queries</a><a class="hash-link" href="#create-azure-stream-analytics-queries" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/stream-analytics/stream-analytics-edge?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Write a Stream Analytics query that runs in IoT Edge</a></li><li><a href="https://docs.microsoft.com/azure/stream-analytics/stream-analytics-stream-analytics-query-patterns?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Write a Stream Analytics query that runs in the cloud</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="process-real-time-data-by-using-azure-time-series-insights"><a href="https://docs.microsoft.com/azure/time-series-insights/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Process real-time data by using Azure Time Series Insights</a><a class="hash-link" href="#process-real-time-data-by-using-azure-time-series-insights" title="Direct link to heading">​</a></h3><p><em>Though Time Series Insights has been deprecated, it is still on this exam for now. It will be removed with a future exam revision.</em></p><ul><li><a href="https://docs.microsoft.com/azure/time-series-insights/tutorials-set-up-tsi-environment#create-an-azure-time-series-insights-gen2-environment?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a Time Series Insights environment</a></li><li><a href="https://docs.microsoft.com/azure/time-series-insights/how-to-ingest-data-iot-hub?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Connect the IoT hub and the Time Series Insights environment</a></li><li><a href="https://docs.microsoft.com/azure/time-series-insights/time-series-insights-add-reference-data-set?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a reference data set for a Time Series Insights environment by using the Azure portal</a></li><li><a href="https://docs.microsoft.com/azure/time-series-insights/concepts-model-overview#time-series-model-hierarchies?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement Time Series Model hierarchies, types, and instance fields</a></li><li><a href="https://docs.microsoft.com/rest/api/time-series-insights/reference-time-series-expression-syntax?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Consume data by using Time Series Expression syntax</a></li></ul><p><em>NOTE: In most cases, exams do NOT cover preview features, and some features will only be added to an exam when they are GA (General Availability).</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-learn---related-learning-paths">Microsoft Learn - Related Learning Paths<a class="hash-link" href="#microsoft-learn---related-learning-paths" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="implement-device-message-processing-and-data-analytics-5-modules"><a href="https://docs.microsoft.com/learn/paths/implement-device-message-processing-data-analytics?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement device message processing and data analytics</a> (5 Modules)<a class="hash-link" href="#implement-device-message-processing-and-data-analytics-5-modules" title="Direct link to heading">​</a></h3><p>Learn about the message processing and data analytics capabilities that must be implemented within your Azure IoT solution, and the storage options that are often configured as part of your solution.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-helpful-resources">Other Helpful Resources<a class="hash-link" href="#other-helpful-resources" title="Direct link to heading">​</a></h2><ul><li><a href="https://azure.microsoft.com/blog/topics/internet-of-things/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Blogs</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/overview-iot-central-solution-builder?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Central Data Integration Guide</a></li><li><a href="https://docs.microsoft.com/azure/architecture/reference-architectures/iot?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Reference Architecture</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-export-to-blob-storage?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Export IoT Central Data to Azure Blob Storage</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-export-to-azure-data-explorer?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Export IoT Central Data to Azure Data Explorer</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-export-to-event-hubs?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Export IoT Central Data to Azure Event Hubs</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-export-to-service-bus?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Export IoT Central Data to Azure Service Bus</a></li><li><a href="https://techcommunity.microsoft.com/t5/internet-of-things-iot/ct-p/IoT?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Microsoft Tech Community - IoT</a> - Blogs and conversation spaces</li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-transform-data?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Transform Data Externally for IoT Central</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-transform-data-internally?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Transform Data Internally for IoT Central</a></li><li><a href="https://www.youtube.com/channel/UCL7wy-iy_V76xxPnrIzGOZQ?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">YouTube - Microsoft IoT Developers</a></li></ul><p>Happy studies!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>az220</category>
            <category>iotcerts</category>
        </item>
        <item>
            <title><![CDATA[26: Exam AZ-220 Study Guide - Implement Business Integration]]></title>
            <link>https://JulyOT.dev/blog/julyot-day26-az220</link>
            <guid>julyot-day26-az220</guid>
            <pubDate>Tue, 26 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 26 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 26 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-26-az220-implement-business-integration-155953872f2027698396abc7418b2d49.png" width="1000" height="420" class="img_ev3q"></p><p><em>This is part 4 of a series of posts to help you pass the AZ-220 Azure IoT Developer specialty exam. 5-10% of the AZ-220 exam will measure your ability to implement business integration.</em></p><p>The Microsoft Global Partner Solutions (GPS) Technical Team, IoT Product Group, IoT Advocates, and Microsoft Worldwide Learning have collaborated to create this guide to help you prepare for the Microsoft Azure IoT Developer exam!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skills-measured-implement-business-integration">Skills Measured: Implement Business Integration<a class="hash-link" href="#skills-measured-implement-business-integration" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="integrate-with-upstream-and-downstream-systems"><a href="https://docs.microsoft.com/azure/iot-fundamentals/iot-services-and-technologies?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Integrate with upstream and downstream systems</a><a class="hash-link" href="#integrate-with-upstream-and-downstream-systems" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/event-grid/publish-iot-hub-events-to-logic-apps?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Set up input and output connections to support native Azure services and to enable third-party services</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-endpoints?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Set up IoT Hub routing to support downstream Azure resources</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="develop-an-iot-solution-that-uses-azure-digital-twins"><a href="https://docs.microsoft.com/azure/digital-twins/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Develop an IoT solution that uses Azure Digital Twins</a><a class="hash-link" href="#develop-an-iot-solution-that-uses-azure-digital-twins" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/digital-twins/concepts-models?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create models and digital twins</a></li><li><a href="https://docs.microsoft.com/azure/digital-twins/concepts-twins-graph?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Map IoT device data to digital twin models and relationships</a></li><li><a href="https://docs.microsoft.com/azure/digital-twins/how-to-ingest-iot-hub-data?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Ingest IoT device messages, and translate messages to digital twins</a></li><li><a href="https://docs.microsoft.com/azure/digital-twins/concepts-route-events?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure routes and endpoints to trigger business logic and data processing</a></li><li><a href="https://docs.microsoft.com/azure/digital-twins/concepts-query-language?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage and query the Azure Digital Twins graph</a></li><li><a href="https://docs.microsoft.com/azure/digital-twins/how-to-manage-graph?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Update properties on Azure Digital Twins entities in the graph</a></li><li><a href="https://docs.microsoft.com/azure/digital-twins/how-to-monitor-diagnostics?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Monitor and troubleshoot Azure Digital Twins</a></li></ul><p><em>NOTE: In most cases, exams do NOT cover preview features, and some features will only be added to an exam when they are GA (General Availability).</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-learn---related-learning-paths">Microsoft Learn - Related Learning Paths<a class="hash-link" href="#microsoft-learn---related-learning-paths" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="develop-data-insights-and-business-integrations-5-modules"><a href="https://docs.microsoft.com/learn/paths/develop-data-insights-business-integrations?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Develop Data Insights and Business Integrations</a> (5 Modules)<a class="hash-link" href="#develop-data-insights-and-business-integrations-5-modules" title="Direct link to heading">​</a></h3><p>Learn about the tools and services that can be used to develop data insights and implement business integration, including Azure Event Grid, Azure Logic Apps, and Azure Time Series Insights.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="extend-iot-solutions-by-using-azure-digital-twins-4-modules"><a href="https://docs.microsoft.com/learn/paths/extend-iot-solutions-by-using-azure-digital-twins?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Extend IoT Solutions by Using Azure Digital Twins</a> (4 Modules)<a class="hash-link" href="#extend-iot-solutions-by-using-azure-digital-twins-4-modules" title="Direct link to heading">​</a></h3><p>Learn about the features and capabilities of Azure Digital Twins service, how to configure, build, and manage an Azure Digital Twins environment, and how to integrate IoT and Azure Digital Twins solutions.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-helpful-resources">Other Helpful Resources<a class="hash-link" href="#other-helpful-resources" title="Direct link to heading">​</a></h2><ul><li><a href="https://docs.microsoft.com/azure/digital-twins/concepts-azure-digital-twins-explorer?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure Digital Twins Explorer</a></li><li><a href="https://docs.microsoft.com/azure/digital-twins/concepts-data-ingress-egress?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure Digital Twins Data Ingress and Egress</a></li><li><a href="https://docs.microsoft.com/azure/event-grid/overview?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure Event Grid</a></li><li><a href="https://azure.microsoft.com/blog/topics/internet-of-things?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Blogs</a></li><li><a href="https://docs.microsoft.com/azure/architecture/reference-architectures/iot?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Reference Architecture</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-compare-event-hubs?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Compare IoT Hub and Event Hubs</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-event-grid-routing-comparison?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Compare Message Routing and Event Grid for IoT Hub</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/concepts-iiot-architecture?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Industrial IoT Patterns with IoT Central</a></li><li><a href="https://techcommunity.microsoft.com/t5/internet-of-things-iot/ct-p/IoT?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Microsoft Tech Community - IoT</a> - Blogs and conversation spaces</li><li><a href="https://www.youtube.com/watch?v=nU1v5mqr_ig?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Simplify Downstream Processing with Azure IoT Hub Message Enrichments</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-configure-rules-advanced?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Use Workflows to Integrate Your IoT Central Application with Other Cloud Services</a></li><li><a href="https://docs.microsoft.com/azure/digital-twins/concepts-ontologies?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">What is an Ontology?</a></li><li><a href="https://www.youtube.com/channel/UCL7wy-iy_V76xxPnrIzGOZQ?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">YouTube - Microsoft IoT Developers</a></li></ul><p>Happy studies!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>az220</category>
            <category>iotcerts</category>
        </item>
        <item>
            <title><![CDATA[26: Let's get personal: Computing - Retro computing with Dave Glover and the Altair 8800]]></title>
            <link>https://JulyOT.dev/blog/26-lgpc-altair</link>
            <guid>26-lgpc-altair</guid>
            <pubDate>Tue, 26 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 26 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 26 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-26-lgpc-altair-96e870858911b8ca0b8de2c057a821c5.png" width="1000" height="420" class="img_ev3q"></p><p><em>Investigate the modern world of ‘personal’ computing, from IoT to mobile, mixed reality, desktop computing, wearables, and more!</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lets-get-personal-computing">Let's get personal: computing<a class="hash-link" href="#lets-get-personal-computing" title="Direct link to heading">​</a></h2><p>Today we are announcing our new series on YouTube, recorded at the Microsoft Reactor in Redmond!</p><p>Let's get personal: computing is an interview show where <a href="https://twitter.com/JimBobBennett" target="_blank" rel="noopener noreferrer">Jim Bennett</a> interviews guests who have been working in the modern version of personal computing, covering IoT to mobile, mixed reality, desktop computing, wearables, and more. Each guest has built something cool that they want to share that you too can build!</p><p><img loading="lazy" alt="A picture of Dave holding his altair kit. Dave is lit from the left in orange and right from blue" src="/assets/images/lgpc-dave-01762e006388b13bd2efe6722e623b31.png" width="1600" height="900" class="img_ev3q"></p><p>On this show, Jim is joined by <a href="https://twitter.com/dglover" target="_blank" rel="noopener noreferrer">Dave Glover</a>, an internet of things and embedded hardware enthusiast from Australia, who has built a pocket-sized Altair 8800! A piece of computing history in the palm of your hand.</p><p>Learn more and build this yourself at <a href="https://aka.ms/lgpc/altair" target="_blank" rel="noopener noreferrer">aka.ms/lgpc/altair</a>.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/fSz5lTaXS0E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>This show was recorded at the Microsoft Reactor in Redmond.</p><p>Connect with the Microsoft Reactor:</p><p><a href="https://fb.com/MicrosoftReactor" target="_blank" rel="noopener noreferrer">Facebook</a></p><p><a href="https://twitter.com/MSFTReactor" target="_blank" rel="noopener noreferrer">Twitter</a></p><p><a href="https://www.meetup.com/pro/microsoft-reactor" target="_blank" rel="noopener noreferrer">Meetup</a></p><p>Get the look!
Buy Jim's shirt: <a href="https://aka.ms/lgpc/look/altair" target="_blank" rel="noopener noreferrer">aka.ms/lgpc/look/altair</a></p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>embedded</category>
        </item>
        <item>
            <title><![CDATA[25: Exam AZ-220 Study Guide - Implement IoT Edge]]></title>
            <link>https://JulyOT.dev/blog/julyot-day25-az220</link>
            <guid>julyot-day25-az220</guid>
            <pubDate>Mon, 25 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 25 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 25 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-25-az220-implement-iot-edge-c87c5e310cf8fa238f84c580e748c5f5.png" width="1000" height="420" class="img_ev3q"></p><p><em>This is part 3 of a series of posts to help you pass the AZ-220 Azure IoT Developer specialty exam. 15-20% of the AZ-220 exam will measure your ability to implement IoT Edge.</em></p><p>The Microsoft Global Partner Solutions (GPS) Technical Team, IoT Product Group, IoT Advocates, and Microsoft Worldwide Learning have collaborated to create this guide to help you prepare for the Microsoft Azure IoT Developer exam!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skills-measured-implement-iot-edge">Skills Measured: Implement IoT Edge<a class="hash-link" href="#skills-measured-implement-iot-edge" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="set-up-an-iot-edge-device"><a href="https://docs.microsoft.com/azure/iot-edge?wt.mc_id=eventspg_16482_webpage_reactor?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Set up an IoT Edge device</a><a class="hash-link" href="#set-up-an-iot-edge-device" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-edge/quickstart-linux?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a device identity in IoT Hub</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-create-iot-edge-device?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Set up an IoT device for IoT Edge</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-install-iot-edge?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Install container runtime on IoT devices</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-access-host-storage-from-module?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure container startup options to interact with the host system</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-update-iot-edge?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Update IoT Edge runtime</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-auto-provision-x509-certs?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Provision IoT Edge devices by using the device provisioning service</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="deploy-an-iot-edge-device"><a href="https://docs.microsoft.com/azure/iot-edge/how-to-create-iot-edge-device?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Deploy an IoT Edge device</a><a class="hash-link" href="#deploy-an-iot-edge-device" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-edge/module-composition?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create and implement a deployment manifest</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/module-deployment-monitoring?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a deployment for a single IoT Edge device</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-deploy-at-scale?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a deployment to target multiple devices</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-continuous-integration-continuous-deployment?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a continuous deployment by using Azure DevOps</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="develop-iot-edge-modules"><a href="https://docs.microsoft.com/azure/iot-edge/how-to-vs-code-develop-module?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Develop IoT Edge modules</a><a class="hash-link" href="#develop-iot-edge-modules" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-vs-code-develop-module?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create and customize an IoT Edge module</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-deploy-modules-portal?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Deploy a custom IoT Edge module to an IoT Edge device</a></li><li><a href="https://azure.microsoft.com/services/container-registry/?wt.mc_id=eventspg_16482_webpage_reactor#documentation" target="_blank" rel="noopener noreferrer">Publish an IoT Edge module to Azure Container Registry</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-configure-module-build-options?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Define module configuration</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/module-development?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure IoT Edge module routing</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/module-development?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure environment for IoT Edge development</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="configure-an-iot-edge-device"><a href="https://docs.microsoft.com/azure/iot-edge/tutorial-machine-learning-edge-05-configure-edge-device?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure an IoT Edge device</a><a class="hash-link" href="#configure-an-iot-edge-device" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-edge/iot-edge-as-gateway?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Select an appropriate gateway pattern</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-connect-downstream-iot-edge-device?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Deploy an IoT gateway by using IoT Hub and IoT Edge</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/how-to-manage-device-certificates?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure IoT Edge certificates</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/offline-capabilities?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement and configure offline support (including local storage)</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/tutorial-nested-iot-edge?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a layered hierarchy of IoT Edge devices</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/iot-edge-security-manager?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Interact with the IoT Edge security manager</a></li></ul><p><em>NOTE: In most cases, exams do NOT cover preview features, and some features will only be added to an exam when they are GA (General Availability).</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-learn---related-learning-paths">Microsoft Learn - Related Learning Paths<a class="hash-link" href="#microsoft-learn---related-learning-paths" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="deploy-azure-iot-edge-devices-and-modules-5-modules"><a href="https://docs.microsoft.com/learn/paths/deploy-azure-iot-edge-devices-modules?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Deploy Azure IoT Edge devices and modules</a> (5 Modules)<a class="hash-link" href="#deploy-azure-iot-edge-devices-and-modules-5-modules" title="Direct link to heading">​</a></h3><p>Learn about the benefits provided by Azure IoT Edge, the IoT Edge runtime environment, IoT Edge device deployments, and IoT Edge gateway device patterns and capabilities.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="develop-and-deploy-custom-iot-edge-modules-4-modules"><a href="https://docs.microsoft.com/learn/paths/develop-deploy-custom-iot-edge-modules?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Develop and deploy custom IoT Edge modules</a> (4 Modules)<a class="hash-link" href="#develop-and-deploy-custom-iot-edge-modules-4-modules" title="Direct link to heading">​</a></h3><p>Learn about programming for the IoT Edge runtime environment, the tools and processes that are used to develop custom IoT Edge modules, and the support that IoT Edge provides for extended offline scenarios.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-helpful-resources">Other Helpful Resources<a class="hash-link" href="#other-helpful-resources" title="Direct link to heading">​</a></h2><ul><li><a href="https://azure.microsoft.com/blog/topics/internet-of-things?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Blogs</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/iot-edge-for-linux-on-windows?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Edge for Linux on Windows</a></li><li><a href="https://azure.microsoft.com/pricing/details/iot-hub/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Hub Pricing</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/security?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Edge Security</a></li><li><a href="https://docs.microsoft.com/azure/architecture/reference-architectures/iot?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Reference Architecture</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/tutorial-machine-learning-edge-01-intro?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">End-to-end solution using Azure Machine Learning and IoT Edge</a></li><li><a href="https://techcommunity.microsoft.com/t5/internet-of-things-iot/ct-p/IoT?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Microsoft Tech Community - IoT</a> - Blogs and conversation spaces</li><li><a href="https://docs.microsoft.com/azure/iot-edge/tutorial-nested-iot-edge?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Tutorial: Create a hierarchy of IoT Edge devices</a></li><li><a href="https://docs.microsoft.com/azure/iot-edge/about-iot-edge?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">What is Azure IoT Edge?</a></li><li><a href="https://www.youtube.com/channel/UCL7wy-iy_V76xxPnrIzGOZQ?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">YouTube - Microsoft IoT Developers</a></li></ul><p>Happy studies!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>az220</category>
            <category>iotcerts</category>
        </item>
        <item>
            <title><![CDATA[25: Azure Percept Learn Path]]></title>
            <link>https://JulyOT.dev/blog/25-azure-percept-learn-modules</link>
            <guid>25-azure-percept-learn-modules</guid>
            <pubDate>Mon, 25 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 25 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 25 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-25-azure-percept-learn-modules-60861bfd4a71ebf8c2e656ca9f0eac1a.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we learn about the Build edge AI solutions with Azure Percept Learning Path.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-edge-ai-solutions-with-azure-percept-learning-path">Build edge AI solutions with Azure Percept Learning Path<a class="hash-link" href="#build-edge-ai-solutions-with-azure-percept-learning-path" title="Direct link to heading">​</a></h2><p>Interested in building an Edge AI solution with Azure Percept? Azure Percept is a fully integrated, easy-to-use platform with added security for creating edge AI solutions.</p><p>We've just released a new learning path for Azure Percept where you can learn about the basics of edge AI and the problems Azure Percept is trying to solve.</p><p>The newly released learning path for Azure Percept: <a href="https://docs.microsoft.com/learn/paths/azure-percept?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Build edge AI solutions with Azure Percept - Learn | Microsoft Docs</a> has two modules.</p><ul><li>Module 1: <a href="https://docs.microsoft.com/learn/modules/azure-percept-prerequisites?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure Percept prerequisites - Learn | Microsoft Docs</a></li><li>Module 2: <a href="https://docs.microsoft.com/learn/modules/explore-azure-percept?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Explore Azure Percept - Learn | Microsoft Docs</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="module-1-azure-percept-prerequisites---learn--microsoft-docs">Module 1: Azure Percept prerequisites - Learn | Microsoft Docs<a class="hash-link" href="#module-1-azure-percept-prerequisites---learn--microsoft-docs" title="Direct link to heading">​</a></h3><p>In the Azure Percept Prerequisites module, you'll learn about the prerequisites for building and deploying an edge artificial intelligence (AI) solution with Azure Percept. You'll learn about three main areas: IoT, AI, and other Microsoft services, which will help you to get started with building and deploying edge AI solutions with Azure Percept.</p><p><img loading="lazy" alt="Overview of the Azure Percept prerequisites learn module" src="/assets/images/Azure-Percept-prerequisites-400b2b80e970b05d691ea4ac4a274a25.png" width="624" height="352" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="module-2-explore-azure-percept---learn--microsoft-docs">Module 2: Explore Azure Percept - Learn | Microsoft Docs<a class="hash-link" href="#module-2-explore-azure-percept---learn--microsoft-docs" title="Direct link to heading">​</a></h3><p>In the Explore Azure Percept module, you'll learn what Azure Percept is, learn how the components of Azure Percept work together to create edge AI solutions, and understand the scenarios where you could use Azure Percept.</p><p><img loading="lazy" alt="Overview of the Explore Azure Percept learn module" src="/assets/images/Explore-Azure-Percept-b6af7dc178a1eacf60c912e9ac4131bf.png" width="624" height="373" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="start-learning">Start learning<a class="hash-link" href="#start-learning" title="Direct link to heading">​</a></h3><p><strong>Learn more by checking out the Learning Path</strong> at <a href="https://docs.microsoft.com/learn/paths/azure-percept/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Build edge AI solutions with Azure Percept - Learn | Microsoft Docs</a>. After completing the learning path and modules, you'll earn <strong>your digital badge</strong>.</p><p>We'll be adding more content as we launch new products this fall! Stay tuned!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>aiatedge</category>
            <category>iotcerts</category>
        </item>
        <item>
            <title><![CDATA[24: Exam AZ-220 Study Guide - Provision and Manage Devices]]></title>
            <link>https://JulyOT.dev/blog/julyot-day24-az220</link>
            <guid>julyot-day24-az220</guid>
            <pubDate>Sun, 24 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 24 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 24 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-24-az220-provision-manage-devices-2382e439f94daf95a75f9ab72f6a9ff0.png" width="1000" height="420" class="img_ev3q"></p><p><em>This is part 2 of a series of posts to help you pass the AZ-220 Azure IoT Developer specialty exam. 15-20% of the AZ-220 exam will measure your ability to provision and manage devices.</em></p><p>The Microsoft Global Partner Solutions (GPS) Technical Team, IoT Product Group, IoT Advocates, and Microsoft Worldwide Learning have collaborated to create this guide to help you prepare for the Microsoft Azure IoT Developer exam!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skills-measured-provision-and-manage-devices">Skills Measured: Provision and Manage Devices<a class="hash-link" href="#skills-measured-provision-and-manage-devices" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="set-up-the-device-provisioning-service"><a href="https://docs.microsoft.com/azure/iot-dps/about-iot-dps?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Set up the device provisioning service</a><a class="hash-link" href="#set-up-the-device-provisioning-service" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-dps/quick-setup-auto-provision?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a device provisioning service</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-manage-enrollments?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create a new enrollment in the device provisioning service</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/quick-setup-auto-provision?wt.mc_id=eventspg_16482_webpage_reactor#link-the-iot-hub-and-your-device-provisioning-service" target="_blank" rel="noopener noreferrer">Link an IoT hub to the device provisioning service</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manage-the-device-lifecycle"><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-device-management-overview?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage the device lifecycle</a><a class="hash-link" href="#manage-the-device-lifecycle" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-manage-enrollments?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Provision a device by using the device provisioning service</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-unprovision-devices?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Deprovision an auto-enrollment</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-revoke-device-access-portal?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Decommission (disenroll) a device</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manage-iot-devices-by-using-iot-hub"><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-device-management-overview?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage IoT devices by using IoT Hub</a><a class="hash-link" href="#manage-iot-devices-by-using-iot-hub" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage devices list in the IoT Hub device registry</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Modify device twin tags and properties</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-automatic-device-management?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Specify a set of devices to manage by using IoT Hub Automatic Device Management</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-automatic-device-management?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement and manage configuration on a set of devices by using IoT Hub Automatic Device Management</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-module-twins?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Control access to device functionality by using module identities and module twins</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manage-iot-devices-by-using-azure-iot-central"><a href="https://docs.microsoft.com/azure/iot-central/core/overview-iot-central-operator?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage IoT devices by using Azure IoT Central</a><a class="hash-link" href="#manage-iot-devices-by-using-azure-iot-central" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-set-up-template?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create and manage device templates by using Azure IoT Central and Digital Twins Definition Language (DTDL)</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-configure-rules?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure rules, actions, and commands in Azure IoT Central</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-manage-devices?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Add, enroll, and manage devices by using Azure IoT Central</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/overview-iot-central-admin?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage Azure IoT Central applications, including security, tenants, customization, and visualizations</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-map-data?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage data integration, including data ingress, data export, and data transformation</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-manage-devices-in-bulk?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure and manage Azure IoT Central jobs</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/overview-iot-central-api-tour?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage Azure IoT Central by using APIs</a></li></ul><p><em>NOTE: In most cases, exams do NOT cover preview features, and some features will only be added to an exam when they are GA (General Availability).</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-learn---related-learning-paths">Microsoft Learn - Related Learning Paths<a class="hash-link" href="#microsoft-learn---related-learning-paths" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="provision-iot-devices-at-scale-by-using-the-device-provisioning-service-5-modules"><a href="https://docs.microsoft.com/learn/paths/provision-iot-devices-scale-use-device/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Provision IoT devices at scale by using the Device Provisioning Service</a> (5 Modules)<a class="hash-link" href="#provision-iot-devices-at-scale-by-using-the-device-provisioning-service-5-modules" title="Direct link to heading">​</a></h3><p>Learn about the Device Provisioning Service properties and capabilities, device attestation mechanisms, device provisioning lifecycle tasks, and you will implement device enrollment (and disenrollment) using individual and group enrollment processes.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="manage-iot-devices-by-using-iot-hub-and-apps-5-modules"><a href="https://docs.microsoft.com/learn/paths/use-iot-hub-apps-manage-iot-devices/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Manage IoT devices by using IoT Hub and apps</a> (5 Modules)<a class="hash-link" href="#manage-iot-devices-by-using-iot-hub-and-apps-5-modules" title="Direct link to heading">​</a></h3><p>Learn about device management patterns and the capabilities for device management, including bulk device management, that can be implemented using features of IoT Hub and by developing code.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="build-low-touch-iot-solutions-by-using-azure-iot-central-4-modules"><a href="https://docs.microsoft.com/learn/paths/build-low-touch-iot-solutions-by-using-azure-iot-central/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Build low touch IoT solutions by using Azure IoT Central</a> (4 Modules)<a class="hash-link" href="#build-low-touch-iot-solutions-by-using-azure-iot-central-4-modules" title="Direct link to heading">​</a></h3><p>Learn about the Azure IoT Central application platform and the support that it provides to companies with limited budgets and technical resources who are interested in developing, managing, and maintaining IoT solutions.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-helpful-resources">Other Helpful Resources<a class="hash-link" href="#other-helpful-resources" title="Direct link to heading">​</a></h2><ul><li><a href="https://azure.microsoft.com/blog/topics/internet-of-things/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Blogs</a></li><li><a href="https://azure.microsoft.com/pricing/details/iot-hub/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Hub Pricing</a></li><li><a href="https://docs.microsoft.com/azure/architecture/reference-architectures/iot?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Reference Architecture</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-configuration-best-practices" target="_blank" rel="noopener noreferrer">Best practices for device configuration within an IoT solution</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-export-to-azure-data-explorer?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Export IoT data to Azure Data Explorer</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-unprovision-devices?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">How to deprovision devices that were previously auto-provisioned</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-revoke-device-access-portal" target="_blank" rel="noopener noreferrer">How to disenroll a device from Azure IoT Hub Device Provisioning Service</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/quick-create-simulated-device-symm-key?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">How to provision a single simulated device</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-provision-multitenant?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">How to provision for multitenancy</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-legacy-device-symm-key?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">How to provision legacy devices using Symmetric key attestation</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-reprovision?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">How to reprovision devices</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/how-to-roll-certificates?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">How to roll X.509 device certificates</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-bulk-identity-mgmt?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Import and export IoT Hub device identities in bulk</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-direct-methods?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Invoke a direct method on a device</a></li><li><a href="https://docs.microsoft.com/azure/iot-dps/concepts-service?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">IoT Hub Device Provisioning Service concepts</a></li><li><a href="https://techcommunity.microsoft.com/t5/internet-of-things-iot/ct-p/IoT?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Microsoft Tech Community - IoT</a> - Blogs and conversation spaces</li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-jobs?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Schedule jobs on multiple devices</a></li><li><a href="https://docs.microsoft.com/azure/iot-central/core/howto-transform-data?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Transform data externally for IoT Central</a></li><li><a href="https://www.youtube.com/channel/UCL7wy-iy_V76xxPnrIzGOZQ?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">YouTube - Microsoft IoT Developers</a></li></ul><p>Happy studies!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>az220</category>
            <category>iotcerts</category>
        </item>
        <item>
            <title><![CDATA[23: Exam AZ-220 Study Guide - Set up the IoT solution infrastructure]]></title>
            <link>https://JulyOT.dev/blog/julyot-day23-az220</link>
            <guid>julyot-day23-az220</guid>
            <pubDate>Sat, 23 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 23 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 23 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-23-az220-iot-solution-infrastructure-9458f478ba738c6b431c0cb28f3b42f6.png" width="1000" height="420" class="img_ev3q"></p><p><em>This is part 1 of a series of posts to help you pass the AZ-220 Azure IoT Developer specialty exam. 10-15% of the AZ-220 exam will measure your ability to setup the IoT solution infrastructure.</em></p><p>The Microsoft Global Partner Solutions (GPS) Technical Team, IoT Product Group, IoT Advocates, and Microsoft Worldwide Learning have collaborated to create this guide to help you prepare for the Microsoft Azure IoT Developer exam!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skills-measured-setup-the-azure-iot-solution-infrastructure">Skills Measured: Setup the Azure IoT Solution Infrastructure<a class="hash-link" href="#skills-measured-setup-the-azure-iot-solution-infrastructure" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="create-and-configure-an-iot-hub"><a href="https://docs.microsoft.com/azure/iot-hub/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create and configure an IoT hub</a><a class="hash-link" href="#create-and-configure-an-iot-hub" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-create-through-portal?wt.mc_id=eventspg_16482_webpage_reactor#create-an-iot-hub" target="_blank" rel="noopener noreferrer">Create an IoT hub</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-create-through-portal?wt.mc_id=eventspg_16482_webpage_reactor#register-a-new-device-in-the-iot-hub" target="_blank" rel="noopener noreferrer">Register a device</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure a device twin</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-scaling?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure IoT Hub tier and scaling</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="build-device-messaging-and-communication"><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Build device messaging and communication</a><a class="hash-link" href="#build-device-messaging-and-communication" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-sdks?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Build messaging solutions by using SDKs (device and service)</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-d2c-guidance?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement device-to-cloud communication</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-c2d-guidance?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement cloud-to-device communication</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure file upload for devices</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-quotas-throttling?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Optimize message size and scaling for IoT Hub</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-tls-support?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Connect to IoT Hub by using Transport Layer Security (TLS) server certificates</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="configure-physical-iot-devices"><a href="https://docs.microsoft.com/azure/iot-develop/concepts-overview-connection-options?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure physical IoT devices</a><a class="hash-link" href="#configure-physical-iot-devices" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-protocols?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Recommend an appropriate protocol or gateway based on device specifications</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/tutorial-connectivity?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Configure device networking, topology, and connectivity</a></li><li><a href="https://docs.microsoft.com/azure/iot-develop/overview-iot-plug-and-play?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Add IoT Plug and Play capabilities to a device in a model-driven solution</a></li></ul><p><em>NOTE: In most cases, exams do NOT cover preview features, and some features will only be added to an exam when they are GA (General Availability).</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-learn---related-learning-paths">Microsoft Learn - Related Learning Paths<a class="hash-link" href="#microsoft-learn---related-learning-paths" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="create-azure-iot-services-in-the-azure-portal-4-modules"><a href="https://docs.microsoft.com/learn/paths/create-azure-iot-services-azure-portal/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Create Azure IoT services in the Azure portal</a> (4 Modules)<a class="hash-link" href="#create-azure-iot-services-in-the-azure-portal-4-modules" title="Direct link to heading">​</a></h3><p>Become familiar with the Azure portal to the Azure resources that are available for an IoT solution. Learners will step through the process of creating IoT Hub and Device Provisioning Service resources.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="implement-iot-device-communication-by-using-the-azure-iot-sdks-4-modules"><a href="https://docs.microsoft.com/learn/paths/implement-iot-device-communication-by-using-azure-iot-sdks/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Implement IoT device communication by using the Azure IoT SDKs</a> (4 Modules)<a class="hash-link" href="#implement-iot-device-communication-by-using-the-azure-iot-sdks-4-modules" title="Direct link to heading">​</a></h3><p>Learn about the IoT Hub service properties and limitations, the IoT device lifecycle, Azure IoT developer tools, and then you will implement communication between an IoT device and IoT Hub.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-helpful-resources">Other Helpful Resources<a class="hash-link" href="#other-helpful-resources" title="Direct link to heading">​</a></h2><ul><li><a href="https://azure.microsoft.com/blog/topics/internet-of-things/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Blogs</a></li><li><a href="https://azure.microsoft.com/pricing/details/iot-hub/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Hub Pricing</a></li><li><a href="https://docs.microsoft.com/azure/architecture/reference-architectures/iot?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Reference Architecture</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-compare-event-hubs?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Comparing IoT Hub and Event Hubs</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">IoT Hub query language for device and module twins, jobs, and message routing</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-endpoints?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">IoT Hub Endpoints</a></li><li><a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-message-enrichments-overview?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Message enrichments for device-to-cloud IoT Hub messages</a></li><li><a href="https://techcommunity.microsoft.com/t5/internet-of-things-iot/ct-p/IoT?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Microsoft Tech Community - IoT</a> - Blogs and conversation spaces</li><li><a href="https://www.youtube.com/channel/UCL7wy-iy_V76xxPnrIzGOZQ?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">YouTube - Microsoft IoT Developers</a></li></ul><p>Happy studies!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>az220</category>
            <category>iotcerts</category>
        </item>
        <item>
            <title><![CDATA[23: Azure cost monitor]]></title>
            <link>https://JulyOT.dev/blog/23-azure-cost-monitor</link>
            <guid>23-azure-cost-monitor</guid>
            <pubDate>Sat, 23 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 23 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 23 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-23-azure-cost-monitor-24b9ea63ff0b5aacd79268630ca4c75f.png" width="1000" height="420" class="img_ev3q"></p><p><em>Monitor your cloud costs using this e-paper Azure cost monitor.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="azure-cost-monitor">Azure cost monitor<a class="hash-link" href="#azure-cost-monitor" title="Direct link to heading">​</a></h2><p>When using Microsoft Azure services, it's helpful to know how much you're spending on a day-to-day basis. This Azure cost monitor uses the low-power, wireless Adafruit MagTag board to display a daily cost forecast for your Azure subscription.</p><p><img loading="lazy" src="/assets/images/cost_monitor-2500dfa91ecd7f248cc01f58703db744.jpg" width="900" height="675" class="img_ev3q"></p><p>This project is intended to show you how to use the Azure cost management API. Take a look at this project and adapt it to fit your needs!</p><p><em>Please note that it's only possible to get a cost forecast - actual costs are only available once you're billed.</em></p><form action="https://www.hackster.io/jenfoxbot/azure-cost-monitor-31811a" target="_blank"><input type="submit" value="Check out the project on Hackster" class="clean-btn button button--primary margin-left--md"></form>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>embedded</category>
        </item>
        <item>
            <title><![CDATA[22: IoT for Beginners lesson 4!]]></title>
            <link>https://JulyOT.dev/blog/22-julyot-iot-beginners</link>
            <guid>22-julyot-iot-beginners</guid>
            <pubDate>Fri, 22 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 22 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 22 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-22-iot-beginners-59375ee86cd734eb87ff8bdc3838446f.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we live stream lesson 4 of IoT for Beginners - connect your device to the internet.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-for-beginners">IoT For Beginners<a class="hash-link" href="#iot-for-beginners" title="Direct link to heading">​</a></h2><p><a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for beginners</a> is a free, open source, 24-lesson IoT curriculum. The second lesson is live-streamed today from the Microsoft Reactor. Catch the recording on the Microsoft Reactor YouTube channel.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/AkptcIdq2lc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Learn more about IoT for Beginners on the official <a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for Beginners GitHub repo</a>.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
        </item>
        <item>
            <title><![CDATA[22: Building .NET nanoFramework and interoperability]]></title>
            <link>https://JulyOT.dev/blog/22-nano-framework</link>
            <guid>22-nano-framework</guid>
            <pubDate>Fri, 22 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 22 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 22 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-22-nanoframework-bb2c78ecc44f1843370749e24488b0e1.png" width="1000" height="420" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-net-nanoframework">Building .NET nanoFramework<a class="hash-link" href="#building-net-nanoframework" title="Direct link to heading">​</a></h2><p>You can build your image for an MCU with .NET nanoFramework. In most cases, you'll use prebuilt images for popular boards, including advanced ESP32 devices like the ones from M5Stack for which we offer <a href="https://github.com/nanoframework/Home#m5stack" target="_blank" rel="noopener noreferrer">specific firmware</a> images and NuGets with <a href="https://github.com/nanoframework/nanoFramework.M5Stack" target="_blank" rel="noopener noreferrer">Board Support Packages</a>.</p><p>However, there are situations in which you'll want to build the image yourself. There are Developer Container images available for you to use. They contain all the toolchains and required tools. Check out the article on <a href="https://docs.nanoframework.net/content/building/using-dev-container.html" target="_blank" rel="noopener noreferrer">using Dev Container to build targets</a>. In case you prefer not to use the Dev Containers, it's possible to use a local setup too. Every step is well documented at <a href="https://docs.nanoframework.net/content/building/index.html" target="_blank" rel="noopener noreferrer">Building .NET nanoFramework</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="interop-in-net-nanoframework">Interop in .NET nanoFramework<a class="hash-link" href="#interop-in-net-nanoframework" title="Direct link to heading">​</a></h2><p>.NET nanoFramework supports a <em>lightweight</em> version of Interop which allows adding existing C/C++ code to .NET nanoFramework image. It's convenient, for example,  when you want to use a library that has been perfected over the years or when there is the need to perform processor-intensive operations that benefit from being executed directly by the CPU.</p><p>This is architected in such a way that the "foreign" code remains completely isolated from the CLR and the official libraries and drivers. With this, you can't break things upstream and it can be easily incorporated into the build process without requiring tweaks and handling complex merge operations.</p><p>Because the ultimate goal is to tap into this code from C#, there are two layers for this to happen:</p><ul><li>The C# library acts as a wrapper and offers the interface to the C/C++ code.</li><li>The C/C++ code that gets called from C#.</li></ul><p>Let's take look at how this works by creating a very simple Interop library that reads a hardware ID and performs a "complex" calculation.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="creating-the-c-managed-library">Creating the C# (managed) library<a class="hash-link" href="#creating-the-c-managed-library" title="Direct link to heading">​</a></h2><p>Create a new .NET nanoFramework project in Visual Studio</p><p>This is the very first step. Open Visual Studio, File, New Project.
Navigate to the C# .NET nanoFramework folder and select a Class Library project type.
For this example, we’ll call the project “NF.AwesomeLib”.</p><p><img loading="lazy" alt="New Class Library project" src="/assets/images/nanoframework-interop-new-project-e49a77bf8209768c03cb5ee4a40dfacf.png" width="941" height="653" class="img_ev3q"></p><p>Go to the Project properties (click the project icon in the Solution Explorer and go to the Properties Window) and navigate to the nanoFramework configuration properties view. Set the “Generate stub files” option to YES and the root name to NF.AwesomeLib.</p><p><img loading="lazy" alt="Class Library project properties" src="/assets/images/nanoframework-interop-library-properties-02d71fc87a2358b932b7b055157a7380.png" width="417" height="404" class="img_ev3q"></p><p>Now rename the Class1.cs that Visual Studio adds by default to Utilities.cs. Make sure that the class name inside that file gets renamed too. Add a new class named Math.cs. On both make sure that the class is public.</p><p>Your project should now look like this.</p><p><img loading="lazy" alt="Class Library project properties" src="/assets/images/nanoframework-interop-class-view-e72f720fd4f79aacb9661a3b29108dad.png" width="1086" height="696" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-the-api-methods-and-the-stubs">Adding the API methods and the stubs<a class="hash-link" href="#adding-the-api-methods-and-the-stubs" title="Direct link to heading">​</a></h3><p>The next step will be adding the methods and/or properties that you want available on the C# managed API. These are the ones that will be called from a C# project referencing your Interop library.</p><p>We'll add an HardwareSerial property to the Utilities class and call the native method that supports the API at the native end. Like this.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">namespace NF.AwesomeLib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public class Utilities</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static byte[] _hardwareSerial;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /// &lt;summary&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /// Gets the hardware unique serial ID (12 bytes).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /// &lt;/summary&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public static byte[] HardwareSerial</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            get</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if (_hardwareSerial == null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    _hardwareSerial = new byte[12];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    NativeGetHardwareSerial(_hardwareSerial);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                return _hardwareSerial;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #region Stubs </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        [MethodImpl(MethodImplOptions.InternalCall)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static extern void NativeGetHardwareSerial(byte[] data);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #endregion stubs </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note that, except for strings, you’re free to use any of the standard types in the arguments of the Interop methods. It’s OK to use arrays of those too.</p><p>A few explanations on the above:</p><ul><li>The property <code>HardwareSerial</code> has only a getter because we are only reading the serial from the hardware. As that can’t be written, it doesn’t make sense to provide a setter, right?</li><li>The serial number is stored in a backing field to be more efficient. When it’s read the first time it will go and read it from the processor. On subsequent accesses that won’t be necessary.</li><li>Note the summary comment on the property. Visual Studio uses that to generate an XML file that makes the awesome IntelliSense show that documentation on the projects referencing the library.</li><li>The serial number of the processor is handled as an array of bytes with a length of 12. This was taken from the device manual.</li><li>A stub method must exist to enable Visual Studio to create the placeholder for the C/C++ code. So you need to have one for each stub that is required.</li><li>The stub methods must be implemented as an extern and be decorated with the MethodImplAttribute attribute. Otherwise, Visual Studio won’t be able to do its magic.</li><li>You may want to find a working system for you regarding the stub naming and where you place them in the class. Maybe you want to group them in a region, or you prefer to keep them along the caller method. It will work in any of those ways, just a hint on keeping things organized.</li></ul><p>Moving on to the Math class. We’ll now add an API method called SuperComplicatedCalculation and the respective stub. It will look like this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">namespace NF.AwesomeLib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public class Math</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /// &lt;summary&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /// Crunches value through a super complicated and secret calculation algorithm.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /// &lt;/summary&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /// &lt;param name="value"&gt;Value to crunch.&lt;/param&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /// &lt;returns&gt;&lt;/returns&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public double SuperComplicatedCalculation(double value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return NativeSuperComplicatedCalculation(value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #region Stubs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        [MethodImpl(MethodImplOptions.InternalCall)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static extern double NativeSuperComplicatedCalculation(double value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        #endregion stubs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And this is all that’s required on the managed side! Build the project and look at the project folder (using VS Code for example). This is what it will look like after a successful build:</p><p><img loading="lazy" alt="Class Library project properties" src="/assets/images/nanoframework-interop-native-view-db325e7e3707bbc84bfbc89873a5d759.png" width="1920" height="1040" class="img_ev3q"></p><p>From the top to the bottom, you can identify in the bin folder (debug or release flavor depending on your build preference) the .NET library that will be referenced in other projects. Please note that besides the .dll file there is the .xml file (the one that enables IntelliSense to do its magic), the .pdb file, and another one with a .pe extension.
When distributing the Interop library make sure that you package all four files. Failing to do so, will make Visual Studio complain that the project can’t build. You can distribute all those in a ZIP or even better, as a NuGet package.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="working-on-the-cc-native-code">Working on the C/C++ (native) code<a class="hash-link" href="#working-on-the-cc-native-code" title="Direct link to heading">​</a></h2><p>Moving to the Stubs folder we can find a bunch of files and a .cmake file. All those are required when building the nanoCLR image that will add support for your Interop library.</p><p>Look at the file names: they follow the namespace and class naming in the Visual Studio project.
Something very, very important: don’t rename or mess around with the content of those files. If you do that, you'll risk that the image build will fail or you can also end up with the Interop library not doing anything. This can be very frustrating and hard to debug. So, again, DO NOT mess around with those files!</p><p>The only exception to that will be, of course, the ones that include the stubs for the C/C++ code that we'll be adding. Those are the .cpp files that end with the class name.
In our example those are: <code>NF_AwesomeLib_NF_AwesomeLib_Math.cpp</code> and <code>NF_AwesomeLib_NF_AwesomeLib_Utilities.cpp</code>.</p><p>You’ve probably also noted that there are a couple of other files with a similar name but ending with _mshl. Those are the marshaling files that are responsible for validation, sanity checks, and marshaling the interface between the managed and native code. Those are to be left alone. Again DO NOT change them!</p><p>Let’s look at the stub file for the Utilities class. That’s the one that will read the processor serial number.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">void Utilities::NativeGetHardwareSerial( CLR_RT_TypedArray_UINT8 param0, HRESULT &amp;hr )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is an empty C++ function named after the class and the stub method that you’ve placed in the C# project.</p><p>Let’s take a moment to understand what we have here.</p><ul><li>The return value of the C++ function matches the type of the C# stub method. Which is void in this case.</li><li>The first argument has a type that is mapping between the C# type and the equivalent C++ type. An array of bytes in this case.</li><li>The last argument is an HRESULT type whose purpose is to report the result of the code execution. We’ll get back to this so don’t worry about it for now. Just understand what’s the purpose of it.</li></ul><p>According to the programming manual STM32F4 devices have a 96 bits (12 bytes) unique serial number that is stored starting at address 0x1FFF7A10. For STM32F7 that address is 0x1FF0F420. In other STM32 series, the ID may be located at a different address. Now that we know where it is stored we can add code to read it. I’ll start with the code first and then walk through it.</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token class-name">Utilities</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">NativeGetHardwareSerial</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> CLR_RT_TypedArray_UINT8 param0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> HRESULT </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hr </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">param0</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">GetSize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hr</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">CLR_E_BUFFER_TOO_SMALL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">memcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">param0</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">GetBuffer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token number" style="color:#36acaa">0x1FFF7A10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The first if statement is a sanity check to be sure that there is enough room in the array to hold the serial number bytes. Why is this important?
Remember that here we are not in the C# world anymore where the CRL and Visual Studio take care of the hard stuff for us. In C++ things are very different! In this particular example if the caller wouldn’t have reserved the required 12 bytes in memory to hold the complete serial array when writing onto it the 12 bytes from the serial could be overwriting something that is stored in the memory space ahead of the argument address. For types other than pointers such as bytes, integers, and doubles this check is not required.</p><p>Still on the if statement you can see that if there is not enough room we can’t continue. Before the code returns we are setting hr to CLR_E_BUFFER_TOO_SMALL (that’s the argument that holds the execution result, remember?). This is to signal that something went wrong and give some clue on what that might be. There is still more to say about this result argument, so we’ll get back to it.</p><p>The next piece of code is where – finally – we are reading the serial from the device.
As the serial number is accessible in a memory address we can simply use a <code>memcpy</code> to copy it from its memory location to the argument.
A few comments about the argument type (<code>CLR_RT_TypedArray_UINT8</code>). It acts like a wrapper for the memory block that holds the array (or a pointer if you prefer). The class for that type provides a function – called <code>GetBuffer()</code> – that returns the actual pointer that allows direct access to it. We need that because we have to pass a pointer when calling <code>memcpy</code>. This may sound a bit complicated, granted. If you are curious about the implementation details or want to know how it works I suggest that you delve into the .NET nanoFramework interpreter code in our <a href="https://github.com/nanoframework/nf-interpreter" target="_blank" rel="noopener noreferrer">GitHub repository</a>.</p><p>And that’s it! When this function returns the CPU serial number will be in the argument pointer and will eventually pop up in the C# managed code in that argument with the same name.</p><p>For the <code>Math</code> class, there won’t be any calls to hardware or any other fancy stuff, just a complicated and secret calculation to illustrate the use of Interop for simple code execution.</p><p>Visual Studio has already generated a nice stub for us to fill in with code. Here’s the original stub:</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">double</span><span class="token plain"> </span><span class="token class-name">Math</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">NativeSuperComplicatedCalculation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">double</span><span class="token plain"> param0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> HRESULT </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hr </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">double</span><span class="token plain"> retVal </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> retVal</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note that the stub function, again, matches the declaration of its C# managed counterpart and, again, has that <code>hr</code> argument to return the execution result.
Visual Studio was kind enough to add there the code for the return value so we can start coding on top of that. That is required, otherwise, this code wouldn’t even compile. 😉</p><p>Where is the super complicated and secret algorithm:</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">double</span><span class="token plain"> </span><span class="token class-name">Math</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">NativeSuperComplicatedCalculation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">double</span><span class="token plain"> param0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> HRESULT </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hr </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">double</span><span class="token plain"> retVal </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  retVal </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> param0 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> retVal</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And, with this, we complete the native “low level” implementation of our Interop library.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="adding-the-interop-library-to-a-nanoclr-image">Adding the Interop library to a nanoCLR image<a class="hash-link" href="#adding-the-interop-library-to-a-nanoclr-image" title="Direct link to heading">​</a></h2><p>The last step that is missing is adding the Interop source code files to the build of a nanoCLR image.</p><p>You can place the code files pretty much anywhere you want. Either on the same source tree or elsewhere. The nanoFramework interpreter repo has a folder named <code>Interop</code> that you can use for exactly this: holding the folders of the Interop assemblies that you have. Any changes inside that folder won’t be picked up by Git.
To make it simple we’ll follow that and we just copy what is in the Stubs folder into a new folder <code>InteropAssemblies\NF.AwesomeLib\</code>.</p><p>The next file to get our attention is <code>FindINTEROP-NF.AwesomeLib.cmake</code>. .NET nanoFramework uses CMake as its build system. Skipping through the technical details, suffice to say that, as far as CMake is concerned, the Interop assembly will be treated as a CMake module and, because of that, the file name for the file to be properly included in the build, has to named FindINTEROP-NF.AwesomeLib.cmake and has to be placed inside the CMake\Modules folder.</p><p>Inside that file, the only thing that requires your attention is the first statement where the location of the source code folder is declared.</p><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># native code directory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set(BASE_PATH_FOR_THIS_MODULE "${BASE_PATH_FOR_CLASS_LIBRARIES_MODULES}/NF.AwesomeLib")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(...)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If you are placing it inside that <code>Interop</code> folder the required changes are:</p><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(...)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># native code directory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set(BASE_PATH_FOR_THIS_MODULE "${PROJECT_SOURCE_DIR}/InteropAssemblies/NF.AwesomeLib")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(...)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And this is it! Now to the build.</p><p>Please refer to the documentation mentioned above about using Dev Containers or setting up the local toolchain to build .NET nanoFramework firmware image.</p><p>Let's assume If you are using the CMake Tools module to build inside VS Code. You need to declare that you want this Interop assembly added to the build. Do so by opening the CMakeUserPresets.json file and navigating to the settings for the target you want it added to.</p><p>There you need to add the following CMake build option:</p><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    "cacheVariables": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "TARGET_BOARD": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "type": "STRING",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            "value": "${presetName}"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "NF_INTEROP_ASSEMBLIES": [ "NF.AwesomeLib" ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>A couple of notes about this:</p><p>The <code>NF_INTEROP_ASSEMBLIES</code> option expects a collection. This is because you can add as many Interop libraries as you want to a nanoCLR firmware image.
The name of the assembly must match exactly the class name. Dots included. If you screw up this you’ll notice it immediately in the build.</p><p>The following task is launching the image build. Fingers crossed you won't have any errors… 😉</p><p>First, check the CMake preparation output, you should see the Interop library listed:</p><p><img loading="lazy" alt="CMake build setup" src="/assets/images/nanoframework-interop-build-include-lib-f1370c1090f9dc416296231f4d08a707.png" width="397" height="157" class="img_ev3q"></p><p>After the build completes successfully, you should be seeing something similar to this:</p><p><img loading="lazy" alt="CMake build setup" src="/assets/images/nanoframework-interop-build-ok-418acd5fa9282669f1abd4c17536a925.png" width="775" height="104" class="img_ev3q"></p><p>We now have a nanoCLR firmware image ready to be flashed on a real board!</p><p>The next check after loading a target with the nanoCLR firmware image that includes the Interop library is seeing it listed in the Native Assemblies listing. After booting the target is listed in the Visual Studio Device Explorer list and after you click on the Device Capabilities button you’ll see it in the output window like this:</p><p><img loading="lazy" alt="CMake build setup" src="/assets/images/nanoframework-interop-device-capabilities-302f0fac7310017249822f6f4c0a3dc4.png" width="546" height="242" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-an-interop-library">Using an Interop library<a class="hash-link" href="#using-an-interop-library" title="Direct link to heading">​</a></h2><p>This works just like any other .NET library that you use every day. In Visual Studio open the Add reference dialog and search for the NF.AwesomeLib.dll file that was the output result of building the Interop Project (you’ll find it in the bin folder). As you are going through that, note the companion XML file with the same name. With that file there you’ll see the documentation comments shown by IntelliSense as you code.</p><p>This is the code to test the Interop library. In the first part, we read the CPU serial number and output it as a hexadecimal formatted string. On the second we call the method that crunches the input value.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static void Main()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // testing cpu serial number</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    string serialNumber = "";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foreach (byte b in Utilities.HardwareSerial)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        serialNumber += b.ToString("X2");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine("cpu serial number: " + serialNumber);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // test complicated calculation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    NF.AwesomeLib.Math math = new NF.AwesomeLib.Math();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    double result = math.SuperComplicatedCalculation(11.12);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine("calculation result: " + result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Thread.Sleep(Timeout.Infinite);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here’s a screenshot of Visual Studio running the test app. Note the serial number and the calculation result in the Output window (in green). Also, the DLL is listed in the project references (in yellow).</p><p><img loading="lazy" alt="CMake build setup" src="/assets/images/nanoframework-interop-referencing-library-2296cacb8bc168a23f4199bc0d26740c.png" width="1373" height="962" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping up<a class="hash-link" href="#wrapping-up" title="Direct link to heading">​</a></h2><p>And that’s it! We've seen how powerful this Interop feature is and hopefully illustrated how you can (re)use C/C++ code in a .NET nanoFramework C# application!</p><p>The content above describes the key aspects and steps to get Interop working. It is a complex feature and you can read a more thorough and detailed description of all this in <a href="https://jsimoesblog.wordpress.com/2018/06/19/interop-in-net-nanoframework/" target="_blank" rel="noopener noreferrer">this blog post</a>.</p><p>Also, you can find the code related to Interop in .NET nanoFramework in our <a href="https://github.com/nanoframework/Samples/tree/main/samples/Interop" target="_blank" rel="noopener noreferrer">samples repository</a>.</p><p>Enjoy it and have fun coding with .NET C# for microcontrollers!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>embeddediot</category>
        </item>
        <item>
            <title><![CDATA[21: Microsoft Certified - Azure IoT Developer Specialty]]></title>
            <link>https://JulyOT.dev/blog/julyot-day21-az220</link>
            <guid>julyot-day21-az220</guid>
            <pubDate>Thu, 21 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 21 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 21 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-21-az220-intro-2995df4085d5c16903c558bc9e1b692a.png" width="1000" height="420" class="img_ev3q"></p><p><em>Now that you've been learning all about IoT during #JulyOT, it's time to consider certification!</em></p><p>Whether you’re a student wanting to validate your expertise in IoT or a professional IoT solution developer looking to stand out from the crowd, the <a href="https://docs.microsoft.com/learn/certifications/exams/az-220?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure IoT Developer Specialty certification</a> may be perfect for you! This certification involves passing only one exam: <a href="https://docs.microsoft.com/certifications/exams/az-220?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">AZ-220 – Microsoft Azure IoT Developer</a></p><p><img loading="lazy" alt="Specialty Azure IoT Developer" src="/assets/images/specialty-azure-iot-developer-e265d857c7b012a24b754d358957aa40.png" width="400" height="400" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="skills-measured">Skills Measured<a class="hash-link" href="#skills-measured" title="Direct link to heading">​</a></h2><p>The AZ-220 exam measures your ability to:</p><ul><li>Set up the IoT solution infrastructure (10-15%)</li><li>Provision and manage devices (15-20%)</li><li>Implement IoT Edge (15-20%)</li><li>Implement business integration (5-10%)</li><li>Process and manage data (15-20%)</li><li>Monitor, troubleshoot, and optimize IoT solutions (15-20%)</li><li>Implement security (10-15%)</li></ul><p>Stay tuned as we share resources for each of these exam areas throughout the rest of #JulyOT to help you prepare!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get Started<a class="hash-link" href="#get-started" title="Direct link to heading">​</a></h2><p>Visit the <a href="https://docs.microsoft.com/certifications/exams/az-220?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">AZ-220 – Microsoft Azure IoT Developer</a> exam page to learn more.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>az220</category>
            <category>iotcerts</category>
        </item>
        <item>
            <title><![CDATA[21: Creating intelligent autonomous systems with project bonsai]]></title>
            <link>https://JulyOT.dev/blog/21-project-bonsai</link>
            <guid>21-project-bonsai</guid>
            <pubDate>Thu, 21 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 21 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 21 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-21-project-bonsai-90785eeba5dc52d425eecfda4a3cd155.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we preview 4 livestreams to teach you how to create intelligent autonomous systems with Project Bonsai.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="project-bonsai">Project Bonsai<a class="hash-link" href="#project-bonsai" title="Direct link to heading">​</a></h2><p><a href="https://docs.microsoft.com/bonsai/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Project Bonsai</a> is a Low-code AI development platform. Improve production and reduce downtime with engineer-built AI that gives optimization guidance or makes independent decisions. Join Microsoft Cloud Advocate Josh Ndemenge for these 4 live streams to learn everything you need to know.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="creating-intelligent-autonomous-systems-with-project-bonsai">Creating intelligent autonomous systems with project bonsai<a class="hash-link" href="#creating-intelligent-autonomous-systems-with-project-bonsai" title="Direct link to heading">​</a></h3><p><strong>This stream ran Thursday, July 21, 9:00 AM Pacific Time. Catch the recording here.</strong></p><iframe width="560" height="315" src="https://www.youtube.com/embed/usFJUraJJ0E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><h3 class="anchor anchorWithStickyNavbar_LWe7" id="teaching-industrial-autonomous-systems">Teaching Industrial Autonomous Systems<a class="hash-link" href="#teaching-industrial-autonomous-systems" title="Direct link to heading">​</a></h3><p><strong>Tuesday, July 26, 7:00 AM Pacific Time</strong></p><a href="https://www.meetup.com/microsoft-reactor-toronto/events/286903784/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F505225995%2F676x380.webp&amp;w=3840&amp;q=75" alt="Teaching Industrial Autonomous Systems, Tuesday, July 26, 7:00 AM Pacific Time" class="img_ev3q"></a>&nbsp;<table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-toronto/events/286903784/" target="_blank"><input type="submit" value="Register on MeetUp" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/Jul26AutonomousSystems" target="_blank"><input type="submit" value="Watch on YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-your-first-bonsai-brain">Building your first Bonsai Brain<a class="hash-link" href="#building-your-first-bonsai-brain" title="Direct link to heading">​</a></h3><p><strong>Thursday, July 28, 9:00 AM Pacific Time</strong></p><a href="https://www.meetup.com/microsoft-reactor-new-york/events/287206943/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F505559507%2F676x380.webp&amp;w=3840&amp;q=75" alt="Building your first Bonsai Brain, Thursday, July 28, 9:00 AM Pacific Time" class="img_ev3q"></a>&nbsp;<table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-new-york/events/287206943/" target="_blank"><input type="submit" value="Register on MeetUp" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/JulyOTBonsaiBrain" target="_blank"><input type="submit" value="Watch on YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="deploying-a-bonsai-brain-using-azure-iot-edge">Deploying a Bonsai Brain using Azure IoT Edge<a class="hash-link" href="#deploying-a-bonsai-brain-using-azure-iot-edge" title="Direct link to heading">​</a></h3><p><strong>Thursday, August 4, 9:00 AM Pacific Time</strong></p><a href="https://www.meetup.com/microsoft-reactor-new-york/events/287206935/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F505559460%2F676x380.webp&amp;w=3840&amp;q=75" alt="Deploying a Bonsai Brain using Azure IoT Edge, Thursday, August 4, 9:00 AM Pacific Time" class="img_ev3q"></a>&nbsp;<table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-new-york/events/287206935/" target="_blank"><input type="submit" value="Register on MeetUp" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/JulyOTDeployBonsaiBrain" target="_blank"><input type="submit" value="Watch on YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>aiatedge</category>
            <category>bonsai</category>
        </item>
        <item>
            <title><![CDATA[20: Azure IoT con Raspberry Pi y reTerminal]]></title>
            <link>https://JulyOT.dev/blog/20-azure-iot-pi-reterminal-juliot</link>
            <guid>20-azure-iot-pi-reterminal-juliot</guid>
            <pubDate>Wed, 20 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Bienvenida al dia 20 de #JulIoT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Bienvenida al dia 20 de <strong>#JulIoT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-20-azure-iot-pi-reterminal-juliot-aea626dff562e7f273d370c4e582c212.png" width="1000" height="420" class="img_ev3q"></p><p><em>En esta serie de sesiones, mostraremos cómo crear una solución completa de Azure IoT/Digital Twin utilizando dispositivos populares como Raspberry Pi, SeeedStudio reTerminal y un ascensor real.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="azure-iot-with-a-raspberry-pi-and-reterminal">Azure IoT with a Raspberry Pi and reTerminal<a class="hash-link" href="#azure-iot-with-a-raspberry-pi-and-reterminal" title="Direct link to heading">​</a></h2><p>En esta serie de sesiones, mostraremos cómo crear una solución completa de Azure IoT/Digital Twin utilizando dispositivos populares como Raspberry Pi, SeeedStudio reTerminal y un ascensor real.</p><p>Esta serie cubrirá las siguientes sesiones:</p><ul><li><a href="#configurar-raspberry-pi-y-reterminal-como-dispositivos-azure-iot">Configurar Raspberry Pi y reTerminal como dispositivos Azure IoT</a></li><li><a href="#azure-iot-edge-y-machine-learning-%F0%9F%A7%A0-con-raspberry-pi-y-reterminal">Azure IoT Edge y Machine Learning 🧠 con Raspberry Pi y reTerminal</a></li><li><a href="#crear-una-soluci%C3%B3n-digital-twinazure-iot-para-un-elevador-%F0%9F%9B%97">Crear una solución Digital Twin/Azure IoT para un elevador 🛗</a></li></ul><p>Mostraremos el proceso paso a paso para cada uno de estos escenarios. Y compartiremos algunas opciones de implementación, para que sea posible obtener algunas ideas y salir con un plan para comenzar a crear su propia solución Azure IoT.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="configurar-raspberry-pi-y-reterminal-como-dispositivos-azure-iot">Configurar Raspberry Pi y reTerminal como dispositivos Azure IoT<a class="hash-link" href="#configurar-raspberry-pi-y-reterminal-como-dispositivos-azure-iot" title="Direct link to heading">​</a></h3><p>Vea esta transmisión en vivo el martes 26 de julio de 2022 a las 10 a.m PDT.</p><p><a href="https://www.meetup.com/microsoft-reactor-toronto/events/286475097/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504722868%2F676x380.webp&amp;w=3840&amp;q=75" alt="Registro de Meetup" class="img_ev3q"></a></p><table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-toronto/events/286475097/" target="_blank"><input type="submit" value="Registro de Meetup" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/Julio26JulIOT1" target="_blank"><input type="submit" value="Ver en YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="azure-iot-edge-y-machine-learning--con-raspberry-pi-y-reterminal">Azure IoT Edge y Machine Learning 🧠 con Raspberry Pi y reTerminal<a class="hash-link" href="#azure-iot-edge-y-machine-learning--con-raspberry-pi-y-reterminal" title="Direct link to heading">​</a></h3><p>Vea esta transmisión en vivo el jueves 28 de julio de 2022 a las 10 a.m. PDT</p><p><a href="https://www.meetup.com/microsoft-reactor-toronto/events/286474956/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504722908%2F676x380.webp&amp;w=3840&amp;q=75" alt="Registro de Meetup" class="img_ev3q"></a></p><table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-toronto/events/286474956/" target="_blank"><input type="submit" value="Registro de Meetup" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/Julio28JulIOT2" target="_blank"><input type="submit" value="Ver en YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="crear-una-solución-digital-twinazure-iot-para-un-elevador-">Crear una solución Digital Twin/Azure IoT para un elevador 🛗<a class="hash-link" href="#crear-una-solución-digital-twinazure-iot-para-un-elevador-" title="Direct link to heading">​</a></h3><p>Vea esta transmisión en vivo el viernes 29 de julio de 2022 a las 12 p.m. PDT</p><p><a href="https://www.meetup.com/microsoft-reactor-toronto/events/286474805/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504722955%2F676x380.webp&amp;w=3840&amp;q=75" alt="Registro de Meetup" class="img_ev3q"></a></p><table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-toronto/events/286474805/" target="_blank"><input type="submit" value="Registro de Meetup" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/Julio29JulIOT3" target="_blank"><input type="submit" value="Ver en YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>aiatedge</category>
        </item>
        <item>
            <title><![CDATA[20: Azure IoT with a Raspberry Pi and reTerminal]]></title>
            <link>https://JulyOT.dev/blog/20-azure-iot-pi-reterminal</link>
            <guid>20-azure-iot-pi-reterminal</guid>
            <pubDate>Wed, 20 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 20 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 20 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-20-azure-iot-pi-reterminal-c91183053807b2643d6c7e74a12415c6.png" width="1000" height="420" class="img_ev3q"></p><p><em>In this upcoming livestream series we will show how to create a complete Azure IoT / Digital Twin solution using popular devices like a Raspberry Pi, SeeedStudio reTerminal and a real elevator.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="azure-iot-with-a-raspberry-pi-and-reterminal">Azure IoT with a Raspberry Pi and reTerminal<a class="hash-link" href="#azure-iot-with-a-raspberry-pi-and-reterminal" title="Direct link to heading">​</a></h2><p>In this upcoming series we will show how to create a complete Azure IoT / Digital Twin solution using popular devices like a Raspberry Pi, SeeedStudio reTerminal and a real elevator.</p><p>This series will cover the following sessions:</p><ul><li><a href="#lets-setup-a-raspberry-pi-and-a-reterminal-as-an-azure-iot-%E2%98%81%EF%B8%8F-device">Let's setup a Raspberry Pi and a reTerminal as an Azure IoT ☁️ device</a></li><li><a href="#azure-iot-edge-and-machine-learning-%F0%9F%A7%A0-with-raspberry-pi-and-reterminal">Azure IoT Edge and Machine Learning 🧠 with Raspberry Pi and reTerminal</a></li><li><a href="#lets-create-a-digital-twin-solution-for-our-azure-iot-elevator-%F0%9F%9B%97">Let's create a Digital Twin solution for our Azure IoT Elevator 🛗</a></li></ul><p>We will show the step-by-step process for each one of these scenarios. And, we'll share a few implementation options, so you can get some ideas and walk away with a plan to start creating your own Azure IoT solution.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lets-setup-a-raspberry-pi-and-a-reterminal-as-an-azure-iot-️-device">Let's setup a Raspberry Pi and a reTerminal as an Azure IoT ☁️ device<a class="hash-link" href="#lets-setup-a-raspberry-pi-and-a-reterminal-as-an-azure-iot-️-device" title="Direct link to heading">​</a></h3><p>Catch this stream live on Monday, July 25, 2022 at 10AM Pacific Time.</p><p><a href="https://www.meetup.com/microsoft-reactor-toronto/events/286473772/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504721831%2F676x380.webp&amp;w=3840&amp;q=75" alt="Meetup registration" class="img_ev3q"></a></p><table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-toronto/events/286473772/" target="_blank"><input type="submit" value="Register on MeetUp" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/July25JulyOT1" target="_blank"><input type="submit" value="Watch on YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="azure-iot-edge-and-machine-learning--with-raspberry-pi-and-reterminal">Azure IoT Edge and Machine Learning 🧠 with Raspberry Pi and reTerminal<a class="hash-link" href="#azure-iot-edge-and-machine-learning--with-raspberry-pi-and-reterminal" title="Direct link to heading">​</a></h3><p>Catch this stream live on Wednesday, July 27, 2022 at 10AM Pacific Time.</p><p><a href="https://www.meetup.com/microsoft-reactor-toronto/events/286473800/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504721895%2F676x380.webp&amp;w=3840&amp;q=75" alt="Meetup registration" class="img_ev3q"></a></p><table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-toronto/events/286473800/" target="_blank"><input type="submit" value="Register on MeetUp" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/July27JulyOT2" target="_blank"><input type="submit" value="Watch on YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lets-create-a-digital-twin-solution-for-our-azure-iot-elevator-">Let's create a Digital Twin solution for our Azure IoT Elevator 🛗<a class="hash-link" href="#lets-create-a-digital-twin-solution-for-our-azure-iot-elevator-" title="Direct link to heading">​</a></h3><p>Catch this stream live on Friday, July 29, 2022 at 10AM Pacific Time.</p><p><a href="https://www.meetup.com/microsoft-reactor-toronto/events/286473825/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504721912%2F676x380.webp&amp;w=3840&amp;q=75" alt="Meetup registration" class="img_ev3q"></a></p><table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><form action="https://www.meetup.com/microsoft-reactor-toronto/events/286473825/" target="_blank"><input type="submit" value="Register on MeetUp" class="clean-btn button button--primary margin-left--md"></form></td><td style="border:0px;text-align:center"><form action="https://aka.ms/July29JulyOT3" target="_blank"><input type="submit" value="Watch on YouTube" class="clean-btn button button--secondary margin-left--md"></form></td></tr></tbody></table>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>aiatedge</category>
        </item>
        <item>
            <title><![CDATA[19: Powering Azure Sphere C Development with DevX]]></title>
            <link>https://JulyOT.dev/blog/julyot-day19-embedded</link>
            <guid>julyot-day19-embedded</guid>
            <pubDate>Tue, 19 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 19 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 19 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-19-sphere-devx-206c53b6b1641bb4fb181453bf7eb0f2.png" width="1000" height="420" class="img_ev3q"></p><p><em>Azure Sphere is a unique highly secure IoT platform. You focus on your solution, Azure Sphere deals with security, identity, certificates, reporting, tracking emerging attack vectors, mitigating, updating the platform, and application distribution to protect your solutions, customers, and reputations.</em></p><p>I started my Azure Sphere journey 2 years ago. I’d done plenty of embedded development, but I quickly realized there was a lot to learn about Azure Sphere. If this sounds like your journey, then do check out the “<a href="https://techcommunity.microsoft.com/t5/internet-of-things/combining-azure-sphere-iot-security-with-azure-rtos-real-time/ba-p/1992869" target="_blank" rel="noopener noreferrer">Combining Azure Sphere IoT security with Azure RTOS real-time capabilities</a>” article. There are links to the Azure Sphere developer Learning paths for IoT Hub and IoT Central.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="azure-sphere-devx">Azure Sphere DevX<a class="hash-link" href="#azure-sphere-devx" title="Direct link to heading">​</a></h2><p>Azure Sphere DevX is an Open-Source community-driven library that is based on the GitHub Azure Sphere samples and from real-life experiences building Azure Sphere applications. Community contributions are very welcome.</p><p>The DevX library accelerates your development and will help to improve your developer experience building Azure Sphere applications. The DevX library addresses many common Azure Sphere scenarios, it will help reduce the amount of code you write and improve readability and long-term application maintenance.</p><p>The DevX library addresses many common Azure Sphere scenarios including the following:</p><ol><li>Azure IoT Messaging:
Implements connection management and simplifies sending messages along with application and content properties metadata.</li><li>Azure IoT Hub Device Twins:
Handles Device Twin JSON serialization and deserialization along with a type system to validate data types received and sent.</li><li>Direct methods:
Simplifies in-bound direct methods message processing and passes direct method payload to the associated direct method handler.</li><li>Intercore messaging:
Provides a context model to simplify the passing of messages between high-level and real-time application cores.</li><li>Event timers:
Simplified API for all common Event Timer scenarios.</li><li>Deferred updates:
You focus on when you want application and OS updates to occur rather than how to defer updates.</li><li>Async events:
Async events enable you to marshal calls from one thread to another for event-driven applications.</li></ol><p><a href="https://youtu.be/rfXwEa-gMG8" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="Click to play youtube introduction to Azure Sphere DevX" src="/assets/images/youtube_cover-8200d92c21ee2611f97b74c8a0991a03.png" width="1062" height="597" class="img_ev3q"></a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get Started<a class="hash-link" href="#get-started" title="Direct link to heading">​</a></h2><p>Visit the <a href="https://github.com/Azure-Sphere-DevX/AzureSphereDevX.Examples/wiki" target="_blank" rel="noopener noreferrer">Azure Sphere DevX library Wiki</a> to learn more.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>embeddediot</category>
        </item>
        <item>
            <title><![CDATA[18: Unlimited possibilities with Azure Percept]]></title>
            <link>https://JulyOT.dev/blog/18-azure-percept-blog-posts</link>
            <guid>18-azure-percept-blog-posts</guid>
            <pubDate>Mon, 18 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 18 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 18 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-18-azure-percept-blog-posts-773be8afc102e7087211efa1310d8997.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we learn more about the solutions that are possible with Azure Percept.</em></p><h1>Unlimited possibilities with Azure Percept</h1><p>Azure Percept is a comprehensive, easy-to-use platform with added security for creating edge AI solutions. Start your proof of concept in minutes with hardware accelerators built to integrate seamlessly with Azure AI and Azure IoT services. Azure Percept works out of the box with Azure Cognitive Services, Azure Machine Learning, and other Azure services to deliver vision and audio insights in real time.</p><p>To help you learn more about the possibilities with Azure Percept, we've curated a set of blog posts to show some of the many use cases.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="intel-and-microsoft-host-azure-percept-bootcamp-to-inspire-partners-creating-edge-ai-solutions">Intel and Microsoft host Azure Percept Bootcamp to inspire partners creating Edge AI solutions<a class="hash-link" href="#intel-and-microsoft-host-azure-percept-bootcamp-to-inspire-partners-creating-edge-ai-solutions" title="Direct link to heading">​</a></h2><p>This blog post highlights some of the creative solutions and takeaways from our partners and customers designed during the recent 4-week Azure Percept Bootcamp program.</p><form action="https://techcommunity.microsoft.com/t5/internet-of-things-blog/intel-and-microsoft-host-azure-percept-bootcamp-to-inspire/ba-p/3272166" target="_blank"><input type="submit" value="Take me to the blog post on the Microsoft IoT TechCommunity" class="clean-btn button button--primary margin-left--md"><input type="hidden" name="wt.mc_id" value="eventspg_16482_webpage_reactor"></form><h2 class="anchor anchorWithStickyNavbar_LWe7" id="solve-common-challenges-with-azure-percept-inspirations-from-microsoft-hackathon">Solve common challenges with Azure Percept: Inspirations from Microsoft Hackathon<a class="hash-link" href="#solve-common-challenges-with-azure-percept-inspirations-from-microsoft-hackathon" title="Direct link to heading">​</a></h2><p>In the Microsoft Hackathon, Microsoft employees completed numerous hacks with Azure Percept and brainstormed ways to create solutions for real-world challenges ranging from pedestrian safety to supply-chain efficiency. They used the Azure Percept development kit's built-in hardware accelerators, which integrate seamlessly with Azure AI and Azure IoT services, to experiment with what's possible. This blog posts shows a few of these real-world solutions that target uses cases across five different verticals: transportation, healthcare, telecommunications, AI for good, and public safety.</p><form action="https://techcommunity.microsoft.com/t5/internet-of-things-blog/solve-common-challenges-with-azure-percept-inspirations-from/ba-p/3039450" target="_blank"><input type="submit" value="Take me to the blog post on the Microsoft IoT TechCommunity" class="clean-btn button button--primary margin-left--md"><input type="hidden" name="wt.mc_id" value="eventspg_16482_webpage_reactor"></form><h2 class="anchor anchorWithStickyNavbar_LWe7" id="discover-the-possibilities-with-azure-percept">Discover the possibilities with Azure Percept<a class="hash-link" href="#discover-the-possibilities-with-azure-percept" title="Direct link to heading">​</a></h2><p>This blog post explores some ingenious solutions that are driving value across manufacturing, retail, smart cities, smart buildings, and transportation. It also sharse some step-by-step projects and other resources to help you get started with Azure Percept.</p><form action="https://techcommunity.microsoft.com/t5/internet-of-things-blog/discover-the-possibilities-with-azure-percept/ba-p/2733947" target="_blank"><input type="submit" value="Take me to the blog post on the Microsoft IoT TechCommunity" class="clean-btn button button--primary margin-left--md"><input type="hidden" name="wt.mc_id" value="eventspg_16482_webpage_reactor"></form>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>aiatedge</category>
        </item>
        <item>
            <title><![CDATA[16: IoT Device Selection List for Prototyping]]></title>
            <link>https://JulyOT.dev/blog/16-iot-devices-for-prototyping</link>
            <guid>16-iot-devices-for-prototyping</guid>
            <pubDate>Sat, 16 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 16 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 16 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-16-iot-devices-for-prototyping-b8b930a1ea1f3ab3c626ec1accb8c796.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we share a list of IoT devices for prototyping your IoT application.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-devices-for-prototyping">IoT devices for prototyping<a class="hash-link" href="#iot-devices-for-prototyping" title="Direct link to heading">​</a></h2><p>The MakeIt team at Microsoft is there to support the maker community, helping you to get your makes and prototypes built quicker with the best in class tools you need.</p><p>One way we are helping makers is sharing a list of IoT devices for prototyping your IoT application. This list aims to give partners a starting point with IoT hardware to build prototypes and proof-of-concepts quickly and easily.</p><p>This list is in an Excel spreadsheet, and is available from the <a href="https://github.com/microsoft/MakerCommunityResources" target="_blank" rel="noopener noreferrer">Microsoft Maker Community Resources repo on GitHub</a>.</p><form action="https://github.com/microsoft/MakerCommunityResources/raw/main/IoT/IoT%20Device%20Selection%20List%20for%20Prototyping.xlsx" target="_blank"><input type="submit" value="Download the list from GitHub" class="clean-btn button button--primary margin-left--md"></form>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
        </item>
        <item>
            <title><![CDATA[15: IoT for Beginners lesson 3!]]></title>
            <link>https://JulyOT.dev/blog/15-julyot-iot-beginners</link>
            <guid>15-julyot-iot-beginners</guid>
            <pubDate>Fri, 15 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 15 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 15 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-15-iot-beginners-a901f8674ef0cc83f9a3365b733d1995.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we live stream lesson 3 of IoT for Beginners - interact with the physical world with sensors and actuators.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-for-beginners">IoT For Beginners<a class="hash-link" href="#iot-for-beginners" title="Direct link to heading">​</a></h2><p><a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for beginners</a> is a free, open source, 24-lesson IoT curriculum. The second lesson is live-streamed today from the Microsoft Reactor. Catch the recording on the Microsoft Reactor YouTube channel.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/v3d1ZhlmuSE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Learn more about IoT for Beginners on the official <a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for Beginners GitHub repo</a>.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
        </item>
        <item>
            <title><![CDATA[15: .NET nanoFramework networking and Azure]]></title>
            <link>https://JulyOT.dev/blog/15-nano-framework</link>
            <guid>15-nano-framework</guid>
            <pubDate>Fri, 15 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 15 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 15 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-15-nanoframework-421c49d0c1596d498b07483ef6b74ef2.png" width="1000" height="420" class="img_ev3q"></p><h1>Networking and Azure</h1><p>.NET nanoFramework offers native secure network capabilities. The capabilities may differ depending on the MCU and associated hardware but if there is an ethernet adaptor or a Wi-Fi module, except if they are extremely exotic, they'll be supported! For example, the ESP32 supports secure Wi-Fi connectivity, all certificates to authenticate servers and devices are supported making the connection secure from end to end using the underlying TLS/SSL.</p><p>Watch the <a href="https://www.youtube.com/watch?v=pxXgU3XcRr4" target="_blank" rel="noopener noreferrer">Connect to Azure IoT</a> "IoT Show" episode to learn more about creating secure connections.</p><p><a href="https://youtube.com/watch?v=pxXgU3XcRr4" target="_blank" rel="noopener noreferrer" title="Connect to Azure IoT video"><img loading="lazy" src="https://img.youtube.com/vi/pxXgU3XcRr4/0.jpg" alt="Connect to Azure IoT video" class="img_ev3q"></a></p><p>Connecting to Azure IoT is easy with library support for Device Provisioning Services (DPS), SAS token and certificate authentication, Cloud to Device (C2D) messages, Device to Cloud (D2C) messages, remote function calls, twins, for clients and modules! There is also full support for <a href="https://github.com/nanoframework/nanoFramework.Azure.Devices" target="_blank" rel="noopener noreferrer">IoT Plug &amp; Play</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="announcing-the-first-net-nanoframework-azure-certified-device">Announcing the first .NET nanoFramework Azure Certified Device<a class="hash-link" href="#announcing-the-first-net-nanoframework-azure-certified-device" title="Direct link to heading">​</a></h2><p>In May 2022, the PalThree device from OrgPal based on an STM32F7 MCU is the first <a href="https://www.nanoframework.net/palthree-board-becomes-azure-certified-device/" target="_blank" rel="noopener noreferrer">Azure Certified Device running .NET nanoFramework</a> to be approved. This device is also IoT Plug and Play certified. The .NET nanoFramework is ready for production.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="net-nanoframework-communications-capabilities">.NET nanoFramework communications capabilities<a class="hash-link" href="#net-nanoframework-communications-capabilities" title="Direct link to heading">​</a></h2><p>The .NET nanoFramework supports a wide range of communicators protocols including:</p><ol><li>TLS,</li><li>HTTPS,</li><li>.NET nanoFramework WebServer,</li><li>WebSockets,</li><li>SignalR,</li><li>MQTT, including support for MQTT v5.0,</li><li><a href="https://github.com/nanoframework/amqpnetlite" target="_blank" rel="noopener noreferrer">AMQP</a>,</li><li><a href="https://github.com/nanoframework/System.Net.Sockets.TcpClient" target="_blank" rel="noopener noreferrer">TcpClient</a>,</li><li>and <a href="https://github.com/nanoframework/System.Net.Sockets.UdpClient" target="_blank" rel="noopener noreferrer">UdpClient</a>.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tls-and-https">TLS and HTTPS<a class="hash-link" href="#tls-and-https" title="Direct link to heading">​</a></h2><p>TLS and secure HTTP is supported. You will find examples in the <a href="https://github.com/nanoframework/Samples/tree/main/samples/HTTP" target="_blank" rel="noopener noreferrer">sample repository</a>. The samples demonstrate how to use <code>WebRequest</code>, <code>HttpListener</code> as well as how to make low-level REST calls to Azure services.</p><p>HttpClient is fully implemented and is a very convenient way to call REST services.  HttpClient works just like the full .NET implementation. You'll find the source in the .NET nanoFramework <a href="https://github.com/nanoframework/System.Net.Http" target="_blank" rel="noopener noreferrer">System.Net.Http</a> repository.</p><p>To use <code>HttpClient</code>, create the HttpClient object and then perform calls. Note that <code>HttpClient</code> is meant to be reused throughout the application lifecycle. There is no need to create a new instance every time a call has to be performed. Like this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static readonly HttpClient _httpClient = new HttpClient();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>To pass the CA root certificate to validate the secure server certificate. The CA root cert can also come from a binary file or text file from a resource.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">_httpClient.HttpsAuthentCert = new X509Certificate(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@"-----BEGIN CERTIFICATE-----</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">U3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">X9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">K4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">zt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">L7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">eruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">xy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----END CERTIFICATE-----");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It's possible to add HTTP headers that will be sent with each request.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">_httpClient.DefaultRequestHeaders.Add("x-ms-blob-type", "BlockBlob");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="perform-an-http-get-request">Perform an HTTP GET request<a class="hash-link" href="#perform-an-http-get-request" title="Direct link to heading">​</a></h3><p>Here's a example of a HTTP request to read some content as a string:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HttpResponseMessage response = _httpClient.Get("https://httpbin.org/get");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">response.EnsureSuccessStatusCode();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var responseBody = response.Content.ReadAsString();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The above call would return something similar to the following, which can be output in Visual Studio by calling <code>Debug.WriteLine(responseBody)</code>:</p><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "args": {},</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "headers": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "Host": "httpbin.org",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "X-Amzn-Trace-Id": "Root=1-6214aad3-38e5f8357bdf90530300eb5f",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "X-Ms-Blob-Type": "BlockBlob"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "origin": "5.249.47.208",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "url": "https://httpbin.org/get"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note the call to <code>response.EnsureSuccessStatusCode();</code>. This will throw an <code>HttpRequestException</code> in case the status code from the HTTP request is not a successful one.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="perform-an-http-post-request">Perform an HTTP POST request<a class="hash-link" href="#perform-an-http-post-request" title="Direct link to heading">​</a></h3><p>Following is an example of an HTTP request performing a POST request to send some JSON content to an endpoint.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var content = new StringContent("{\"someProperty\":\"someValue\"}", Encoding.UTF8, "application/json");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var result = _httpClient.Post("https://httpbin.org/anything", content);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">result.EnsureSuccessStatusCode();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Worth noting that the JSON content above it's presented as a simple string to simplify the code. There is a <a href="https://github.com/nanoframework/nanoFramework.Json" target="_blank" rel="noopener noreferrer">json library</a> available to help with serializing and deserializing from/to C# classes, even the most complex ones.</p><p>Note the call to <code>response.EnsureSuccessStatusCode();</code> to make sure the HTTP request was successfully performed.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="download-binary-content-to-a-file">Download binary content to a file<a class="hash-link" href="#download-binary-content-to-a-file" title="Direct link to heading">​</a></h3><p>Using <code>HttpClient</code> makes it easy to deal with binary content. The following is an example of how to download a file from a web server.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HttpResponseMessage response = _httpClient.Get("https://storage-on-the-cloud.net/file-with-binary-content");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">response.EnsureSuccessStatusCode();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">using FileStream fs = new FileStream($"I:\\i-am-a-binary-file.bin", FileMode.Create, FileAccess.Write);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">response.Content.ReadAsStream().CopyTo(fs);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="debugging-through-a-reverse-proxy">Debugging through a reverse proxy<a class="hash-link" href="#debugging-through-a-reverse-proxy" title="Direct link to heading">​</a></h3><p>When code is deployed to an MCU it might be desirable to let the device connect to your development machine running IIS Express. This can be achieved with a proxy such as <a href="https://www.npmjs.com/package/iisexpress-proxy" target="_blank" rel="noopener noreferrer">iisexpress-proxy</a>.</p><p>Be aware that this leads to SocketExceptions with the current version of <strong>nanoFramework</strong> System.Net.Http when sending consecutive requests to your development machine. A simple retry mechanism in Debug mode will get around this.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="webserver-almost-like-full-aspnet">WebServer: almost like full ASP.NET<a class="hash-link" href="#webserver-almost-like-full-aspnet" title="Direct link to heading">​</a></h2><p>The title is correct, we kept the core ideas of the full ASP.NET framework. We shrink everything possible, but kept the controller, security authentication, and attribute decoration concepts. You'll find the source in the .NET nanoFramework <a href="https://github.com/nanoframework/nanoFramework.WebServer" target="_blank" rel="noopener noreferrer">WebServer</a> repository. Features include:</p><ul><li>Handling multi-thread requests</li><li>Serve static files on any storage</li><li>Handle parameters in URL</li><li>Multiple WebServer running at the same time</li><li>Supports GET/PUT</li><li>Supports content in POST</li><li>Supports any type of header</li><li>Reflection for easy usage of controllers and routes</li><li>Helpers to return error codes</li><li>HTTPS support</li><li><a href="https://github.com/nanoframework/lib-nanoFramework.System.Net.Http/blob/develop/nanoFramework.System.Net.Http/Http/System.Net.HttpUtility.cs" target="_blank" rel="noopener noreferrer">URL decode/encode</a></li></ul><p>The main limitations are:</p><ul><li>No zip support for request or response streams</li><li>No built-in dependency injection. This is coming and in private preview for the moment</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="usage">Usage<a class="hash-link" href="#usage" title="Direct link to heading">​</a></h3><p>Specify a port, a timeout for the queries, and add an event handler for incoming requests.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">using (WebServer server = new WebServer(80, HttpProtocol.Http)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Add a handler for commands that are received by the server.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.CommandReceived += ServerCommandReceived;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Start the server.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.Start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Thread.Sleep(Timeout.Infinite);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You can also pass a controller and routes and method decoration is supported.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">using (WebServer server = new WebServer(80, HttpProtocol.Http, new Type[] { typeof(ControllerPerson), typeof(ControllerTest) }))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Start the server.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.Start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Thread.Sleep(Timeout.Infinite);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this case, you're passing 2 classes where you have public methods decorated which will be called every time the route is found.</p><p>With the previous example, a straightforward Test controller will look like that:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class ControllerTest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [Route("test"), Route("Test2"), Route("test42"), Route("TEST")]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [CaseSensitive]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [Method("GET")]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void RoutePostTest(WebServerEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        string route = $"The route asked is {e.Context.Request.RawUrl.TrimStart('/').Split('/')[0]}";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        e.Context.Response.ContentType = "text/plain";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        WebServer.OutPutStream(e.Context.Response, route);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [Route("test/any")]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void RouteAnyTest(WebServerEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        WebServer.OutputHttpCode(e.Context.Response, HttpStatusCode.OK);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this example, the <code>RoutePostTest</code> routes are case sensitive as the routes are decorated with <!-- -->[CaseSensitive]<!-- -->. GET requests to routes <code>test</code>, <code>Test2</code>, <code>test42</code>, or <code>TEST</code> will succeed. A GET request to <code>Test</code> would fail. GET parameters are also supported.</p><p>The <code>RouteAnyTest</code>is called whenever the URL <code>test/any</code> is requested no matter what method is used.</p><p>There is a more advanced example with a simple REST API to get a list of Person and add a Person. Check it in the <a href="https://github.com/nanoframework/Samples/blob/main/samples/Webserver/WebServer.Sample/ControllerPerson.cs" target="_blank" rel="noopener noreferrer">sample</a>.</p><blockquote><p><strong>Important</strong>:</p><ul><li>By default, the routes are not case sensitive and the attribute <strong>must</strong> be lowercase</li><li>If you want to use case-sensitive routes like in the previous example, use the attribute <code>CaseSensitive</code>. As in the previous example, you <strong>must</strong> write the route as you want it to be responded to.</li></ul></blockquote><p>And you can pass default credentials to the server:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">using (WebServer server = new WebServer(80, HttpProtocol.Http, new Type[] { typeof(ControllerPerson), typeof(ControllerTest), typeof(ControllerAuth) }))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // To test authentication with various scenarios</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.ApiKey = "ATopSecretAPIKey1234";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.Credential = new NetworkCredential("topuser", "topPassword");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Start the server.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.Start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Thread.Sleep(Timeout.Infinite);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="managing-incoming-queries-thru-events">Managing incoming queries thru events<a class="hash-link" href="#managing-incoming-queries-thru-events" title="Direct link to heading">​</a></h3><p>Very basic usage is the following:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">private static void ServerCommandReceived(object source, WebServerEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var url = e.Context.Request.RawUrl;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Command received: {url}, Method: {e.Context.Request.HttpMethod}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (url.ToLower() == "/sayhello")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // This is simple raw text returned</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        WebServer.OutPutStream(e.Context.Response, "It's working, url is empty, this is just raw text, /sayhello is just returning a raw text");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        WebServer.OutputHttpCode(e.Context.Response, HttpStatusCode.NotFound);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You can do more advance scenario like returning a full HTML page:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">WebServer.OutPutStream(e.Context.Response, "&lt;html&gt;&lt;head&gt;" +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "&lt;title&gt;Hi from nanoFramework Server&lt;/title&gt;&lt;/head&gt;&lt;body&gt;You want me to say hello in a real HTML page!&lt;br/&gt;&lt;a href='/useinternal'&gt;Generate an internal text.txt file&lt;/a&gt;&lt;br /&gt;" +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "&lt;a href='/Text.txt'&gt;Download the Text.txt file&lt;/a&gt;&lt;br&gt;" +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "Try this url with parameters: &lt;a href='/param.htm?param1=42&amp;second=24&amp;NAme=Ellerbach'&gt;/param.htm?param1=42&amp;second=24&amp;NAme=Ellerbach&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And can get parameters from a URL a an example from the previous link on the param.html page:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if (url.ToLower().IndexOf("/param.htm") == 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Test with parameters</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var parameters = WebServer.decryptParam(url);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    string toOutput = "&lt;html&gt;&lt;head&gt;" +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "&lt;title&gt;Hi from nanoFramework Server&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Here are the parameters of this URL: &lt;br /&gt;";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foreach (var par in parameters)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        toOutput += $"Parameter name: {par.Name}, Value: {par.Value}&lt;br /&gt;";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    toOutput += "&lt;/body&gt;&lt;/html&gt;";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    WebServer.OutPutStream(e.Context.Response, toOutput);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And server static files:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var files = storage.GetFiles();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">foreach (var file in files)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (file.Name == url)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        WebServer.SendFileOverHTTP(e.Context.Response, file);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WebServer.OutputHttpCode(e.Context.Response, HttpStatusCode.NotFound);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And also <strong>REST API</strong> is supported, here is a comprehensive example:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if (url.ToLower().IndexOf("/api/") == 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    string ret = $"Your request type is: {e.Context.Request.HttpMethod}\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret += $"The request URL is: {e.Context.Request.RawUrl}\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var parameters = WebServer.DecodeParam(e.Context.Request.RawUrl);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (parameters != null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret += "List of url parameters:\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        foreach (var param in parameters)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ret += $"  Parameter name: {param.Name}, value: {param.Value}\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (e.Context.Request.Headers != null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret += $"Number of headers: {e.Context.Request.Headers.Count}\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret += "There is no header in this request\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foreach (var head in e.Context.Request.Headers?.AllKeys)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret += $"  Header name: {head}, Values:";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var vals = e.Context.Request.Headers.GetValues(head);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        foreach (var val in vals)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ret += $"{val} ";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret += "\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (e.Context.Request.ContentLength64 &gt; 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret += $"Size of content: {e.Context.Request.ContentLength64}\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        byte[] buff = new byte[e.Context.Request.ContentLength64];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        e.Context.Request.InputStream.Read(buff, 0, buff.Length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret += $"Hex string representation:\r\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (int i = 0; i &lt; buff.Length; i++)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ret += buff[i].ToString("X") + " ";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    WebServer.OutPutStream(e.Context.Response, ret);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This example is basic, but demonstrates how to access the HTTP method, the URL, URL parameters, content payload, and the controller called.</p><p>And more information, check <a href="https://github.com/nanoframework/Samples/tree/main/samples/Webserver" target="_blank" rel="noopener noreferrer">the complete example</a> for more about this WebServer!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-https">Using HTTPS<a class="hash-link" href="#using-https" title="Direct link to heading">​</a></h2><p>You will need to generate a certificate and keys:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">X509Certificate _myWebServerCertificate509 = new X509Certificate2(_myWebServerCrt, _myWebServerPrivateKey, "1234");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// X509 RSA key PEM format 2048 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // generate with openssl:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // &gt; openssl req -newkey rsa:2048 -nodes -keyout selfcert.key -x509 -days 365 -out selfcert.crt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // and paste selfcert.crt content below:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private const string _myWebServerCrt =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@"-----BEGIN CERTIFICATE-----</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MORETEXT</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----END CERTIFICATE-----";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // this one is generated with the command below. We need a password.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // &gt; openssl rsa -des3 -in selfcert.key -out selfcertenc.key</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // the one below was encoded with '1234' as the password.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private const string _myWebServerPrivateKey =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@"-----BEGIN RSA PRIVATE KEY-----</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MORETEXTANDENCRYPTED</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----END RSA PRIVATE KEY-----";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">using (WebServer server = new WebServer(443, HttpProtocol.Https)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Add a handler for commands that are received by the server.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.CommandReceived += ServerCommandReceived;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.HttpsCert = _myWebServerCertificate509;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.SslProtocols = System.Net.Security.SslProtocols.Tls | System.Net.Security.SslProtocols.Tls11 | System.Net.Security.SslProtocols.Tls12;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Start the server.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.Start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Thread.Sleep(Timeout.Infinite);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>IMPORTANT: because the certificate above is not issued by a Certificate Authority it won't be recognized as a valid certificate. If you want to access the nanoFramework device with your browser, for example, you'll have to add the (CRT file)<!-- -->[WebServer.Sample\webserver-cert.crt]<!-- --> as a trusted one. On Windows, you just have to double click on the CRT file and then click "Install Certificate...".</p></blockquote><p>You can use an event or controller or both. Anything that has been explained before without HTTPS will also work with HTTPS.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mqtt-loves-net-nanoframework">MQTT loves .NET nanoFramework<a class="hash-link" href="#mqtt-loves-net-nanoframework" title="Direct link to heading">​</a></h2><p>There is support for an MQTT client in .NET nanoFramework. You'll find the source in the .NET nanoFramework <a href="https://github.com/nanoframework/nanoFramework.m2mqtt" target="_blank" rel="noopener noreferrer">MQTT</a> repository. The usage is the same whatever version is used, 3.1, 3.1.1, and 5.0 are supported. There are differences between v3.1.1 and v5.0. Version 5.0 brings more control and additional properties. For convenience, V5.0 properties are shown from Intellisense as <code>v5.0 only</code>. If you try to use v5.0 properties with the v3.1 or v3.1.1 protocols, they'll be ignored.</p><p>Here is a basic example of creating a v3.1.1 server and connecting to it:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MqttClient mqtt = new MqttClient("test.mosquitto.org", 8883, true, new X509Certificate(CertMosquitto), null, MqttSslProtocols.TLSv1_2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var ret = mqtt.Connect("nanoTestDevice", true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (ret != MqttReasonCode.Success)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"ERROR connecting: {ret}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mqtt.Disconnect();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>For the v5.0, you just need to specify the version before the connection:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MqttClient mqtt = new MqttClient("test.mosquitto.org", 8883, true, new X509Certificate(CertMosquitto), null, MqttSslProtocols.TLSv1_2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.ProtocolVersion = MqttProtocolVersion.Version_5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var ret = mqtt.Connect("nanoTestDevice", true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (ret != MqttReasonCode.Success)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"ERROR connecting: {ret}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mqtt.Disconnect();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note: in both examples, a specific certificate is needed to connect to the Mosquitto server. You will find it in the <a href="https://github.com/nanoframework/nanoFramework.m2mqtt/tree/main/TestMqtt/TestAppv5.0" target="_blank" rel="noopener noreferrer">sample</a>. The v5.0 flow for authentication may be more complex and <a href="https://github.com/nanoframework/nanoFramework.m2mqtt#v50-specific-authentication-flow" target="_blank" rel="noopener noreferrer">is supported as well</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="subscribing-to-events">Subscribing to events<a class="hash-link" href="#subscribing-to-events" title="Direct link to heading">​</a></h3><p>The MqttClient supports subscribing to events. For example, you can get additional information when a connection is opened with the v5.0 protocol. The example below shows how to connect to Azure IoT Hub over MQTT v5.0.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// Create the client</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MqttClient mqtt = new MqttClient(IoTHub, 8883, true, new X509Certificate(CertAzure), null, MqttSslProtocols.TLSv1_2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Setup the version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.ProtocolVersion = MqttProtocolVersion.Version_5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Register to events</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.ConnectionOpened += MqttConnectionOpened;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You can add additional properties</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var at = DateTime.UtcNow;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var atString = (at.ToUnixTimeSeconds() * 1000).ToString();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var expiry = at.AddMinutes(40);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var expiryString = (expiry.ToUnixTimeSeconds() * 1000).ToString();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string toSign = $"{IoTHub}\n{DeviceID}\n\n{atString}\n{expiryString}\n";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var hmac = new HMACSHA256(Convert.FromBase64String(Sas));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var sas = hmac.ComputeHash(Encoding.UTF8.GetBytes(toSign));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.AuthenticationMethod = "SAS";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.AuthenticationData = sas;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.UserProperties.Add(new UserProperty("sas-at", atString));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.UserProperties.Add(new UserProperty("sas-expiry", expiryString));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.UserProperties.Add(new UserProperty("api-version", "2020-10-01-preview"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.UserProperties.Add(new UserProperty("host", IoTHub));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var ret = mqtt.Connect(DeviceID, null, null, false, MqttQoSLevel.AtLeastOnce, false, null, null, true, 60);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You will have more code here</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">private static void MqttConnectionOpened(object sender, ConnectionOpenedEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Connection open");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  ClientID: {((MqttClient)sender).ClientId}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Assigned client id: {e.Message.AssignedClientIdentifier}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (e.Message.AuthenticationData != null) Debug.WriteLine($"  Auth data length: {e.Message.AuthenticationData.Length}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Auth method: {e.Message.AuthenticationMethod}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Dup flag: {e.Message.DupFlag}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Max packet size: {e.Message.MaximumPacketSize}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Max QoS: {e.Message.MaximumQoS}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Msg ID: {e.Message.MessageId}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Qos level: {e.Message.QosLevel}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Reason: {e.Message.Reason}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Receive max: {e.Message.ReceiveMaximum}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Rep info: {e.Message.ResponseInformation}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Retain: {e.Message.Retain}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Retain available: {e.Message.RetainAvailable}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Return code: {e.Message.ReturnCode}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Server keep alive: {e.Message.ServerKeepAlive}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Server ref: {e.Message.ServerReference}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Session exp inter: {e.Message.SessionExpiryInterval}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Session present: {e.Message.SessionPresent}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Shared subs available: {e.Message.SharedSubscriptionAvailable}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Shared identifier available: {e.Message.SubscriptionIdentifiersAvailable}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Topic alias max: {e.Message.TopicAliasMaximum}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Num user props: {e.Message.UserProperties.Count}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foreach (UserProperty prop in e.Message.UserProperties)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Debug.WriteLine($"    Key  : {prop.Name}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Debug.WriteLine($"    Value: {prop.Value}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"  Wildcard available: {e.Message.WildcardSubscriptionAvailable}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a class="hash-link" href="#example" title="Direct link to heading">​</a></h3><p>The M2Mqtt library provides the main class <code>MqttClient</code> that represents the MQTT client to connect to a broker. You can connect to the broker by providing its IP address or hostname and optionally some parameters related to MQTT protocol.</p><p>After connecting to the broker, use the <code>Publish()</code> method to publish a message to a topic and <code>Subscribe()</code> method to subscribe to a topic and receive messages published on it.</p><p>The <code>MqttClient</code> class is event-based, you receive an event when a message is published to a topic you subscribed to. You can receive events when message publishing is complete, and when subscribing or unsubscribing to topics.</p><p>Following is an example of client subscribing to a topic:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">string MQTT_BROKER_ADDRESS = "192.168.1.2";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// create client instance</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MqttClient client = new MqttClient(IPAddress.Parse(MQTT_BROKER_ADDRESS));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// register to message received</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">client.MqttMsgPublishReceived += client_MqttMsgPublishReceived;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string clientId = Guid.NewGuid().ToString();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">client.Connect(clientId);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// subscribe to the topic "/home/temperature" with QoS 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">client.Subscribe(new string[] { "/home/temperature" }, new MqttQoSLevel[] { MqttMsgBase.ExactlyOnce });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You can add some code here</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">static void client_MqttMsgPublishReceived(object sender, MqttMsgPublishEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// handle message received</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Following an example of client publisher to a topic :</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">string MQTT_BROKER_ADDRESS = "192.168.1.2";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// create client instance</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MqttClient client = new MqttClient(IPAddress.Parse(MQTT_BROKER_ADDRESS));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string clientId = Guid.NewGuid().ToString();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">client.Connect(clientId);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string strValue = Convert.ToString(value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// publish a message on "/home/temperature" topic with QoS 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">client.Publish("/home/temperature", Encoding.UTF8.GetBytes(strValue), MqttQoSLevel.ExactlyOnce, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// More code goes here</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="avoiding-certificate-check">Avoiding certificate check<a class="hash-link" href="#avoiding-certificate-check" title="Direct link to heading">​</a></h3><p>In some cases, it can be handy to avoid the certificate checks when connecting over a TLS connection. While this scenario is <strong>not</strong> recommended, you can adjust for it like this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// You can specify no certificate at all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MqttClient mqtt = new MqttClient(IoTHub, 8883, true, null, null, MqttSslProtocols.TLSv1_2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// And you have to setup the ValidateServerCertificate to false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mqtt.Settings.ValidateServerCertificate = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string clientId = Guid.NewGuid().ToString();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">client.Connect(clientId);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="websockets-and-signalr">WebSockets and SignalR<a class="hash-link" href="#websockets-and-signalr" title="Direct link to heading">​</a></h2><p>WebSockets and SignalR are supported. We do have a set of sample packs for all of them. </p><p>WebSockets can be used as a client, a server, or both at the same time. You'll find the source in the .NET nanoFramework <a href="https://github.com/nanoframework/System.Net.WebSockets" target="_blank" rel="noopener noreferrer">WebSockets</a> and <a href="https://github.com/nanoframework/nanoFramework.SignalR.Client" target="_blank" rel="noopener noreferrer">SignalR</a> repositories.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="websockets-server-sample">WebSockets Server Sample<a class="hash-link" href="#websockets-server-sample" title="Direct link to heading">​</a></h3><p><a href="https://github.com/nanoframework/Samples/tree/main/samples/WebSockets/WebSockets.Server.RgbSample" target="_blank" rel="noopener noreferrer">Server.RgbSample</a> shows how to use WebSocket Server with a WebServer hosting a WebApp that controls the RGB led on an Atom Lite ESP32.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="websockets-client-sample">WebSockets Client Sample<a class="hash-link" href="#websockets-client-sample" title="Direct link to heading">​</a></h3><p><a href="https://github.com/nanoframework/Samples/tree/main/samples/WebSockets/Websockets.ServerClient.Sample" target="_blank" rel="noopener noreferrer">Client.Sample</a> shows how to use the WebSocket Client.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="websockets-server-and-client-sample">WebSockets Server and Client sample<a class="hash-link" href="#websockets-server-and-client-sample" title="Direct link to heading">​</a></h3><p><a href="https://github.com/nanoframework/Samples/tree/main/samples/WebSockets/Websockets.ServerClient.Sample" target="_blank" rel="noopener noreferrer">ServerClient.Sample</a> shows how to configure and start a WebSocket Server and (SSL) Client.</p><p>The SignalR Client library enables you to connect your .net nanoFramework device to a SignalR Hub.  SignalR is part of the ASP.NET Framework that makes it easy to create web applications that update in real-time. For IoT apps, SignalR can be used to create a web app to display a live graph of connected smart meters, or perhaps control a robot arm.</p><p>Important: You must be connected to a network with a valid IP address. Please check the examples with the Network Helpers on how to set this up.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="connecting-to-a-signalr-hub">Connecting to a SignalR hub<a class="hash-link" href="#connecting-to-a-signalr-hub" title="Direct link to heading">​</a></h3><p>Create a <code>HubConnection</code> client to establish a connection to a SignalR hub. You have to set the hub URL upon initialization of the HubConnection. You can also set custom headers by adding <code>ClientWebsocketHeaders</code> and set extra options by adding <code>HubConnectionOptions</code> upon initialization. The options are mainly used to change the settings of the underlying WebSocket and to set extra SSL options.
Start the connection by calling <code>Start</code>.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">using System;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">using System.Diagnostics;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">using System.Threading;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">using nanoFramework.SignalR.Client;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">namespace NFSignalrTestClient</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public class Program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public static void Main()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            //setup connection</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            var options = new HubConnectionOptions() { Reconnect = true };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            HubConnection hubConnection = new HubConnection("http://YourSignalrTestServer/testhub", options: options);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            hubConnection.Closed += HubConnection_Closed;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            hubConnection.On("ReceiveMessage", new Type[] { typeof(string), typeof(string) }, (sender, args) =&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                var name = (string)args[0];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                var message = (string)args[1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Console.WriteLine($"{name} : {message}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            //start connection</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            hubConnection.Start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            AsyncResult dashboardClientConnected = hubConnection.InvokeCoreAsync("AwaitCientConnected", typeof(bool), new object[] { }, -1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int seconds = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            while (!dashboardClientConnected.Completed)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Debug.WriteLine($"Waited {seconds} for client to open webapp");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                seconds++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Thread.Sleep(1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if ((bool)dashboardClientConnected.Value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                hubConnection.SendCore("ReportStatus", new object[] { "Client Connected" });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                int count = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                while (hubConnection.State == HubConnectionState.Connected)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    hubConnection.InvokeCore("SendMessage", null, new object[] { count, "this is a control message" });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    count++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    Thread.Sleep(1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                hubConnection.Stop("client failed to connect");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private static void HubConnection_Closed(object sender, SignalrEventMessageArgs message)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Debug.WriteLine($"closed received with message: {message.Message}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="handling-lost-signalr-connections">Handling lost SignalR connections<a class="hash-link" href="#handling-lost-signalr-connections" title="Direct link to heading">​</a></h3><p>Use retry policies to handle lost connections to a SignalR hub. To get the connection state, create an AsyncResult object and call methods to check the connection state.</p><p>The <code>AsyncResult</code> monitors the return message of the hub method. Upon completion, <code>Completed</code> will be true. Upon completion, the <code>Value</code> will hold the return object that needs to be cast to the right type. Calling <code>Value</code> before completion will result in the awaiting of the server return. If an error occurs, <code>Error</code> will be true and the error message will be inside <code>ErrorMessage</code>.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">AsyncResult dashboardClientConnected = hubConnection.InvokeCoreAsync("AwaitCientConnected", typeof(bool), new object[] { }, -1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int seconds = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">while (!dashboardClientConnected.Completed)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Waited {seconds} for client to open webapp");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    seconds++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Thread.Sleep(1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if ((bool)dashboardClientConnected.Value)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine("The client connected to the dashboard, start sending live data");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="call-client-methods-from-a-signalr-hub">Call client methods from a Signalr hub<a class="hash-link" href="#call-client-methods-from-a-signalr-hub" title="Direct link to heading">​</a></h3><p>Define the method the hub calls using connection.On after building, but before starting the connection.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">connection.On&lt;string, string&gt;("ReceiveMessage", (sender, args) =&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var name = args[0] as string;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var message = args[1] as string;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"{name} : {message}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The preceding code in connection.On runs when server-side code calls it using the SendAsync method.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public async Task SendMessage(string user, string message)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    await Clients.All.SendAsync("ReceiveMessage", user, message);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="azure-library-all-you-need-is-there">Azure library: all you need is there!<a class="hash-link" href="#azure-library-all-you-need-is-there" title="Direct link to heading">​</a></h2><p>You'll find the source in the .NET nanoFramework <a href="https://github.com/nanoframework/nanoFramework.Azure.Devices" target="_blank" rel="noopener noreferrer">Azure IoT library</a> repository.</p><p><strong>Important</strong>: You <strong>must</strong> be connected to a network with a valid IP address and date/time. Check the Network Helpers examples for information on IP addresses and syncing date and time.</p><p>The .NET nanoFramework Azure IoT Hub library uses the MQTT protocol. You need to ensure you can connect to port 8883 using TLS protocol. If you are connected to an enterprise network, this may be blocked. In most cases, this is not an issue.</p><p>To aid portability, the .NET nanoFramework Azure IoT Hub library aims to match the namespaces, class, and method names found in the full .NET C# Azure IoT SDK.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="certificates">Certificates<a class="hash-link" href="#certificates" title="Direct link to heading">​</a></h3><p>There are two options to provide an Azure IoT TLS certificate:</p><ul><li>Parse it <a href="https://github.com/nanoframework/nanoFramework.Azure.Devices/blob/main/README.md#through-the-constructor" target="_blank" rel="noopener noreferrer">into the constructor</a></li><li>Store it <a href="https://github.com/nanoframework/nanoFramework.Azure.Devices/blob/main/README.md#storing-the-certificate-on-the-device" target="_blank" rel="noopener noreferrer">on the device</a></li></ul><p>The <a href="https://github.com/nanoframework/nanoFramework.Azure.Devices/tree/main/AzureCertificates" target="_blank" rel="noopener noreferrer">AzureCertificates</a> contains, for your convenience, the root certificate used to connect to Azure IoT. Starting from June 2022, the Digicert Global Root 2 certificate must be used. For more information, refer to the <a href="https://techcommunity.microsoft.com/t5/internet-of-things/azure-iot-tls-critical-changes-are-almost-here-and-why-you/ba-p/2393169" target="_blank" rel="noopener noreferrer">Azure IoT TLS: Critical changes are almost here! (…and why you should care)</a> article.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="creating-a-deviceclient">Creating a DeviceClient<a class="hash-link" href="#creating-a-deviceclient" title="Direct link to heading">​</a></h3><p>You can connect to Azure IoT Hub using either a symmetric Key or a certificate. The following example shows how to use a symmetric key:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">const string DeviceID = "nanoEdgeTwin";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const string IotBrokerAddress = "youriothub.azure-devices.net";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const string SasKey = "yoursaskey";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DeviceClient azureIoT = new DeviceClient(IotBrokerAddress, DeviceID, SasKey);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note: please see the previous section to understand how to better parse the certificate for your usage. The example shows the certificate uploaded into the device and not in the code.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="azure-iot-plugplay">Azure IoT Plug&amp;Play<a class="hash-link" href="#azure-iot-plugplay" title="Direct link to heading">​</a></h3><p>Azure IoT Plug&amp;Play is supported, to use, provide a model ID when creating the DeviceClient:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">DeviceClient azureIoT = new DeviceClient(IotBrokerAddress, DeviceID, SasKey, modelID:"dtmi:com:example:Thermostat;1");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="iot-plugplay-property-updates">IoT Plug&amp;Play property updates<a class="hash-link" href="#iot-plugplay-property-updates" title="Direct link to heading">​</a></h4><p>The following example shows how to subscribe to property updates.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">const string TargetTemperature = "targetTemperature";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DeviceClient azureIoT = new DeviceClient(Secrets.IotHub, Secrets.DeviceName, Secrets.SasKey, azureCert: new X509Certificate(Resource.GetBytes(Resource.BinaryResources.AzureRoot)), modelId: "dtmi:com:example:Thermostat;1");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.TwinUpdated += AzureTwinUpdated;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.Open();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">void AzureTwinUpdated(object sender, TwinUpdateEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (e.Twin.Contains(TargetTemperature))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // We got an update for the target temperature</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        var target = e.Twin[TargetTemperature];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Debug.WriteLine($"Target temperature updated: {target}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PropertyAcknowledge targetReport = new() { Version = (int)e.Twin.Version, Status = PropertyStatus.Completed, Description = "All perfect", Value = target };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        TwinCollection twin = new TwinCollection();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        twin.Add(TargetTemperature, targetReport.BuildAcknowledge());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        azureIoT.UpdateReportedProperties(twin);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this example, the property we are interested in is called <code>targetTemperature</code>. To receive updates, we subscribe to twin updates. We get the twin value from a call to the <code>e.Twin[TargetTemperature]</code> method.</p><p>The pattern to publish a writable property is simple, just build a <code>PropertyAcknowledge</code> object, create a TwinCollection, and add the property name, in this case, <code>targetTemperature</code>.</p><p>You can add more than one property. Note that you add to the TwinCollection, once done, just ask the library to update the twin through the <code>UpdateReportedProperties</code> method.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="receiving-iot-plugplay-commands">Receiving IoT Plug&amp;Play commands<a class="hash-link" href="#receiving-iot-plugplay-commands" title="Direct link to heading">​</a></h4><p>An IoT Plug &amp; Play command is a method callback. The following example shows how to map an IoT Play &amp; Play command to a C# method. The method is called <code>getMaxMinReport</code>, the name of the C# method <strong>must</strong> match the command name as defined in the DTDL file.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">DeviceClient azureIoT = new DeviceClient(Secrets.IotHub, Secrets.DeviceName, Secrets.SasKey, azureCert: new X509Certificate(Resource.GetBytes(Resource.BinaryResources.AzureRoot)), modelId: "dtmi:com:example:Thermostat;1");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.AddMethodCallback(getMaxMinReport);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.Open();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string getMaxMinReport(int rid, string payload)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    TemperatureReporting reporting = new() { avgTemp = 20, maxTemp = 42, minTemp = 12.34, startTime = DateTime.UtcNow.AddDays(-10), endTime = DateTime.UtcNow };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return JsonConvert.SerializeObject(reporting);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this example, the expected result is an object. Just populate the object and serialize it as a JSON as the command expect and return it. If any parameter to this command, it will be in the payload.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="getting-and-updating-twin">Getting and updating Twin<a class="hash-link" href="#getting-and-updating-twin" title="Direct link to heading">​</a></h3><p>You can request the state of a Azure IoT Twin by calling the <code>GetTwin</code> method.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var twin = azureIoT.GetTwin(new CancellationTokenSource(20000).Token);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (twin == null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Can't get the twins");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    azureIoT.Close();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Debug.WriteLine($"Twin DeviceID: {twin.DeviceId}, #desired: {twin.Properties.Desired.Count}, #reported: {twin.Properties.Reported.Count}");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note: it's important to use a <code>CancellationToken</code> that will be canceled after a certain amount of time. Otherwise, this will block the calling thread up to the point the twin is received.</p><p>Twins have properties, reported and desired. They are collections and you can get or try to get any element.</p><p>You can report your Twin as simple as this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">TwinCollection reported = new TwinCollection();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">reported.Add("firmware", "myNano");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">reported.Add("sdk", 0.2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.UpdateReportedProperties(reported);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You also have the option to wait for the twin update confirmation, in this case, use a <code>CancellationToken</code> that can be canceled. Otherwise, the check will be ignored.</p><p>Note: the function will return false if the twin reception confirmation is not checked or if it did not arrive on time.</p><p>You can also register for any twin update:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.TwinUpdated += TwinUpdatedEvent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">void TwinUpdatedEvent(object sender, TwinUpdateEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Twin update received: {e.Twin.Count}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="sending-message">Sending message<a class="hash-link" href="#sending-message" title="Direct link to heading">​</a></h3><p>Use the <code>SendMessage</code> function to send messages to Azure IoT. Use a <code>CancellationToken</code> to ensure message delivery. If a CancellationToken is not provided, then delivery assurance will be ignored and the function will return false.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var isReceived = azureIoT.SendMessage($"{{\"Temperature\":42,\"Pressure\":1024}}", new CancellationTokenSource(5000).Token);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Debug.WriteLine($"Message received by IoT Hub: {isReceived}");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note: The message will be sent with the default service quality of service you created the device with. You won't get any answer for the quality <code>0</code>. In this case, you can simplify it to:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.SendMessage($"{{\"Temperature\":42,\"Pressure\":1024}}");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cloud-to-device-messages">Cloud to device messages<a class="hash-link" href="#cloud-to-device-messages" title="Direct link to heading">​</a></h3><p>You can register an event to receive Cloud to device messages:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.CloudToDeviceMessage += CloudToDeviceMessageEvent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// The following example shows how to display all keys in debug</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">void CloudToDeviceMessageEvent(object sender, CloudToDeviceMessageEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Message arrived: {e.Message}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foreach (string key in e.Properties.Keys)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Debug.Write($"  Key: {key} = ");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (e.Properties[key] == null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Debug.WriteLine("null");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Debug.WriteLine((string)e.Properties[key]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // e.Message contains the message itself</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if(e.Message == "stop")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ShoudIStop = true;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note: the <code>sender</code> is a <code>DeviceClient</code> class, you can then send a confirmation message back, or execute any logic you've put in place.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="method-callback">Method callback<a class="hash-link" href="#method-callback" title="Direct link to heading">​</a></h3><p>Method callback is supported as well. You can register and unregister your methods. Here are a few examples:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.AddMethodCallback(MethodCallbackTest);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.AddMethodCallback(MakeAddition);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.AddMethodCallback(RaiseExceptionCallbackTest);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string MethodCallbackTest(int rid, string payload)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Call back called :-) rid={rid}, payload={payload}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return "{\"Yes\":\"baby\",\"itisworking\":42}";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string MakeAddition(int rid, string payload)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Hashtable variables = (Hashtable)JsonConvert.DeserializeObject(payload, typeof(Hashtable));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int arg1 = (int)variables["arg1"];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int arg2 = (int)variables["arg2"];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return $"{{\"result\":{arg1 + arg2}}}";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string RaiseExceptionCallbackTest(int rid, string payload)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // This will properly return as well the exception error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    throw new Exception("I got you, it's to test the 504");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p><strong>Important</strong>: method names are case-sensitive. So make sure you name your functions in C# using the same case.</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="status-update-event">Status update event<a class="hash-link" href="#status-update-event" title="Direct link to heading">​</a></h3><p>A status update event is available:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">azureIoT.StatusUpdated += StatusUpdatedEvent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">void StatusUpdatedEvent(object sender, StatusUpdatedEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Status changed: {e.IoTHubStatus.Status}, {e.IoTHubStatus.Message}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // You may want to reconnect or use a similar retry mechanism</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ////if (e.IoTHubStatus.Status == Status.Disconnected)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ////{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ////    mqtt.Open();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ////}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note that those are status change based, so once the connect or disconnect event arrives, they'll be replaced by other events as soon as something else happened like receiving a twin.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="qos-level">QoS Level<a class="hash-link" href="#qos-level" title="Direct link to heading">​</a></h3><p>By default, connections to an IoT Hub use QoS 1 for message exchange with the IoT hub. You can change this by setting the <code>qosLevel</code> argument of the <code>DeviceClient</code> constructor.</p><p>Here are existing QoS levels that you can use:</p><ul><li>AtMostOnce: The broker/client will deliver the message once, with no confirmation.</li><li>AtLeastOnce: The broker/client will deliver the message at least once, with confirmation required.</li><li>ExactlyOnce: The broker/client will deliver the message exactly once by using a four-step handshake.</li></ul><p>While it's possible to configure QoS 0 (AtMostOnce) for faster message exchange, you should note that the delivery isn't guaranteed nor acknowledged. For this reason, QoS 0 is often referred as "fire and forget".</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="module-support">Module support<a class="hash-link" href="#module-support" title="Direct link to heading">​</a></h3><p>Modules are supported, you will have to use the constructor to pass the module ID either with a SAS token or with a certificate. The rest works like a normal device. Everything is supported including module direct method, telemetry and twins!</p><p>For example here with a SAS token. Note that the certificates are fully supported as well. And if you are not storing the Azure root certificate on the device, you'll need to pass it to the constructor.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">const string DeviceID = "nanoEdgeTwin";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const string ModuleID = "myModule";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const string IotBrokerAddress = "youriothub.azure-devices.net";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const string SasKey = "yoursaskey";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DeviceClient module = new DeviceClient(IotBrokerAddress, DeviceID, ModuleID, SasKey);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="azure-iot-device-provisioning-service-dps-support">Azure IoT Device Provisioning Service (DPS) support<a class="hash-link" href="#azure-iot-device-provisioning-service-dps-support" title="Direct link to heading">​</a></h3><p>This SDK also supports the Azure IoT Device Provisioning Service. Group and individual provisioning scenarios are supported either with a symmetric key or with certificates. To understand the mechanism behind DPS, it is recommended to read the <a href="https://docs.microsoft.com/azure/iot-dps/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">documentation</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="provisioning-using-symmetric-key">Provisioning using symmetric key<a class="hash-link" href="#provisioning-using-symmetric-key" title="Direct link to heading">​</a></h3><p>For symmetric key provisioning you only need the following elements:</p><ul><li>A registration ID</li><li>The ID Scope</li><li>The device name</li><li>The key or the derived key for group provisioning</li></ul><p>The code is then straight forward:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">const string RegistrationID = "nanoDPStTest";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const string DpsAddress = "global.azure-devices-provisioning.net";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const string IdScope = "0ne01234567";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const string SasKey = "alongkeyencodedbase64";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// See the previous sections in the SDK help, you either need to have the Azure certificate embedded</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Either passing it in the constructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">X509Certificate azureCA = new X509Certificate(DpsSampleApp.Resources.GetBytes(DpsSampleApp.Resources.BinaryResources.BaltimoreRootCA_crt));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var provisioning = ProvisioningDeviceClient.Create(DpsAddress, IdScope, RegistrationID, SasKey, azureCA);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var myDevice = provisioning.Register(new CancellationTokenSource(60000).Token);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if(myDevice.Status != ProvisioningRegistrationStatusType.Assigned)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"Registration is not assigned: {myDevice.Status}, error message: {myDevice.ErrorMessage}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You can then create the device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var device = new DeviceClient(myDevice.AssignedHub, myDevice.DeviceId, SasKey, nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtLeastOnce, azureCA);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Open it and continue like for the previous sections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var res = device.Open();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if(!res)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"can't open the device");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In case a <a href="https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md" target="_blank" rel="noopener noreferrer">DPS model</a> is going to be used, the ID of the model has to be passed to the ProvisioningDeviceClient and DeviceClient constructor.
The code above requires the following changes.</p><p>Add the model ID as a constant:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public const string ModelId = "dtmi:orgpal:palthree:palthree_demo_0;1";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Create the additional payload information with the model ID to be sent along with the registration with DPS and pass that to the call to <code>Register()</code>.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var pnpPayload = new ProvisioningRegistrationAdditionalData</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    JsonData = PnpConvention.CreateDpsPayload(ModelId),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var myDevice = provisioning.Register(pnpPayload, new CancellationTokenSource(60000).Token);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Create the device client passing the model ID to the respective parameter in the constructor.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">var device = new DeviceClient(myDevice.AssignedHub, myDevice.DeviceId, SasKey, nanoFramework.M2Mqtt.Messages.MqttQoSLevel.AtLeastOnce, azureCA, ModelId);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note: like for the <code>DeviceClient</code> you need to make sure you are connected to a network properly and also have the date and time set on the device.</p><p>Provisioning using certificates is supported as well and <a href="https://github.com/nanoframework/nanoFramework.Azure.Devices#provisioning-using-certificates" target="_blank" rel="noopener noreferrer">described here</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="additional-payload">Additional payload<a class="hash-link" href="#additional-payload" title="Direct link to heading">​</a></h3><p>Additional payload is supported as well. You can set it as a JSON string in the <code>ProvisioningRegistrationAdditionalData</code> class when calling the <code>Register</code> function. When the device has been provisioned, you may have as well additional payload provided.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="running-on-battery-for-8-years-and-connecting-to-azure">Running on battery for 8 years and connecting to Azure<a class="hash-link" href="#running-on-battery-for-8-years-and-connecting-to-azure" title="Direct link to heading">​</a></h2><p>One of the advantages of MCU is their low consumption and ability to deep sleep very long even when connecting to Azure. You'll find a full article describing some of the secrets <a href="https://devblogs.microsoft.com/dotnet/show-dotnet-running-my-net-nanoframework-for-8-years-on-a-battery/" target="_blank" rel="noopener noreferrer">here</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>In this (long) article, we hope we have demonstrated <strong>all</strong> you need to connect your MCU using .NET nanoFramework to almost anything! As a recap, here are the repositories related to networking in .NET nanoFramework:</p><ul><li><a href="https://github.com/nanoframework/System.Net.Sockets.TcpClient" target="_blank" rel="noopener noreferrer">TcpClient</a>,</li><li><a href="https://github.com/nanoframework/System.Net.Sockets.UdpClient" target="_blank" rel="noopener noreferrer">UdpClient</a>,</li><li><a href="https://github.com/nanoframework/System.Net.Http" target="_blank" rel="noopener noreferrer">System.Net.Http</a>,</li><li><a href="https://github.com/nanoframework/nanoFramework.WebServer" target="_blank" rel="noopener noreferrer">WebServer</a>,</li><li><a href="https://github.com/nanoframework/System.Net.WebSockets" target="_blank" rel="noopener noreferrer">WebSockets</a>,</li><li><a href="https://github.com/nanoframework/nanoFramework.SignalR.Client" target="_blank" rel="noopener noreferrer">SignalR</a>,</li><li><a href="https://github.com/nanoframework/amqpnetlite" target="_blank" rel="noopener noreferrer">AMQP</a>,</li><li><a href="https://github.com/nanoframework/nanoFramework.m2mqtt" target="_blank" rel="noopener noreferrer">MQTT</a>,</li><li><a href="https://github.com/nanoframework/nanoFramework.Azure.Devices" target="_blank" rel="noopener noreferrer">Azure IoT library</a>,</li><li>And of course, the Sample pack related to <a href="https://github.com/nanoframework/Samples#networking-including-http-ssl" target="_blank" rel="noopener noreferrer">networking</a>, <a href="https://github.com/nanoframework/Samples#mqtt" target="_blank" rel="noopener noreferrer">MQTT</a>, <a href="https://github.com/nanoframework/Samples#amqp" target="_blank" rel="noopener noreferrer">AMQP</a>, and <a href="https://github.com/nanoframework/Samples#azure-specific" target="_blank" rel="noopener noreferrer">Azure</a></li></ul><p>Next Friday, we'll see an advanced scenario: rebuilding fully a .NET nanoFramework image and including native C interoperability. Stay tuned! And as always, feedback is welcome!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>embeddediot</category>
        </item>
        <item>
            <title><![CDATA[14: AMA: IoT, cows, AI and poop - Jim discusses IoT in farming with Bryn Lewis]]></title>
            <link>https://JulyOT.dev/blog/14-iot-cow</link>
            <guid>14-iot-cow</guid>
            <pubDate>Thu, 14 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 14 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 14 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-14-iot-cow-2128acc83e23e4a5d01496834a83428a.png" width="1000" height="420" class="img_ev3q"></p><p><em>Join in the conversation and ask out IoT experts about digital agriculture.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ama-iot-cows-ai-and----jim-discusses-iot-in-farming-with-bryn-lewis">AMA: IoT, cows, AI and 💩 - Jim discusses IoT in farming with Bryn Lewis<a class="hash-link" href="#ama-iot-cows-ai-and----jim-discusses-iot-in-farming-with-bryn-lewis" title="Direct link to heading">​</a></h2><p>Digital agriculture is a massively important use case for IoT. From simple solutions monitoring soil moisture levels to control watering, to complex AI solutions for animal health, IoT is helping farmers bring food to the tables of the growing world.</p><p>In this session, Jim is joined by Bryn Lewis, a Microsoft MVP and IoT expert who is working with farms in New Zealand to implement solutions using AI and IoT. Jim and Bryn will dive into some of the cool projects that Bryn is working on, discussing how AI and IoT can improve cow health, make milking easier, and even reduce water usage for cleanup, all within a hostile environment with wide temperature variances throughout the year, and way too much poop.</p><p>Join us for this AMA style conversation, and bring your own questions on digital agriculture to get answered by our Kiwi expert.</p><p>Catch the recording on the Microsoft Reactor YouTube channel!</p><iframe width="560" height="315" src="https://www.youtube.com/embed/EkCygi4o2rM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>atatedge</category>
            <category>embedded</category>
        </item>
        <item>
            <title><![CDATA[13: Ask Me Anything at Reactor: Azure IoT!]]></title>
            <link>https://JulyOT.dev/blog/13-iot-ama</link>
            <guid>13-iot-ama</guid>
            <pubDate>Wed, 13 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 13 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 13 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-13-ama-reactor-a0542a7b25f306b90a4d181d324c0d55.png" width="1000" height="420" class="img_ev3q"></p><p><em>Get your IoT questions answered by experts.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ask-me-anything-at-reactor-azure-iot">Ask Me Anything at Reactor: Azure IoT<a class="hash-link" href="#ask-me-anything-at-reactor-azure-iot" title="Direct link to heading">​</a></h2><p>This session is part of a series of Ask Me Anything at Reactor sessions that are giving us a platform to share stories, listen, ask respectful questions, and continue on our journey to improve and collaborate with User Groups and Online Communities.</p><p>Join us as we welcome our speakers Bruno Capuano and Maria-Anastasia Moustaka to the Ask Me Anything stage. They will be sharing their knowledge on Azure IoT and a variety of other topics.</p><p>Catch the recording on the Microsoft Reactor YouTube channel!</p><iframe width="560" height="315" src="https://www.youtube.com/embed/__Ky0TmZfak" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
        </item>
        <item>
            <title><![CDATA[12: AI-powered predictive maintenance with Azure Sphere]]></title>
            <link>https://JulyOT.dev/blog/julyot-day12-embedded</link>
            <guid>julyot-day12-embedded</guid>
            <pubDate>Tue, 12 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 12 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 12 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-12-sphere-46fc5508921d10464ad58a548ae816f4.png" width="1000" height="420" class="img_ev3q"></p><p><em>HVAC (<a href="https://en.wikipedia.org/wiki/Heating,_ventilation,_and_air_conditioning" target="_blank" rel="noopener noreferrer">Heating, ventilation, and air conditioning</a>) units regulate our home and workplace environments. HVAC systems are ideal candidates for predictive maintenance, as they require regular costly maintenance.</em></p><p><img loading="lazy" src="https://upload.wikimedia.org/wikipedia/commons/9/90/Rooftop_Packaged_Units.JPG" alt="HVAC System" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="watch-the-10-minute-end-to-end-demonstration">Watch the 10-minute end-to-end demonstration<a class="hash-link" href="#watch-the-10-minute-end-to-end-demonstration" title="Direct link to heading">​</a></h2><p><a href="https://youtu.be/62XKxzRld28" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="The image is the youtube thumbnail for the intro video" src="/assets/images/predictive_maintenace_youtube-c8937fb2e6f510a20c5ce289e9a03534.png" width="1483" height="838" class="img_ev3q"></a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="machine-learning-on-embedded-hardware">Machine Learning on Embedded Hardware<a class="hash-link" href="#machine-learning-on-embedded-hardware" title="Direct link to heading">​</a></h2><p>AI-powered predictive maintenance can help identify a faulty machine before a real problem occurs, reducing maintenance costs, improving availability and customer satisfaction. The advantages of predictive maintenance include:</p><ul><li>Reduced carbon footprint. Keeping equipment running well has straightforward benefits for operating efficiency, but we should also ensure our processes are efficient. Fault monitoring can generate high volumes of low-value data. Sending this data to cloud systems consumes power and network resources. Running an ML model on embedded hardware consumes less electricity and network resources. Only predicted maintenance events get sent to the backend systems. Disabling network interfaces (for example, Wi-Fi) can further reduce power consumption until a high-value predictive maintenance event occurs.</li><li>Access to better data for faster fault resolution.</li><li>Low latency response to system faults. There are fault monitoring use cases that require immediate action to shut down a system. Sending fault monitoring data to cloud systems for processing might be too slow, further damaging the machine.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="predictive-maintenance-on-azure-sphere">Predictive Maintenance on Azure Sphere<a class="hash-link" href="#predictive-maintenance-on-azure-sphere" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="Image shows the Machine Learning Predictive Maintenance rig" src="/assets/images/ml_predictive_maintenance_rig-a8b6ce69b9912cabece6c92450edadf7.jpeg" width="2450" height="1290" class="img_ev3q"></p><p><a href="https://azure.microsoft.com/services/azure-sphere" target="_blank" rel="noopener noreferrer">Azure Sphere</a> is a secure embedded platform that is ideal for quickly developing an IoT system. By providing a platform meeting all <a href="https://www.microsoft.com/research/wp-content/uploads/2017/03/SevenPropertiesofHighlySecureDevices.pdf?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">7 properties of highly secured devices</a>, Azure Sphere eliminates the need to be a hardware, OS, and security expert. These seven properties make Azure Sphere ideal for running and updating ML models. You don’t want to solve one problem (equipment operation) and introduce a larger one (security).</p><p>You can deploy up to 3 custom apps on Azure Sphere, including two ML workloads on the low-power real-time cores. The predictive maintenance solution runs a continuous movement classification TinyML model on one of the Azure Sphere real-time cores. When the TinyML model detects movement, for example, a rattle, or a faulty motor bearing, an event is sent to the predictive maintenance app running on the high-level core. The predictive maintenance app then powers up the network connection and sends the event to Azure IoT Central. Azure IoT Central exports the predictive maintenance event to a Logic App, which generates a message destined for Microsoft Teams.</p><p>The beauty of this solution is that you are combining building blocks. You don’t need to be a security expert, Azure Sphere has got you covered, Edge Impulse simplifies model development, and IoT Central, Logic Apps, and Microsoft Teams are low code offerings making it easier to pull everything together.</p><p><img loading="lazy" alt="This image shows the predictive maintenance solution architecture" src="/assets/images/predictive_maintenance_solution_architecture-f4269f5f2582ac3edff15439b8ffaa68.png" width="1622" height="801" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-the-tinyml-model">Building the TinyML model<a class="hash-link" href="#building-the-tinyml-model" title="Direct link to heading">​</a></h2><p>The TinyML (TensorFlow Lite) model was built with <a href="https://www.edgeimpulse.com/" target="_blank" rel="noopener noreferrer">Edge Impulse</a>. Edge Impulse simplifies building machine learning models for embedded hardware such as Azure Sphere. The cloud service is designed for developers, so you don’t need to be a data science guru. There are tools for ML training data acquisition, and wizards lead you through the process of training, testing, and exporting models. Learn more about Edge Impulse on their <a href="https://docs.edgeimpulse.com/docs" target="_blank" rel="noopener noreferrer">getting started</a> page.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get Started<a class="hash-link" href="#get-started" title="Direct link to heading">​</a></h2><p>Head to the <a href="https://github.com/gloveboxes/AzureSphereMLPredictiveMaintenanceEW" target="_blank" rel="noopener noreferrer">AI-powered Predictive Maintenance</a> repo to get started.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>embeddediot</category>
        </item>
        <item>
            <title><![CDATA[11: Cohetes de agua - Water rockets!]]></title>
            <link>https://JulyOT.dev/blog/11-cohetes-de-agua</link>
            <guid>11-cohetes-de-agua</guid>
            <pubDate>Mon, 11 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 11 of #JulIoT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 11 of <strong>#JulIoT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-11-cohetes-de-agua-700b4b0f04b37da2db996cf5a2fed237.png" width="1000" height="420" class="img_ev3q"></p><p><em>This year we are also celebrating #JulIoT - JulyOT in Spanish!</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cohetes-de-agua">Cohetes de agua<a class="hash-link" href="#cohetes-de-agua" title="Direct link to heading">​</a></h2><p>¿Quieres ver o incluso entrar en la carrera espacial?
Ahora puedes con los cohetes de agua automáticos. Hasta 100 metros de altura, captura de datos y despliegue automático de paracaídas con Arduino.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tutorial-cómo-crear-un-cohete-de-agua-sencillo">Tutorial cómo crear un cohete de agua sencillo<a class="hash-link" href="#tutorial-cómo-crear-un-cohete-de-agua-sencillo" title="Direct link to heading">​</a></h3><iframe width="560" height="315" src="https://www.youtube.com/embed/C5G8b00kDKo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Os presento el tutorial de cómo hacer un cohete de agua sencillo. Incluye cohete y plataforma de lanzamiento. Suena complicado pero es fácil de hacer, volar y mantener.</p><p>No esperes que llegue muy alto, pero sí te asegurará horas de diversión mientras lo montas y luego volándolo. <a href="https://www.youtube.com/watch?v=i_W3VkJkZF0" target="_blank" rel="noopener noreferrer">Aquí el vídeo que me inspiró de Raketfued Rockets.</a></p><p><a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbjJnMi0zcUVhaU9SSnlaTTQyeGFfOVJXRVpSUXxBQ3Jtc0tuTjJ2MlRUMm5pTEJCQ1NRWkpFLWo0WVF4OGRBdk1PWDhZNnpMUVh0REVrRmUwMGZGd2ptYV9zQ29xWGNBQmhJWGZzdS1wSExZME1RVXJDVFFoRzdYQWJtNG5wTU1TZF9TbldzbUg3UlV0QjdXdmpfZw&amp;q=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2F12s2KHlCgusn7dC_QWjIeuUqwQCy3Kw05XQkTBkiW7DE%2Fedit%23gid%3D0&amp;v=C5G8b00kDKo" target="_blank" rel="noopener noreferrer">Y aquí la lista de materiales traducida y con fotos de ejemplo para que se vea más claro</a></p><p><a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbHpUSnY3OXE5UmtBSDMyVk9zZHhyelRNalp2Z3xBQ3Jtc0traDZQcmNkYjkyaHdXaDdxOGgtM3FGbklqR3J2THNiUVFBQmFraDZMMUl1ZlNJY1FZYWh4ems5UWZ4Q25xNEFhMVRDNzdOZmVTc1pNa2VObW4xc1ZVRkNnTEpxZldxZmhXYzI1MWRKcWdRM0UtTDZzcw&amp;q=https%3A%2F%2Fwww.instructables.com%2Fid%2FSimplified-Water-Rocket%2F&amp;v=C5G8b00kDKo" target="_blank" rel="noopener noreferrer">Tienes el instructable aquí (en inglés)</a>.</p><p>Ojo: vuélalo en un sitio despejado y dónde no haya gente. Si estás cerca mientras lo manejas hazlo con precaución.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="videos-from-the-water-rocket-i-oxford-uk">Videos from the water rocket (I) Oxford (UK)<a class="hash-link" href="#videos-from-the-water-rocket-i-oxford-uk" title="Direct link to heading">​</a></h3><iframe width="560" height="315" src="https://www.youtube.com/embed/r3aAcTf5RU0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Finally the rocket flies high, and I installed a camera onboard, so we can see more things.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="videos-from-a-water-rocket-ii-oxford-uk">Videos from a water rocket II. Oxford (UK)<a class="hash-link" href="#videos-from-a-water-rocket-ii-oxford-uk" title="Direct link to heading">​</a></h3><iframe width="560" height="315" src="https://www.youtube.com/embed/4GGwC14PO_k" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Here is the second part of the water rocket test!
We've got some progress on the electronics and new videos, don't miss them!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="automatic-parachute-for-water-rocket">Automatic parachute for water rocket<a class="hash-link" href="#automatic-parachute-for-water-rocket" title="Direct link to heading">​</a></h3><iframe width="560" height="315" src="https://www.youtube.com/embed/sznkx21Y2Eg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Finally we have a parachute that works!
Well it only worked in 1 out of 4 attempts. Why? How is it working?
The mechanism is very simple, with Arduino and a few components. I left everything explained in this video.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-automatic-parachute-system">New automatic parachute system<a class="hash-link" href="#new-automatic-parachute-system" title="Direct link to heading">​</a></h3><iframe width="560" height="315" src="https://www.youtube.com/embed/6DkI61BpZuc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p> Here we have the new version of the water rocket, with all the secrets and improvements on:</p><ul><li>the launchpad, to avoid pressure leakage.</li><li>The fins for a more straight flight.</li><li>The automatic parachute system, more reliable and lighter.</li><li>The navigation software, for a more accurate detection of launch, apogee, and data storage in the Arduino EEPROM.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="visita-al-museo-de-la-ciencia-de-londres-cohetes">Visita al Museo de la Ciencia de Londres. Cohetes<a class="hash-link" href="#visita-al-museo-de-la-ciencia-de-londres-cohetes" title="Direct link to heading">​</a></h3><iframe width="560" height="315" src="https://www.youtube.com/embed/xw_YkiJrFGs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Aquí os traigo un mini tour por uno de los museos que más me gustan: el Museo de la Ciencia de Londres.
No es una pasada, sino lo siguiente!
Me centro especialmente en el apartado de cohetes porque es la parte que más me gusta.
Pero si te gusta la ciencia, la ingeniería o simplemente curiosear cómo funcionan las cosas encontrarás de todo.
A ver, cosas prácticas para saber:</p><ul><li>Entrada gratis. Piden donativo pero si no quieres no das. Recomiendo dar algo siempre para el mantenimiento del museo. Comprando cosas en su tienda, que es una pasada también ayudas.</li><li>Mejores horarios: en general primera hora (a las 10) o a última hora (a las 16h). Cierran a las 18h. Te aconsejo mirar el horario en Google Maps porque te suele decir lo concurrido que está en el momento que quieres ir.</li><li>Tienes un simulador en la planta baja de las misiones Apolo que está bien: se mueven los asientos y es 3D. En la última planta también hay simuladores chulos.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="one-of-the-first-in-the-world-landing-gear-for-water-rockets">(One of the) First in the World landing gear for water rockets<a class="hash-link" href="#one-of-the-first-in-the-world-landing-gear-for-water-rockets" title="Direct link to heading">​</a></h3><iframe width="560" height="315" src="https://www.youtube.com/embed/IzD6kzDOr1E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Finally I could make it. This is a great advancement of a landing system for a water rocket.
(Thanks for your comments correcting me. If you did it before or in other way, please let me know. As you see I corrected the title too to be fair 😉 ).</p><p>As you can see there are already some progress like:</p><ul><li>the self deployed legs.</li><li>the automatic mechanism, entirely design from scratch.</li></ul><p>I did already some reliability tests, with all the parts integrated.
Next steps are to connect the servo mechanism to the Arduino and program the system.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>juliot</category>
        </item>
        <item>
            <title><![CDATA[11: Learn Azure Percept from conference sessions]]></title>
            <link>https://JulyOT.dev/blog/11-azure-percept-conference-sessions</link>
            <guid>11-azure-percept-conference-sessions</guid>
            <pubDate>Mon, 11 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 11 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 11 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-11-azure-percept-conference-sessions-402958fcf68a0b92a79c20d1e3fd8ab6.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we learn more about Azure Percept.</em></p><h1>Learn Azure Percept from conference sessions</h1><p>Azure Percept is a comprehensive, easy-to-use platform with added security for creating edge AI solutions. Start your proof of concept in minutes with hardware accelerators built to integrate seamlessly with Azure AI and Azure IoT services. Azure Percept works out of the box with Azure Cognitive Services, Azure Machine Learning, and other Azure services to deliver vision and audio insights in real time.</p><p>To help you learn more about Azure Percept, we've curated a set of recorded sessions and blog posts from 3 different conferences.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-build-2022">Microsoft Build 2022<a class="hash-link" href="#microsoft-build-2022" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-build-into-focus-preparing-for-the-metaverse">Microsoft Build Into Focus: Preparing for the metaverse<a class="hash-link" href="#microsoft-build-into-focus-preparing-for-the-metaverse" title="Direct link to heading">​</a></h3><p>The metaverse is an emerging concept and there are many questions around what it is, and what can companies do with it? In this session, we'll invite a panel of industry experts from Microsoft to share their perspectives on the metaverse, how enterprises can benefit from metaverse experiences, and how to leverage current technologies to get started.</p><p><a href="https://mybuild.microsoft.com/sessions/545e4d7d-152c-4f1a-8f32-5e7519098dbb?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="Into focus Metaverse video" src="/assets/images/build-into-focus-metaverse-d034222d636c0f5f1becf63a084f98a3.png" width="1060" height="560" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="embrace-digital-transformation-at-the-edge-with-azure-percept">Embrace digital transformation at the edge with Azure Percept<a class="hash-link" href="#embrace-digital-transformation-at-the-edge-with-azure-percept" title="Direct link to heading">​</a></h3><p>Discover how to accelerate edge AI with Azure Percept and Azure Stack HCI, and other Azure services that simplify AI and machine learning training and deployment at scale. Also get a glimpse of what’s to come next with edge AI and internet-of-things innovation from Azure Percept.</p><p><a href="https://mybuild.microsoft.com/sessions/f40fdc70-648a-4353-b483-cdf763b16c2f?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="Embrace digital transformation video" src="/assets/images/build-embrace-transformation-89b5d93c471efa7bbf3026cf6393ab37.png" width="1061" height="561" class="img_ev3q"></a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nvidia-gtc-spring-2022">NVIDIA GTC Spring 2022<a class="hash-link" href="#nvidia-gtc-spring-2022" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="transforming-ai-and-ml-at-the-edge-with-microsoft-and-nvidia-presented-by-microsoft-azure">Transforming AI and ML at the Edge with Microsoft and NVIDIA (Presented by Microsoft Azure)<a class="hash-link" href="#transforming-ai-and-ml-at-the-edge-with-microsoft-and-nvidia-presented-by-microsoft-azure" title="Direct link to heading">​</a></h3><p>NVIDIA and Microsoft are working together to transform AI and machine learning, leveraging the power of the GPU at the edge combined with Azure AI services. Discover how to accelerate edge AI with Azure Percept and Azure Stack HCI, and other Azure services that simplify AI and machine learning training and deployment at scale, as well as making it more accessible to non-developers and data scientists. Also get a glimpse of what’s to come next with edge AI and internet-of-things innovation from Microsoft. Watch this session for a chance to be entered to win a special SWAG Box sponsored by Microsoft and NVIDIA.</p><p><a href="https://www.nvidia.com/on-demand/session/gtcspring22-s42525/" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="NVIDIA transforming AI at the edge video" src="/assets/images/nvidia-transforming-ai-edge-a97d65ab45fba275c9f0b3832c2b3ec3.png" width="960" height="540" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="embrace-digital-transformation-at-the-edge-with-azure-percept-1">Embrace digital transformation at the edge with Azure Percept<a class="hash-link" href="#embrace-digital-transformation-at-the-edge-with-azure-percept-1" title="Direct link to heading">​</a></h3><p>Right now, a paradigm shift is underway. Customers are increasingly investing in artificial intelligence (AI) and machine learning (ML) at the edge to transform business operations, deploying intelligent devices that will generate more data in the next three years than in the past 30 years combined.</p><p>Learn more in <a href="https://techcommunity.microsoft.com/t5/internet-of-things-blog/embrace-digital-transformation-at-the-edge-with-azure-percept/ba-p/3261300?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">this blog post</a>.</p><p><a href="https://techcommunity.microsoft.com/t5/internet-of-things-blog/embrace-digital-transformation-at-the-edge-with-azure-percept/ba-p/3261300?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://techcommunity.microsoft.com/t5/image/serverpage/image-id/357015iAAA87FD555D8FEC3/image-dimensions/701x394?v=v2" alt="Azure percept overview" class="img_ev3q"></a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-ignite-2021">Microsoft Ignite 2021<a class="hash-link" href="#microsoft-ignite-2021" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="automate-your-operations-with-edge-ai">Automate Your Operations with Edge AI<a class="hash-link" href="#automate-your-operations-with-edge-ai" title="Direct link to heading">​</a></h3><p>Automating your operations doesn’t need to be a challenge—and it’s something you can do today. Join this session with NVIDIA and Microsoft to discover how you can use Edge AI for your automation needs. We will provide a behind-the-scenes look at the technology making it all possible, including Microsoft Azure Percept and Azure Stack HCI. Select partners and solution providers will also join us to share more about the innovative hardware that you can run in your edge location.</p><p><a href="https://myignite.microsoft.com/sessions/dfc3448c-4048-4f15-b8f4-86c0f1a76684?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="Automate Your Operations video" src="/assets/images/ignite-automate-operations-6347cf510282b0709f5d5bf8a36b97bd.png" width="1063" height="562" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-and-nvidia-partner-to-accelerate-edge-ai-deployment">Microsoft and NVIDIA partner to accelerate edge AI deployment<a class="hash-link" href="#microsoft-and-nvidia-partner-to-accelerate-edge-ai-deployment" title="Direct link to heading">​</a></h3><p>In a journey to understand the typical edge AI deployment journey, Microsoft spoke to over 500 customers and partners about their biggest barriers to entry. We heard about complexities when trying to scale, no end-to-end solution platforms, even security concerns. With these findings in mind, we released Azure Percept DK to public preview in Spring 2021. It's now <a href="https://techcommunity.microsoft.com/t5/internet-of-things/azure-percept-dk-and-azure-percept-audio-now-available-in-more/ba-p/2712969?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">available to customers in 16 markets</a> around the world.</p><p>Learn more in <a href="https://techcommunity.microsoft.com/t5/internet-of-things-blog/microsoft-and-nvidia-partner-to-accelerate-edge-ai-deployment/ba-p/2897307?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">this blog post</a>.</p><p><a href="https://techcommunity.microsoft.com/t5/internet-of-things/azure-percept-dk-and-azure-percept-audio-now-available-in-more/ba-p/2712969?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://techcommunity.microsoft.com/t5/image/serverpage/image-id/321596i1E16377022E488B2/image-size/large?v=v2&amp;px=999" alt="Microsoft and NVIDIA partner to accelerate edge AI deployment" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="time-to-ignite-nvidia-works-with-microsoft-to-bolster-gpu-accelerated-edge-ai-and-visualization">Time to Ignite: NVIDIA Works With Microsoft to Bolster GPU-Accelerated Edge AI and Visualization<a class="hash-link" href="#time-to-ignite-nvidia-works-with-microsoft-to-bolster-gpu-accelerated-edge-ai-and-visualization" title="Direct link to heading">​</a></h3><p>Explore how the companies’ AI solutions deliver breakthroughs across industries, at Microsoft Ignite 2021.</p><p>Learn more in <a href="https://blogs.nvidia.com/blog/2021/10/28/nvidia-at-microsoft-ignite/" target="_blank" rel="noopener noreferrer">this blog post</a>.</p><p><a href="https://blogs.nvidia.com/blog/2021/10/28/nvidia-at-microsoft-ignite/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://blogs.nvidia.com/wp-content/uploads/2021/10/microsoft-ignite-rollup-1280x680-1.jpg" alt="NVIDIA Works With Microsoft to Bolster GPU-Accelerated Edge AI and Visualization" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="discover-how-datarobot--microsoft-deliver-more-connected-ai-solutions-at-scale">Discover how DataRobot &amp; Microsoft deliver more connected AI solutions at scale<a class="hash-link" href="#discover-how-datarobot--microsoft-deliver-more-connected-ai-solutions-at-scale" title="Direct link to heading">​</a></h3><p>To realize the full potential of AI, organizations need to bring together teams, unify data and operate, at scale, across all environments - from the cloud, to the data center, to the edge. Together, DataRobot AI Cloud and Microsoft can deliver this next generation of AI. Learn how you can run DataRobot AI Cloud platform on Azure, harness the power of AI at the edge with Azure Percept, and soon, drive real-time collaboration between data scientists and data managers on Teams.</p><p><a href="https://myignite.microsoft.com/sessions/163fd807-58d7-492f-b9e6-a6882397e0fb?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="Discover how DataRobot &amp;amp; Microsoft deliver more connected AI solutions video" src="/assets/images/ignite-datarobot-microsoft-ede6a29dd2990753662d90df1c45c184.png" width="1063" height="562" class="img_ev3q"></a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="deliver-more-connected-intelligent-ai-solutions-at-scale-with-microsoft-and-datarobot-ai-cloud">Deliver More Connected, Intelligent AI Solutions at Scale with Microsoft and DataRobot AI Cloud<a class="hash-link" href="#deliver-more-connected-intelligent-ai-solutions-at-scale-with-microsoft-and-datarobot-ai-cloud" title="Direct link to heading">​</a></h3><p>At this year’s Microsoft Ignite event, DataRobot is thrilled to join forces with Microsoft to bring organizations better AI-enabled experiences that deliver world-class customer experience and impactful business results.</p><p>Learn more in <a href="https://www.datarobot.com/blog/intelligent-ai-solutions-at-scale-with-microsoft-and-datarobot-ai-cloud/" target="_blank" rel="noopener noreferrer">this blog post</a>.</p><p><a href="https://www.datarobot.com/blog/intelligent-ai-solutions-at-scale-with-microsoft-and-datarobot-ai-cloud/" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="Discover how DataRobot &amp;amp; Microsoft deliver more connected AI solutions video" src="/assets/images/ignite-datarobot-microsoft-ede6a29dd2990753662d90df1c45c184.png" width="1063" height="562" class="img_ev3q"></a></p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>aiatedge</category>
        </item>
        <item>
            <title><![CDATA[09: Getting Started with Microsoft Azure and CircuitPython]]></title>
            <link>https://JulyOT.dev/blog/09-azure-circuit-python</link>
            <guid>09-azure-circuit-python</guid>
            <pubDate>Sat, 09 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 9 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 9 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-9-azure-circuitpython-0a122bfa6958f7b192e507feb20c91a0.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we learn about using Azure IoT with Circuit Python.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-with-microsoft-azure-and-circuitpython">Getting Started with Microsoft Azure and CircuitPython<a class="hash-link" href="#getting-started-with-microsoft-azure-and-circuitpython" title="Direct link to heading">​</a></h2><p>Learn how to use Microsoft Azure IoT with CircuitPython! If you are an embedded developer who loves CircuitPython and want to connect to the cloud, then <a href="https://learn.adafruit.com/getting-started-with-microsoft-azure-and-circuitpython" target="_blank" rel="noopener noreferrer">this guide on the Adafruit Learn platform</a> is for you.</p><p>This guide will walk you through how to get started with Microsoft Azure using a Feather ESP32-S2 TFT and a BME688 sensor to monitor temperature, humidity and air pressure. The data is logged to Microsoft Azure every fifteen minutes and can be viewed on a dashboard.</p><form action="https://learn.adafruit.com/getting-started-with-microsoft-azure-and-circuitpython" target="_blank"><input type="submit" value="Take me to the guide" class="clean-btn button button--primary margin-left--md"></form>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
        </item>
        <item>
            <title><![CDATA[08: IoT for Beginners lesson 2!]]></title>
            <link>https://JulyOT.dev/blog/08-julyot-iot-beginners</link>
            <guid>08-julyot-iot-beginners</guid>
            <pubDate>Fri, 08 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 8 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 8 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-8-iot-beginners-2dd46376c9b787bf9f2082260655bae5.png" width="1000" height="420" class="img_ev3q"></p><p><em>Today we live stream lesson 2 of IoT for Beginners - a deeper dive into IoT.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-for-beginners">IoT For Beginners<a class="hash-link" href="#iot-for-beginners" title="Direct link to heading">​</a></h2><p><a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for beginners</a> is a free, open source, 24-lesson IoT curriculum. The second lesson is live-streamed today from the Microsoft Reactor. Catch the recording on the Microsoft Reactor YouTube channel.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/NAcTzfMSxA8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Learn more about IoT for Beginners on the official <a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for Beginners GitHub repo</a>.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
        </item>
        <item>
            <title><![CDATA[08: .NET nanoFramework GPIO, I2C, SPI and other IO support]]></title>
            <link>https://JulyOT.dev/blog/08-nano-framework</link>
            <guid>08-nano-framework</guid>
            <pubDate>Fri, 08 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 8 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 8 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-8-nanoframework-770d33e22e2443104bc72a8abf8d5fa2.png" width="1000" height="420" class="img_ev3q"></p><h1>GPIO, I2C, SPI, PWM, ADC, DAC, Serial and more!</h1><p> .NET nanoFramework has support for GPIO, I2C, SPI, PWM, ADC, DAC, Serial, 1-Wire. Also the API are aligned with <a href="https://github.com/dotnet/iot/" target="_blank" rel="noopener noreferrer">.NET IoT</a> making it easy for code reuse between development on a Raspberry Pi with .NET 6.0 and an MCU running .NET nanoFramework.</p><p> A comparison on how to reuse code and the differences between .NET IoT and .NET nanoFramework is available <a href="https://github.com/dotnet/samples/tree/main/iot/dotnet-iot-and-nanoframework" target="_blank" rel="noopener noreferrer">here</a>.</p><p> There are dedicated classes with detailed documentation and samples for each of them:</p><ul><li><p>General Purpose Input and Output (GPIO): <a href="https://github.com/nanoframework/System.Device.Gpio" target="_blank" rel="noopener noreferrer">System.Device.Gpio</a> and associated documentation for the <a href="https://docs.nanoframework.net/api/System.Device.Gpio.html" target="_blank" rel="noopener noreferrer">class library</a></p><p>  And a code snipet to blink a led:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// Creates a GPIO controller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GpioController controller = new();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Open the pin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GpioPin led = controller.OpenPin(12, PinMode.Output);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Change the value of the pin. Equivalent code as the next line: controller.Write(12, PinValue.Low)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">led.Write(PinValue.Low);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">while (true)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Toggle the value of the pin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    led.Toggle();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Thread.Sleep(125);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  <a href="https://github.com/nanoframework/Samples/blob/main/samples/Blinky" target="_blank" rel="noopener noreferrer">Blink your first led</a>! <a href="https://github.com/nanoframework/Samples/blob/main/samples/Gpio" target="_blank" rel="noopener noreferrer">GPIO sample pack</a> including event management.</p></li><li><p>Serial Peripheral Interface (SPI): <a href="https://github.com/nanoframework/System.Device.Spi" target="_blank" rel="noopener noreferrer">System.Device.Spi</a>and associated document for the <a href="https://docs.nanoframework.net/api/System.Device.Spi.html" target="_blank" rel="noopener noreferrer">class library</a></p><p>  To create a SpiDevice, you need to follow this pattern:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SpiDevice spiDevice;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SpiConnectionSettings connectionSettings;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Note: the ChipSelect pin should be adjusted to your device, here 12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You can adjust as well the bus, here 1 for SPI1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">connectionSettings = new SpiConnectionSettings(1, 12);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spiDevice = SpiDevice.Create(connectionSettings);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  You can write a SpanByte like this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SpanByte writeBuffer = new byte[2] { 42, 84 };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spiDevice.Write(writeBuffer);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  You can write a ushort array like this:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ushort[] writeBuffer = new ushort[2] { 4200, 8432 };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spiDevice.Write(writeBuffer);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  You can write single bytes:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spiDevice.WriteByte(42);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  Read operations are similar:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SpanByte readBuffer = new byte[2];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This will read 2 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spiDevice.Read(readBuffer);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ushort[] readUshort = new ushort[4];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This will read 4 ushort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spiDevice.Read(readUshort);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// read 1 byte</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">byte readMe = spiDevice.ReadByte();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  For full transfer, you need to have 2 arrays of the same size and perform a full duplex transfer:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">SpanByte writeBuffer = new byte[4] { 0xAA, 0xBB, 0xCC, 0x42 };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SpanByte readBuffer = new byte[4];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spiDevice.TransferFullDuplex(writeBuffer, readBuffer);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Same for ushirt arrays:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ushort[] writeBuffer = new ushort[4] { 0xAABC, 0x00BB, 0xCC00, 0x4242 };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ushort[] readBuffer = new ushort[4];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spiDevice.TransferFullDuplex(writeBuffer, readBuffer);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  More <a href="https://github.com/nanoframework/Samples/blob/main/samples/SPI" target="_blank" rel="noopener noreferrer">System.Device.Spi samples</a>.</p></li><li><p>Inter-Integrated Circuit (I2C): <a href="https://github.com/nanoframework/System.Device.I2c" target="_blank" rel="noopener noreferrer">System.Device.I2c</a> and associated document for the <a href="https://docs.nanoframework.net/api/System.Device.I2c.html" target="_blank" rel="noopener noreferrer">class library</a></p><p>  Here is a short example on how to use I2C:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// In this case we are opening the bus 1 and the device address 0x42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I2cDevice i2c = new(new I2cConnectionSettings(1, 0x42));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// We write a byte, in this case 0x07, we can write a SpanByte as well</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var res = i2c.WriteByte(0x07);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// A successfull write will be: 0x10 Write: 1, transferred: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// A non successful one: 0x0F Write: 4, transferred: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Debug.Write($"0x{i:X2} Write: {res.Status}, transferred: {res.BytesTransferred}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// We're now trying to read 2 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SpanByte span = new byte[2];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">res = i2c.Read(span);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// A successfull write will be: Read: 1, transferred: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// A non successfull one: Read: 2, transferred: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Debug.WriteLine($", Read: {res.Status}, transferred: {res.BytesTransferred}");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  <a href="https://github.com/nanoframework/Samples/blob/main/samples/I2C" target="_blank" rel="noopener noreferrer">I2C sample sample pack</a> containing as well <a href="https://github.com/nanoframework/Samples/blob/main/samples/I2C/System.Device.I2c/GPS" target="_blank" rel="noopener noreferrer">I2C GPS sample</a> and an <a href="https://github.com/nanoframework/Samples/blob/main/samples/I2C/NanoI2cScanner" target="_blank" rel="noopener noreferrer">I2C Scanner sample</a>.</p></li><li><p>Digital-to-analog converter (DAC): <a href="https://github.com/nanoframework/System.Device.Dac" target="_blank" rel="noopener noreferrer">System.Device.Dac</a> and associated document for the <a href="https://docs.nanoframework.net/api/System.Device.Dac.html" target="_blank" rel="noopener noreferrer">class library</a></p><p>  A simple example for DAC is to create a specific sinus wave for example:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// Gets the controller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DacController dac = DacController.GetDefault();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Open channel 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DacChannel dacChannel = dac.OpenChannel(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Gete DAC resolution</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dacResolution = dac.ResolutionInBits;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int upperValue, midRange;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">double radian = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Gets upper value from DAC resolution</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">upperValue = (int)Math.Pow(2.0, dacResolution);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// compute a reasonable increment value from the resolution</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">float increment = maxRads / (dacResolution * 10);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">midRange = upperValue / 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">while(true)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // because the DAC can't output negative values</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // we have to offset the sine wave to half the DAC output range</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint value = (uint)((Math.Sin(radian) * (midRange - 1)) + midRange);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    //Output the current value to console when in debug.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Debug.WriteLine($"DAC SineWave output current value: {value}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // output to DAC</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    channel.WriteValue((ushort)value);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // increment angle</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    radian += increment;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (radian &gt;= maxRads)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // tweak the value so it doesn't overflow the DAC</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        radian = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Wait 5 milliseconds before the next point</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Thread.Sleep(5);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  <a href="https://github.com/nanoframework/Samples/blob/main/samples/DAC" target="_blank" rel="noopener noreferrer">Digital Analog Converter samples</a>.</p></li><li><p>Analog-to-digital converter (ADC): <a href="https://github.com/nanoframework/System.Device.Adc" target="_blank" rel="noopener noreferrer">System.Device.Adc</a> and associated document for the <a href="https://docs.nanoframework.net/api/System.Device.Adc.html" target="_blank" rel="noopener noreferrer">class library</a></p><p>  Each target device has an ADC Controller. To read a channel, first, instantiate the ADC controller and open the channel you want to read from. To read the raw value from an ADC channel, it's a simple matter of calling the Read() method on an open channel.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">AdcController adc1 = new AdcController();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AdcChannel channel0 = adc1.OpenChannel(0);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int myAdcRawvalue = channel0.ReadValue();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  To find details about the ADC controller, query the ADC controller properties, like this.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// get maximum raw value from the ADC controller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int max1 = adc1.MaxValue;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// get minimum raw value from the ADC controller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int min1 = adc1.MinValue;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// find how many channels are available </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int channelCount = adc1.ChannelCount;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// resolution provided by the ADC controller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int adcResolution = adc1.ResolutionInBits;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  <a href="https://github.com/nanoframework/Samples/blob/main/samples/ADC" target="_blank" rel="noopener noreferrer">Analogic/Digital converter sample</a>.</p></li><li><p>Pulse-width Modulation (PWM): <a href="https://github.com/nanoframework/System.Device.Pwm" target="_blank" rel="noopener noreferrer">System.Device.Pwm</a> and associated document for the <a href="https://docs.nanoframework.net/api/System.Device.Pwm.html" target="_blank" rel="noopener noreferrer">class library</a></p><p>  You can create a PWM channel from a pin number. For an ESP32 device, allocate the pin, for an STM32 device ensure the selected pin is PWM enabled.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// Case of ESP32, you need to set the pin function, in this example PWM3 for pin 18:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Configuration.SetPinFunction(18, DeviceFunction.PWM3);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PwmChannel pwmPin = PwmChannel.CreateFromPin(18, 40000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You can check then if it has created a valid one:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (pwmPin != null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // You do have a valid one</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  You can adjust the duty cycle by using the property:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pwmPin.DutyCycle = 0.42;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  The duty cycle goes from 0.0 to 1.0.</p><p>  It is recommended to set the frequency when creating the PWM Channel. You can technically change it at any time but keep in mind some platforms may not behave properly when adjusting this element.</p><p>  Alternatively, if you know the chip/timer Id and the channel then follow this example:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">PwmChannel pwmPin = new(1, 2, 40000, 0.5);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  More on <a href="https://github.com/nanoframework/Samples/blob/main/samples/PWM/System.Device.Pwm" target="_blank" rel="noopener noreferrer">System.Device.Pwm sample</a>.</p></li><li><p>Serial Port: <a href="https://github.com/nanoframework/System.IO.Ports" target="_blank" rel="noopener noreferrer">System.IO.Ports</a>and associated documentation for the <a href="https://docs.nanoframework.net/api/System.IO.Ports.html" target="_blank" rel="noopener noreferrer">class library</a></p><p>  Serial ports are often used to communicate with sensors. The <code>SerialPort</code> must be first opened before it can be used. The serial port can also be closed, when the serial port is disposed, the <code>SerialPort</code> will perform the close operation regardless of any ongoing receive or transmit operations.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// You can specify baud rate, parity, bit stops and number of bits as well:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var port = new SerialPort("COM2");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.Open();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Do a lot of things here, write, read</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.Close();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  There are functions to read and write, some are byte related, others string related. Note that string functions will use UTF8 <code>Encoding</code> charset.</p><p>  Example of sending and reading byte arrays:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">byte[] toSend = new byte[] { 0x42, 0xAA, 0x11, 0x00 };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">byte[] toReceive = new byte[50];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// this will send the 4 bytes:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.Write(toSend, 0, toSend.Length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This will only send the bytes AA and 11:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.Write(toSend, 1, 2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This will check then number of available bytes to read</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var numBytesToRead = port.BytesToRead;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This will read 50 characters:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.Read(toReceive, 0, toReceive.Length);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// this will read 10 characters and place them at the offset position 3:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.Read(toReceive, 3, 10);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Note: in case of time out while reading or writing, you will receive a TimeoutException</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// And you can as well read a single byte:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">byte oneByte = port.ReadByte();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  Sending and receiving string example:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">string toSend = "I ❤ nanoFramework";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.WriteLine(toSend);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// this will send the string encoded finishing by a new line, by default `\n`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You can change the new line to be anything:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.NewLine = "❤❤";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Now it will send 2 hearts as the line ending `WriteLine` and will use 2 hearts as the terminator for `ReadLine`.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// You can change it back to the `\n` default at anytime:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port.NewLine = SerialPort.DefaultNewLine; // default is "\n"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This will read the existing buffer:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string existingString = port.ReadExisting();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Note that if it can't properly convert the bytes to a string, you'll get an exception</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// This will read a full line, it has to be terminated by the NewLine string.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// If nothing is found ending by the NewLine in the ReadTimeout time frame, a TimeoutException will be raised.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">string aFullLine = port.ReadLine();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  SerialPort supports events when characters are received.</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // Subscribe to the event</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port.DataReceived += DataReceivedNormalEvent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // When you're done, you can as well unsubscribe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port.DataReceived -= DataReceivedNormalEvent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">private void DataReceivedNormalEvent(object sender, SerialDataReceivedEventArgs e)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var ser = (SerialPort)sender;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Now you can check how many characters are available, read a line for example</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    var numBytesToRead = port.BytesToRead;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    string aFullLine = ser.ReadLine();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  There are more supported. Check it in the <a href="https://github.com/nanoframework/Samples/blob/main/samples/SerialCommunication" target="_blank" rel="noopener noreferrer">System.IO.Ports serial Communication sample</a>.</p></li><li><p>One Wire or 1-Wire: <a href="https://github.com/nanoframework/nanoFramework.Device.OneWire" target="_blank" rel="noopener noreferrer">nanoFramework.Device.OneWire</a> and associated document for the <a href="https://docs.nanoframework.net/api/nanoFramework.Device.OneWire.html" target="_blank" rel="noopener noreferrer">class library</a></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">To connect to a 1-Wire bus, first, instantiate an OneWireHost object, then perform operations with the connected devices.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```csharp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">OneWireHost _OneWireHost = new OneWireHost();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">To find the first device connected to the 1-Wire bus, and perform a reset on the bus before performing the search, call the `FindFirstDevice` method:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```csharp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">_OneWireHost.FindFirstDevice(true, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">To write a byte with the value 0x44 to the connected device:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```csharp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">_OneWireHost.WriteByte(0x44);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">To get a list with the serial number of all the 1-Wire devices connected to the bus:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```csharp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var deviceList = _OneWireHost.FindAllDevices();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">foreach(byte[] device in deviceList)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    string serial = "";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    foreach (byte b in device)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        serial += b.ToString("X2");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Console.WriteLine($"{serial}");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Check out the [1-Wire sample](https://github.com/nanoframework/Samples/blob/main/samples/1-Wire).</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>Note: devices have different ways to name pins and set them up. It is important to check the default configuration, especially for any STM32 devices. ESP32 devices can be set dynamically. A NuGet package is available for this <a href="https://github.com/nanoframework/nanoFramework.Hardware.Esp32" target="_blank" rel="noopener noreferrer">nanoFramework.Hardware.Esp32</a>. In that case, you would have to set the pins if they don't match your <a href="https://docs.nanoframework.net/content/esp32/esp32_pin_out.html" target="_blank" rel="noopener noreferrer">defaults pins</a>.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-repository-and-advanced-bindings">IoT Repository and advanced bindings<a class="hash-link" href="#iot-repository-and-advanced-bindings" title="Direct link to heading">​</a></h2><p>The alignment between .NET IoT and .NET nanoFramework allows code reuse between the different platforms. While it's not technically possible to have the same NuGet for both platforms, reusing API and code is possible. A lot of work and effort has been put in place to facilitate the creation of individual NuGet packages for almost all of the .NET IoT bindings! The <a href="https://github.com/nanoframework/nanoFramework.IoT.Device" target="_blank" rel="noopener noreferrer">IoT Device repository</a> contains all the tools and the code for all of the available bindings.</p><p>The .NET nanoFramework does not <em>yet</em> support Generics or Linq, and in places, compromises have been made so the framework fits on constrained devices. <a href="https://docs.nanoframework.net/content/architecture/simplifications-and-trade-offs.html" target="_blank" rel="noopener noreferrer">This page</a> explains most of them.</p><p>Tools to help in the migration have been built to automate some of the migration and <a href="https://www.nanoframework.net/net-iot-bindings-available/" target="_blank" rel="noopener noreferrer">initial work started back in May 2021</a>. Now more than 98 bindings are available, some specific for MCU and optimized for a specific platform like ESP32. .NET IoT also benefited from this work as some of those new bindings have been migrated back to .NET IoT.</p><p>Here is a view of the devices!</p><p><a href="https://github.com/nanoframework/nanoFramework.IoT.Device#list-of-devices" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="device list" src="/assets/images/iot-device-list-cb73433dfceef7701e9fb58d9e21bcf7.png" width="535" height="1955" class="img_ev3q"></a></p><p>Each binding has a sample. All is well organized and you'll find those in the <code>/devices/BindingName/samples</code> directory. And as an example, here is how you can use a BMP280:</p><div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// bus id on the MCU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const int busId = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I2cConnectionSettings i2cSettings = new(busId, Bmp280.DefaultI2cAddress);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I2cDevice i2cDevice = I2cDevice.Create(i2cSettings);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">using var i2CBmp280 = new Bmp280(i2cDevice);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// set higher sampling</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">i2CBmp280.TemperatureSampling = Sampling.LowPower;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">i2CBmp280.PressureSampling = Sampling.UltraHighResolution;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Perform a synchronous measurement</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var readResult = i2CBmp280.Read();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// Print out the measured data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Debug.WriteLine($"Temperature: {readResult.Temperature?.DegreesCelsius:N1}\u00B0C");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Debug.WriteLine($"Pressure: {readResult.Pressure?.Hectopascals:N2}hPa");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Note the usage of <a href="https://github.com/angularsen/UnitsNet" target="_blank" rel="noopener noreferrer">UnitsNet</a>. UnitsNet is used to facilitate unit conversions. We've implemented the most popular unit conversions and provided them as NuGet packages. This simplifies development, for example, you don't need to worry about providing a temperature value in Celsius or Fahrenheit. It's just a temperature, the developer can choose the unit to display. The rest of the magic is done for you.</p></li></ul>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>embeddediot</category>
        </item>
        <item>
            <title><![CDATA[07: A Closed Captioning Example on Raspberry Pi using Azure Cognitive services]]></title>
            <link>https://JulyOT.dev/blog/07-closed-captioning-rpi</link>
            <guid>07-closed-captioning-rpi</guid>
            <pubDate>Thu, 07 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 7 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 7 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-7-closed-captioning-75ac3dc342a459b423a1cdb0faa6de88.png" width="1000" height="420" class="img_ev3q"></p><p><em>Build a close captioning tool using a Raspberry Pi and Azure</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-project">The project<a class="hash-link" href="#the-project" title="Direct link to heading">​</a></h2><p>Check out this cool GitHub repo that shows you how to use the Azure Cognitive services from Microsoft and build an example of the Speech to text on a IoT device like raspberry. We will be using youtube videos for our source of speech which would be the input, we will consume the speech data via Mic connected to raspberry and display the converted text in real time over a LCD screen.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="see-it-in-action">See it in action<a class="hash-link" href="#see-it-in-action" title="Direct link to heading">​</a></h3><p>Check out this video to see this project in action.</p><video width="640" height="480" controls=""><source src="https://user-images.githubusercontent.com/46184494/172901241-2b21438e-2600-4397-a6b6-4cd5b5c7c63d.mp4" type="video/mp4"></video><h3 class="anchor anchorWithStickyNavbar_LWe7" id="get-the-instructions">Get the instructions<a class="hash-link" href="#get-the-instructions" title="Direct link to heading">​</a></h3><p>Check out the <a href="https://github.com/m-mohsin-ali/closed-captioning-azure-speech-ai" target="_blank" rel="noopener noreferrer">GitHub repo</a> for all the instructions.</p><form action="https://github.com/m-mohsin-ali/closed-captioning-azure-speech-ai" target="_blank"><input type="submit" value="GitHub repo" class="clean-btn button button--primary margin-left--md"></form>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>aiatedge</category>
        </item>
        <item>
            <title><![CDATA[07: Plug and Play IoT device development with PnPFlow]]></title>
            <link>https://JulyOT.dev/blog/07-pnpflow</link>
            <guid>07-pnpflow</guid>
            <pubDate>Thu, 07 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 7 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 7 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-7-pnpflow-93894831756f4f4ad38b21093b787ae7.png" width="1000" height="420" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-we-have-for-you-today">What we have for you today<a class="hash-link" href="#what-we-have-for-you-today" title="Direct link to heading">​</a></h2><ul><li><a href="#plug-and-play-on-windows"><strong>Plug and Play on Windows</strong></a></li><li><a href="#iot-plug-and-play"><strong>Azure IoT Plug and Play</strong></a></li><li><a href="#the-rise-of-low-code-iot-development"><strong>The rise of Low-code IoT development</strong></a></li><li><a href="#introducing-m5stack"><strong>About M5STACK</strong></a></li><li><a href="#what-is-pnpflow"><strong>What is PnPFlow?</strong></a></li><li><a href="#how-does-pnpflow-work"><strong>How does PnPFlow work</strong></a></li><li><a href="#associated-links"><strong>Associated links</strong></a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="watch-the-introduction-to-pnpflow">Watch the introduction to PnPFlow<a class="hash-link" href="#watch-the-introduction-to-pnpflow" title="Direct link to heading">​</a></h2><iframe width="720" height="405" src="https://www.youtube.com/embed/Oo8HVQYg_ok" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><h2 class="anchor anchorWithStickyNavbar_LWe7" id="plug-and-play-on-windows">Plug and Play on Windows<a class="hash-link" href="#plug-and-play-on-windows" title="Direct link to heading">​</a></h2><p>Everyone loves plug-and-play. When you connect a printer or a disk to your computer, they just work, and you don't have to worry about having installing drivers or configuring devices.</p><p>The introduction of the <a href="https://docs.microsoft.com/windows-hardware/drivers/kernel/introduction-to-plug-and-play?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Windows Plug and Play</a> framework solved problems with installing and configuring devices. The Plug and Play framework provided a standard interface for device builders, driver developers and the operating system.</p><p>Windows Plug and Play provides a set of rules for device discovery, driver interfaces, device configuration, and user notification. When everyone communicates according to unified rules, plug-and-play become a reality, end users can use devices without worrying how to set them up.</p><p><img loading="lazy" alt="IOT plug and play banner" src="/assets/images/iotpnp-530379d5730083856bada8b57e72e1dc.png" width="1434" height="447" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-plug-and-play">IoT Plug and Play<a class="hash-link" href="#iot-plug-and-play" title="Direct link to heading">​</a></h2><p>From the PC industry to the IoT world, the situation is even more complicated. Fragmentation in the IoT industry is a long-standing problem. There are many players involved, and there aren't well-accepted standards for interoperability. Complexity increases costs and slows down the progress of enterprise IoT deployment and digital transformation.</p><p><a href="https://docs.microsoft.com/azure/iot-develop/overview-iot-plug-and-play?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">IoT Plug and Play</a> is Microsoft's answer to IoT interoperability. Building an ecosystem to provide seamless integration between off-the-shelf devices and cloud solutions.</p><p>IoT Plug and Play is based on the open modeling language <a href="https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md" target="_blank" rel="noopener noreferrer">DTDL</a> that allows IoT devices to declare their capabilities to a solution. At the center of IoT Plug and Play is a schema that describes device capabilities with a <a href="https://json-ld.org/" target="_blank" rel="noopener noreferrer">JSON-LD</a> model document.</p><p>An IoT Plug and Play model uses the following interfaces to describe and model any device:</p><ul><li>Telemetry
Usually time-series data like temperature measurements or events such as alerts).</li><li>Properties
Attributes like firmware version or long-running settings like target fan speed.</li><li>Commands
For example, reboot a device, or open a door lock.</li></ul><p>The modeling architecture supports interface reuse across device capability models to facilitate collaboration and speed development.</p><p>Solutions built on Azure IoT, including Azure IoT Hub and Central, support IoT Plug and Play natively. Application developers can also build IoT Plug and Play enabled solutions that adapt to IoT devices by parsing their DTDL models.</p><blockquote><p>IoT Plug and Play is also part of the <a href="https://www.microsoft.com/azure/partners/azure-certified-device?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Azure Certified Device program</a> which enables device developers to differentiate and certify their IoT devices and a central catalogue for customers to discover IoT devices.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-rise-of-low-code-iot-development">The rise of Low-code IoT development<a class="hash-link" href="#the-rise-of-low-code-iot-development" title="Direct link to heading">​</a></h2><p>The benefits of plug-and-play go beyond just connecting two systems, it is also useful for accelerating IoT hardware and software development.</p><p>To achieve hardware plug-and-play, the interface should be standardized and the hardware should be modular. Just like Lego building blocks, various prototypes can be easily designed. From the rise of Arduino to various open-source hardware, such as Microsoft <a href="https://microsoft.github.io/jacdac-docs/" target="_blank" rel="noopener noreferrer">Jacdac</a>, device manufacturers want ways to make hardware connections less expensive and more convenient.</p><p>From a software development perspective, graphical programming and low-code development are very popular. <a href="https://nodered.org/" target="_blank" rel="noopener noreferrer">NodeRed</a> and Microsoft <a href="https://www.microsoft.com/makecode?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">MakeCode</a> are two great examples. Anyone can quickly implement business logic and build prototypes without requiring deep professional knowledge and programming skills. Countless innovative projects around the world use these platforms to solve real problems.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-m5stack">Introducing M5STACK<a class="hash-link" href="#introducing-m5stack" title="Direct link to heading">​</a></h2><p>M5STACK is a great example of a company that builds products that are both modular and use low-code graphic programming, this makes IoT development easier.</p><p><a href="https://m5stack.com/" target="_blank" rel="noopener noreferrer">M5STACK</a>, based in Shenzhen, China, is a technology company that designs and manufactures open-source IoT development devices for the global market. They're also an IoT device partner of Microsoft Azure, offering IoT modules and engineering services to enterprise customers.</p><p><img loading="lazy" alt="A photo of a huge range of M5 stack devices such as sensors and actuators" src="/assets/images/m5stackdevice-442d9fe59aa28b564fcb0a3b82dfab21.png" width="1013" height="647" class="img_ev3q"></p><p>M5STACK builds hundreds of sensors, actuators, and communication modules that can be connected through standard interfaces. These modules plug and play with the <a href="https://flow.m5stack.com" target="_blank" rel="noopener noreferrer">UIFLOW</a> low-code graphical programming IDE to give the best IoT project prototyping experience from entry-level hobbyists to professional developers.</p><p>With UIFLOW, a user builds a solution with single blocks, or they can implement more advanced scenarios by combining several blocks. For example, blocks can be combined to move data between industrial networks like Modbus to internet services over TCP/IP without requiring a deep understanding of these protocols.</p><p><img loading="lazy" alt="A block based editor for coding the M5 stack" src="/assets/images/uiflow-a26de8355a3ba969db44566a7d2700fa.png" width="1895" height="795" class="img_ev3q"></p><p>M5STACK aims to cooperate with other companies to create a more open and interconnected IoT developer platform. Their <a href="https://devicecatalog.azure.com/devices/84fe4cc3-cdf1-48a1-8b58-07685890f359" target="_blank" rel="noopener noreferrer">kits</a> are certified for Azure IoT Plug and Play. UIFLOW has advanced <a href="https://docs.m5stack.com/en/uiflow/iotcloud/azure" target="_blank" rel="noopener noreferrer">Azure IoT support</a> built-in.  Users can build a device with just a few clicks to connect to Azure IoT Hub or Azure IoT Central.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-pnpflow">What is PnPFlow?<a class="hash-link" href="#what-is-pnpflow" title="Direct link to heading">​</a></h2><p>Project PnPFlow is the latest collaboration between M5STACK and the Azure IoT team. A better together experience for developer to build an IoT Plug and Play device without knowing the complexity of Plug and Play protocol and DTDL model. All you have to do is to drag and drop blocks to build a business-centric application in UIFLOW. The device will be automatically provisioned on Azure IoT Central and seamlessly will work with IoT Central template based web-UI .</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-pnpflow-work">How does PnPFlow work?<a class="hash-link" href="#how-does-pnpflow-work" title="Direct link to heading">​</a></h2><ol><li><p>Each supported hardware component, be it standalone hardware like a UNIT sensor, or a built-in Core module component, such as a built-in RTC peripheral, have capabilities modeled as an IoT Plug and Play interface. The models are hosted on <a href="https://github.com/m5stack/M5-iot-plugandplay-models" target="_blank" rel="noopener noreferrer">Github</a>.</p></li><li><p>The UIFLOW has built-in intelligence to load predefined models, generate 'Smart' blocks to represent each telemetry, property, or command operation, and associate with hardware blocks using an assignment expression. The l-value is a schema-aware object defined in the model, and the r-value is the corresponding hardware operations or a user-provided value.</p><p><img loading="lazy" alt="A block based editor showing how to write PnP flow code" src="/assets/images/pnpflowblock-740c2a1c5de0717e546ce33e9e645146.png" width="1198" height="643" class="img_ev3q"></p></li><li><p>The user can choose one or more 'Smart' blocks, manipulate them and integrate them with custom application logic. The UIFLOW will dynamically compose predefined interfaces into a single top-level device model.</p></li><li><p>To further improve developer experience, UIFLOW  natively integrates with Azure IoT Central. Users can log in to their IoT Central applications, create and update device templates, and manage device identities without leaving UIFLOW. The IoT Central application template will be customized to reflect the device's capabilities and a default page will be automatically generated.</p><p><img loading="lazy" alt="An animated GIF showing how to connect the UI flow block based editor to Azure IoT Central" src="/assets/images/pnpflow-iotcentral-1ce337b80cf94a488e9166af9a51946c.gif" width="1916" height="975" class="img_ev3q"></p></li></ol><p>Are you exciting about Plug and Play IoT development? Get some devices from M5STACK and go to <a href="https://flow.m5stack.com" target="_blank" rel="noopener noreferrer">UIFLOW</a> to test it out.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="associated-links">Associated links<a class="hash-link" href="#associated-links" title="Direct link to heading">​</a></h2><ul><li><a href="https://azure.microsoft.com/en-us/blog/build-with-azure-iot-central-and-iot-plug-and-play/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Build with Azure IoT Central and IoT Plug and Play</a></li><li><a href="https://docs.microsoft.com/azure/iot-develop/concepts-modeling-guide?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Understanding IoT Plug and Play modeling</a></li><li><a href="https://docs.m5stack.com/en/quick_start/m5core/uiflow" target="_blank" rel="noopener noreferrer">M5STACK UIFLOW Documentation</a></li></ul>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>pnp</category>
            <category>low-code</category>
            <category>embeddediot</category>
        </item>
        <item>
            <title><![CDATA[06: Edge Impulse Project of the Month competition]]></title>
            <link>https://JulyOT.dev/blog/06-edge-impulse-competition</link>
            <guid>06-edge-impulse-competition</guid>
            <pubDate>Wed, 06 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 6 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 6 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-6-edge-impulse-competition-803c3b923665bcfba0ab6017eb16bcfd.png" width="1000" height="420" class="img_ev3q"></p><h1>Edge Impulse challenge of the month - July</h1><p><a href="https://edgeimpulse.com" target="_blank" rel="noopener noreferrer">Edge Impulse</a> have announced their challenge of the month for July, perfecting timing for #JulyOT.</p><img src="/img/svg/edge-impulse-dark.svg" alt="Docusaurus themed image" class="themedImage_ToTc themedImage--light_HNdA"><img src="/img/svg/edge-impulse-light.svg" alt="Docusaurus themed image" class="themedImage_ToTc themedImage--dark_i4oU"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-and-share-your-object-detection-project-in-minutes">Build and share your object detection project in minutes<a class="hash-link" href="#build-and-share-your-object-detection-project-in-minutes" title="Direct link to heading">​</a></h2><p>Public Projects help the community learn from each other, and teach developers and engineers how to solve real-world problems with Edge Impulse. This month we are asking developers to see what problems they can solve with object detection on tiny devices!</p><p>With object detection you are able to detect the presence and the position of any object within an image. Use our object detection pre-built ML block that leverages transfer learning to quickly get your device to detect the objects of your choice.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="win-prizes">Win prizes!<a class="hash-link" href="#win-prizes" title="Direct link to heading">​</a></h2><p>The top prize for the best project is $2000 and an entry into their annual competition to win a macBook Pro, AirPods and an Edge Impulse backpack. 2 runners up get $200.</p><p>You can find all the details and the rules on the <a href="https://edgeimpulse.com/projectofthemonth" target="_blank" rel="noopener noreferrer">Edge Impulse competition page</a>.</p><form action="https://edgeimpulse.com/projectofthemonth" target="_blank"><input type="submit" value="Learn more and enter" class="clean-btn button button--primary margin-left--md"></form>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>aiatedge</category>
            <category>embedded</category>
        </item>
        <item>
            <title><![CDATA[05: Altair Everywhere]]></title>
            <link>https://JulyOT.dev/blog/julyot-day5-embedded</link>
            <guid>julyot-day5-embedded</guid>
            <pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 5 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 5 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Post banner" src="/assets/images/JulyOT-banner-5-altair-a33c8f3bd41ae6352f1a5a335e05be9f.png" width="1000" height="420" class="img_ev3q"></p><p><em>The goal of the cloud-connected Altair project is to provide a unique blend of <a href="https://en.wikipedia.org/wiki/Retrocomputing" target="_blank" rel="noopener noreferrer">computing history</a> with modern cloud computing. You'll learn about computing fundamentals, software development, and modern IoT, Data, and AI cloud services that address today's real-world IT challenges.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="run-altair-everywhere">Run Altair Everywhere<a class="hash-link" href="#run-altair-everywhere" title="Direct link to heading">​</a></h2><p>The Altair Everywhere project is tested and runs on the following platforms:</p><ol><li><p>On a <a href="https://en.wikipedia.org/wiki/POSIX" target="_blank" rel="noopener noreferrer">POSIX</a> compatible operating system including Linux, Windows with <a href="https://docs.microsoft.com/windows/wsl/install?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">WSL 2</a>, macOS on Apple Silicon and Intel.</p></li><li><p><a href="https://www.raspberrypi.org/" target="_blank" rel="noopener noreferrer">Raspberry Pi</a>, models, Zero 1 &amp; 2, 2B, 3B, 3B, and 4 running Raspberry Pi OS.</p><table><thead><tr><th>Raspberry Pi with Pi Sense HAT</th><th>Raspberry Pi Sense HAT</th></tr></thead><tbody><tr><td><img loading="lazy" alt="The image shows the address and data bus LEDs" src="/assets/images/raspberry_pi_sense_hat_map-219521f7247903276cd59d090845b3ea.png" width="562" height="379" class="img_ev3q"></td><td><img loading="lazy" alt="The gif shows the address and data bus LEDs in action" src="/assets/images/raspberry_pi_sense_hat-079bdc455c3a3502d2aaa72a6f7b69ed.gif" width="469" height="400" class="img_ev3q"></td></tr></tbody></table></li><li><p><a href="https://azure.microsoft.com/services/azure-sphere/" target="_blank" rel="noopener noreferrer">Azure Sphere Avnet and Seeed Developer Kits</a> running embedded Linux.</p><table><thead><tr><th>Azure Sphere with the Altair front panel kit</th><th>MikroE Retro Click</th></tr></thead><tbody><tr><td><img loading="lazy" alt="The gif shows the Altair on Azure Sphere with the Altair front panel" src="/assets/images/altair_on_sphere-98abeed24d5bc60e757abebf5915ef90.gif" width="979" height="400" class="img_ev3q"></td><td><img loading="lazy" alt="The gif shows the address and data bus LEDs in action" src="/assets/images/avnet_retro_click-7b1a51a16e5d323ac421778d433c78d0.gif" width="332" height="400" class="img_ev3q"></td></tr></tbody></table></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-well-cover">What We'll Cover<a class="hash-link" href="#what-well-cover" title="Direct link to heading">​</a></h2><p>The Altair project can be viewed through three lenses:</p><ol><li>Learn how to develop multithreaded event-driven IoT C applications that scale from embedded <a href="https://en.wikipedia.org/wiki/Microcontroller" target="_blank" rel="noopener noreferrer">microcontrollers</a> to <a href="https://en.wikipedia.org/wiki/Raspberry_Pi" target="_blank" rel="noopener noreferrer">Raspberry Pis</a>, to desktop-class computers.</li><li>A fantastic safe way to explore Intel 8080 machine-level programming and Assembly programming, along with C and BASIC development.</li><li>If you are interested in retro gaming, chill out playing retro games from yesteryear.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cloud-services-integration">Cloud services integration<a class="hash-link" href="#cloud-services-integration" title="Direct link to heading">​</a></h2><p>Optionally, the project integrates free weather and pollution cloud services from Open Weather Map, Azure IoT Central, and Azure Anomaly Detection Cognitive Service. The following reports were generated from data published by the Altair emulator using data sourced from Open Weather Map.</p><table><thead><tr><th>IoT Central Sydney pollution report</th><th>Azure Anomaly Detection report</th></tr></thead><tbody><tr><td><img loading="lazy" alt="The images shows pollution report for Sydney" src="/assets/images/iot_central_pollution_report-ac41244851068dc6e9880987e78e9d1a.png" width="600" height="400" class="img_ev3q"></td><td><img loading="lazy" alt="The following images shows temperature based anomalies" src="/assets/images/univariate-anomalies-ca2e171d017ac8c6f26ad82d99afd7b8.png" width="533" height="400" class="img_ev3q"></td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get Started<a class="hash-link" href="#get-started" title="Direct link to heading">​</a></h2><p>Head to the <a href="https://github.com/gloveboxes/Altair8800.Emulator.UN-X/wiki" target="_blank" rel="noopener noreferrer">Altair Everywhere</a> repo, get started, have some fun, learn new skills, and impress your friends and family :)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="altair-history">Altair History<a class="hash-link" href="#altair-history" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="The image shows the Altair 8800" src="/assets/images/altair-8800-smithsonian-museum-efa63f9b538227319fa6d4ec8ca701b7.png" width="1200" height="600" class="img_ev3q"></p><p><a href="https://commons.wikimedia.org/wiki/File:Altair_8800,_Smithsonian_Museum.jpg" target="_blank" rel="noopener noreferrer">Altair 8800 image attribution - Smithsonian Museum</a></p><p>The Altair 8800 was built on the <a href="https://en.wikipedia.org/wiki/Intel_8080?azure-portal=true" target="_blank" rel="noopener noreferrer">Intel 8080</a> CPU, the second 8-bit microprocessor manufactured by Intel in 1974. By today's standards, it's a simple CPU design, perfect for learning computing fundamentals because of its small instruction set.</p><p>The original Altair 8800 was programmed by setting switches on the front panel. It was a painstaking, error-prone process to load and run a program. The Altair 8800 had a series of LEDs and switches that you used to load apps and determine the state of the Altair.</p><p>You could save and load applications from a paper tape reader connected to the Altair 8800. As the Altair 8800 grew in popularity, more options became available. You could attach a keyboard, a computer monitor, and disk drives, a more reliable way to save and load applications.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
            <category>embeddediot</category>
        </item>
        <item>
            <title><![CDATA[04: Detect the very big with the very small – counting bears with TinyML meetup from IoT North]]></title>
            <link>https://JulyOT.dev/blog/julyot-day4</link>
            <guid>julyot-day4</guid>
            <pubDate>Mon, 04 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 4 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 4 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-4-iot-north-165adf829cc81694d4fcdea9b9c94b91.png" width="1000" height="420" class="img_ev3q"></p><h1>Detect the very big with the very small – counting bears with TinyML meetup from IoT North</h1><p>Today we have a sneak peek at a meetup coming tomorrow (5th July), to give you time to sign up and join! This meetup event will be live streamed from IoT North, and starts on the 5th July at 6PM BST/10AM PDT.</p><p>Catch the recording here!</p><iframe width="560" height="315" src="https://www.youtube.com/embed/8imvkDhdxnw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-north">IoT North<a class="hash-link" href="#iot-north" title="Direct link to heading">​</a></h2><p>IoT North is meetup for makers and developers working on all kinds of hardware and software projects around the Internet of Things (IoT). Come and talk about your projects, what you're working on and share experiences.</p><p>Now a part of IoT North - <a href="http://www.IoTNorth.uk" target="_blank" rel="noopener noreferrer">www.IoTNorth.uk</a> - giving businesses a North in IoT</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-this-meetup-is-about">What this meetup is about<a class="hash-link" href="#what-this-meetup-is-about" title="Direct link to heading">​</a></h2><p>Jim left the UK a few years ago to move to the Pacific North West of the US. Back in the UK the scariest animal he might have encountered would be a sudden hedgehog, but in Washington State where he lives it seems there are bears! He even lost an apple tree and a fence to one once.</p><p>A useful tool for him would be a bear detector – a device to alert him if there are bears in the garden. Such a tool could be built using an AI model trained in the cloud and running on a powerful computer. But who wants to risk a powerful computer outside when there are bears?</p><p>What if he could run a bear detector on a relatively inexpensive microcontroller, then see the results on a cloud dashboard?</p><p>This is where TinyML comes in! TinyML is shrinking AI models down very small, as in kilobytes in size, then running them on low power microcontrollers, or tiny computers like a Raspberry Pi Zero.</p><p>In this session Jim will train a bear detector using <a href="https://edgeimpulse.com" target="_blank" rel="noopener noreferrer">Edge Impulse</a>, an on-line development platform for TinyML models, taking advantage of their new FOMO object detection model. He’ll then show how to run this model on a low powered device, uploading the detection results to an Azure IoT Central dashboard.</p><p>By the end of this session, you will have an understanding of TinyML, how to train models, how to visualize data, and just how wary of bears Jim actually is…</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>aiatedge</category>
        </item>
        <item>
            <title><![CDATA[02: IoT for beginners]]></title>
            <link>https://JulyOT.dev/blog/julyot-day2</link>
            <guid>julyot-day2</guid>
            <pubDate>Sat, 02 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 2 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 2 of <strong>#JulyOT</strong>!! </p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-2-iot-for-beginners-77c238a33207a9804e4228861b97de12.png" width="1000" height="420" class="img_ev3q"></p><p>As we go into the first weekend of July, and a long weekend for some, there's no better time to brush up on your basics.</p><p>For day 2 of #JulyOT we are dipping into the archives to bring you <a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for Beginners</a>, a 12-week, 24-lesson free and open source IoT curriculum to teach you IoT from the ground up. You can use this for self learning, or re-use hte contents any way you need for teaching or learning. Whether you are a professional developer who wants to learn a new skill, or a teacher looking for IoT classroom content, this curriculum is for you.</p><form action="https://aka.ms/iot-beginners" target="_blank"><input type="submit" value="Start the course" class="clean-btn button button--primary margin-left--md"></form><h2 class="anchor anchorWithStickyNavbar_LWe7" id="course-outline">Course outline<a class="hash-link" href="#course-outline" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://github.com/microsoft/IoT-For-Beginners/raw/main/sketchnotes/Roadmap.jpg" alt="A rodmap for IoT for beginners" class="img_ev3q"></p><p>IoT for Beginners is split into 6 projects, each one teaching important IoT concepts and coupled with you actually building something. The projects follow the path from farm to table, showing how IoT can improve the journey food makes, and covering industrial IoT, digital agriculture, AI on the edge, retail IoT, and consumer IoT.</p><ul><li>Introduction - build an IoT nightlight</li><li>Digital agriculture - build an automated watering system</li><li>Logistics - build a vehicle tracker with a dashboard and location alerts</li><li>Manufacturing - use AI on the edge to build a fruit monitor</li><li>Retail - use AI on the edge to do stock monitoring</li><li>Consumer - build a voice controlled smart timer</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="meet-the-team">Meet the team<a class="hash-link" href="#meet-the-team" title="Direct link to heading">​</a></h2><p>This course was put together as a collaboration between IoT experts at Microsoft, and students from all around the world. You can learn more from the following video:</p><p><a href="https://youtu.be/-wippUJRi5k" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://github.com/microsoft/IoT-For-Beginners/raw/main/images/IOT.gif" alt="Promo video" class="img_ev3q"></a></p><p><strong>Gif by</strong> <a href="https://linkedin.com/in/mohitjaisal" target="_blank" rel="noopener noreferrer">Mohit Jaisal</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started">Get started<a class="hash-link" href="#get-started" title="Direct link to heading">​</a></h2><p>What are you waiting for? Head to the <a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for Beginners repo on GitHub</a> and get started!</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>iot4b</category>
        </item>
        <item>
            <title><![CDATA[01: Getting started with nanoFramework!]]></title>
            <link>https://JulyOT.dev/blog/01-nano-framework</link>
            <guid>01-nano-framework</guid>
            <pubDate>Fri, 01 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 1 of #JulyOT!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 1 of <strong>#JulyOT</strong>!</p></blockquote><p><img loading="lazy" alt="Page banner" src="/assets/images/JulyOT-banner-1-nanoframework-fb5bd9ec0e79be338df59df895433a5c.png" width="1000" height="420" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-we-have-for-you-today">What we have for you today<a class="hash-link" href="#what-we-have-for-you-today" title="Direct link to heading">​</a></h2><ul><li><a href="#getting-started-with-nanoframework"><strong>Getting started with nanoFramework</strong></a></li><li><a href="#what-is-net-nanoframework"><strong>What is .NET nanoFramework?</strong></a></li><li><a href="#why-use-net-nanoframework"><strong>Why use .NET nanoFramework?</strong></a></li><li><a href="#associated-links"><strong>Associated links:</strong></a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-with-nanoframework">Getting started with nanoFramework<a class="hash-link" href="#getting-started-with-nanoframework" title="Direct link to heading">​</a></h2><p>.NET nanoFramework: Our mantra is about <strong>making it easy to write C# code for embedded systems!</strong> And all that we're doing here is about that. This free and Open Source platform enables the writing of managed code applications for constrained embedded devices. As a developer, you can use your powerful and familiar tools like Microsoft Visual Studio IDE and your .NET C# skills to write code on a microcontroller.</p><p>.NET nanoFramework supports a large variety of Micro Controller Units (MCU): STM32, ESP32, TI, and NXP. The .NET nanoFramework provides access to low-level IO and protocols, as well as networking and advanced security features allowing connection to the Cloud.</p><p>Here you'll find all the tools, examples, documentation and a great developer ecosystem to help you on your next embedded systems project.</p><blockquote><p><strong>New</strong>: Adoption of .NET nanoFramework is growing fast. It just reached 2 million NuGet downloads, it took 5 years to reach the first million and only 9 months for the second one! Read more about it <a href="https://www.nanoframework.net/2-million-nuget-downloads-and-counting/" target="_blank" rel="noopener noreferrer">here</a></p></blockquote><p>To get started, you can use our <a href="https://docs.nanoframework.net/content/getting-started-guides/getting-started-managed.html" target="_blank" rel="noopener noreferrer">step by step guide</a> containing as well short videos.</p><p>You'll go through the installation of the Visual Studio extension:</p><p><img loading="lazy" src="https://docs.nanoframework.net/images/getting-started-guides/getting-started-extension-installation.gif" alt="step by step" class="img_ev3q"></p><p>Then installing <code>nanoff</code>, the tool to flash your device, and flashing your device:</p><p><img loading="lazy" src="https://docs.nanoframework.net/images/getting-started-guides/getting-started-install-nanoff-flash-esp32.gif" alt="install and flash nanoff" class="img_ev3q"></p><p>And then coding your first hello .NET nanoFramework application and setting debug breakpoints in your code:</p><p><img loading="lazy" src="https://docs.nanoframework.net/images/getting-started-guides/getting-started-first-project.gif" alt="Hello nano" class="img_ev3q"></p><p>In a matter of a few minutes, you'll be up and running with .NET nanoFramework!</p><p>And a lot of samples to start: <a href="https://github.com/nanoframework/Samples" target="_blank" rel="noopener noreferrer">https://github.com/nanoframework/Samples</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-net-nanoframework">What is .NET nanoFramework?<a class="hash-link" href="#what-is-net-nanoframework" title="Direct link to heading">​</a></h2><p>.NET <strong>nanoFramework</strong> is a <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software" target="_blank" rel="noopener noreferrer">free and open-source</a> platform that enables the writing of managed code applications for constrained <a href="https://en.wikipedia.org/wiki/Embedded_system" target="_blank" rel="noopener noreferrer">embedded devices</a>. It is suitable for many types of projects including IoT sensors, wearables, academic proof of concept, robotics, hobbyist/makers creations, or even complex industrial equipment. The .NET nanoFramework makes development easier, faster, and less costly by giving embedded developers access to modern technologies and tools used by desktop application developers.</p><p>Developers can harness the powerful and familiar <a href="https://www.visualstudio.com/vs/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Microsoft Visual Studio IDE</a> and their <a href="https://en.wikipedia.org/wiki/.NET_Framework" target="_blank" rel="noopener noreferrer">.NET</a> <a href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)" target="_blank" rel="noopener noreferrer">C#</a> knowledge to quickly write code without having to worry about the low-level hardware intricacies of a microcontroller. Desktop .NET developers will feel “at home” and can use their skills in embedded systems development, enlarging the pool of qualified embedded developers. Using Microsoft Visual Studio, a developer can deploy and debug the code directly on real hardware.</p><p>The .NET nanoFramework includes a reduced version of the .NET <a href="https://en.wikipedia.org/wiki/Common_Language_Runtime" target="_blank" rel="noopener noreferrer">Common Language Runtime</a> (CLR) and features a subset of the .NET base class libraries along with the most common APIs included in <a href="https://docs.microsoft.com/uwp/api/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">.NET IoT</a> allowing code reuse from .NET IoT applications, thousands of code examples, and open source projects.</p><p>The project is supported by the .NET Foundation.</p><p>You can watch this video from the Microsoft <a href="https://aka.ms/iotshow" target="_blank" rel="noopener noreferrer">IoT Show</a> featuring .NET nanoFramework connected to Azure IoT Hub, measuring a <a href="https://docs.nanoframework.net/devices/Iot.Device.Bmxx80.Bmp280.html" target="_blank" rel="noopener noreferrer">BMP280 sensors</a>, and using the unique deep sleep feature from microcontrollers. A real-life example with .NET nanoFramework:</p><p><a href="https://docs.microsoft.com/shows/internet-of-things-show/introduction-to-net-nanoframework?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer"><img loading="lazy" alt="IoT Show" src="/assets/images/nanoframework-iot-show-bdea819a9957f31f152f8133e9a998da.jpg" width="480" height="360" class="img_ev3q"></a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-net-nanoframework">Why use .NET nanoFramework?<a class="hash-link" href="#why-use-net-nanoframework" title="Direct link to heading">​</a></h2><p>.NET <strong>nanoFramework</strong> is the perfect enabler for developing software that works on embedded devices. Start with a low-cost and readily available development board, then use nanoFramework to write, debug and deploy your code.</p><p>Whether this is your first foray into programming or you are a seasoned developer, if you want a powerful and easy-to-use tool for developing software that runs on embedded devices, you are in the right place. With its modular architecture, it's easy to grab the core components (like the CLR, debugger, and interpreter) and extend them to new hardware platforms, .NET nanoFramework is the perfect partner for your project. The current reference implementation uses <a href="http://www.chibios.org/dokuwiki/doku.php" target="_blank" rel="noopener noreferrer">ChibiOS</a> supporting several <a href="http://www.st.com/content/st_com/en.html" target="_blank" rel="noopener noreferrer">ST Microelectronics</a> development boards, Espressif <a href="https://en.wikipedia.org/wiki/ESP32" target="_blank" rel="noopener noreferrer">ESP32</a>, Texas Instruments <a href="https://www.ti.com/tool/CC3220SF-LAUNCHXL" target="_blank" rel="noopener noreferrer">CC3220 Launchpad</a>, <a href="https://www.ti.com/tool/LAUNCHXL-CC1352R1" target="_blank" rel="noopener noreferrer">CC1352 Launchpad</a>, and NXP <a href="https://www.nxp.com/part/MIMXRT1060-EVK#/" target="_blank" rel="noopener noreferrer">MIMXRT1060-EVK</a>.</p><p>Because it's completely <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software" target="_blank" rel="noopener noreferrer">free and Open Source</a> you have access to and the ability to modify all parts of the code including the ability to leverage what others have already contributed. If you are willing to, you can help shape the future by contributing back to the project and rapidly growing community.</p><p>Here are a couple of supported boards:</p><p><img loading="lazy" src="https://docs.nanoframework.net/images/reference-targets/nucleo64-f091rc.jpg" alt="nucleo" class="img_ev3q"><img loading="lazy" src="https://docs.nanoframework.net/images/reference-targets/esp32-devkitc.jpg" alt="esp32" class="img_ev3q"><img loading="lazy" src="https://docs.nanoframework.net/images/reference-targets/m5stack.jpg" alt="M5Stack" class="img_ev3q"><img loading="lazy" src="https://docs.nanoframework.net/images/reference-targets/orgpal-palthree.jpg" alt="OrgPall PalThree" class="img_ev3q"><img loading="lazy" src="https://docs.nanoframework.net/images/reference-targets/mimxrt1060_evk.jpg" alt="NXP" class="img_ev3q"></p><p>Our reference boards can be found <a href="https://github.com/nanoframework/nf-interpreter#net-nanoframework-interpreter-for-reference-boards" target="_blank" rel="noopener noreferrer">here</a>. And community boards <a href="https://github.com/nanoframework/nf-Community-Targets#available-community-boards" target="_blank" rel="noopener noreferrer">here</a>. Depending on your board, it can be a matter of a few hours to get your board supported! A blog post will explain how.</p><p>Here are some of its unique features:</p><ul><li>Can run on resource-constrained devices with as low as 128kB of flash and 64kB of RAM.</li><li>Runs directly on bare metal. Currently, <a href="https://en.wikipedia.org/wiki/ARM_Cortex-M" target="_blank" rel="noopener noreferrer">ARM Cortex-M</a> and <a href="https://en.wikipedia.org/wiki/ESP32" target="_blank" rel="noopener noreferrer">ESP32</a> devices are supported.</li><li>Supports common embedded peripherals and interconnects like GPIO, UART, SPI, I2C, USB, and networking.</li><li>Provides multi-threading support natively.</li><li>Support for energy-efficient operations such as devices running on batteries.</li><li>Support for Interop code allows developers to easily write libraries that have both managed (C#) and native code (C/C++).</li><li>No manual memory management because of its simpler mark-and-sweep <a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" target="_blank" rel="noopener noreferrer">garbage collector</a>.</li><li>Execution constraints to catch device lockups and crashes.</li></ul><p>Here are some advantages over other similar systems:</p><ul><li>First-class debugger experience right on the target hardware with breakpoints, single step, step into, step out, step over, pause and stop.</li><li>Powerful and free developer tools with <a href="https://www.visualstudio.com/vs/?wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Microsoft Visual Studio IDE</a>.</li><li>Support for a large range of inexpensive boards from several manufacturers including Discovery and Nucleo boards from <a href="http://www.st.com/content/st_com/en.html" target="_blank" rel="noopener noreferrer">ST Microelectronics</a>, <a href="https://www.mikroe.com/quail" target="_blank" rel="noopener noreferrer">Quail</a> from Mikrobus, <a href="https://www.wildernesslabs.co/Netduino" target="_blank" rel="noopener noreferrer">Netduino</a> from Wilderness Labs, <a href="https://en.wikipedia.org/wiki/ESP32" target="_blank" rel="noopener noreferrer">ESP32</a> DevKit C, Texas Instruments <a href="https://www.ti.com/tool/CC3220SF-LAUNCHXL" target="_blank" rel="noopener noreferrer">CC3220 Launchpad</a>, <a href="https://www.ti.com/tool/LAUNCHXL-CC1352R1" target="_blank" rel="noopener noreferrer">CC1352 Launchpad</a>, and NXP <a href="https://www.nxp.com/part/MIMXRT1060-EVK#/" target="_blank" rel="noopener noreferrer">MIMXRT1060-EVK</a>.</li><li>Easily expandable to other hardware and <a href="https://en.wikipedia.org/wiki/Real-time_operating_system" target="_blank" rel="noopener noreferrer">RTOS</a> platforms. Currently targets <a href="https://developer.arm.com/embedded/cmsis" target="_blank" rel="noopener noreferrer">CMSIS</a> and ESP32 FreeRTOS ports.</li><li>Completely free and Open Source. From the core components to the utilities used for building, deploying, debugging, and IDE components.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="associated-links">Associated links:<a class="hash-link" href="#associated-links" title="Direct link to heading">​</a></h2><ul><li>Official .NET nanoFramework <a href="https://www.nanoframework.net/" target="_blank" rel="noopener noreferrer">site and blog</a>.</li><li><a href="https://docs.nanoframework.net/" target="_blank" rel="noopener noreferrer">All our documentation</a> for API, classes, how to install, build your own images, architecture, and more!.</li><li>THE place to go to get any code: our <a href="https://github.com/nanoframework" target="_blank" rel="noopener noreferrer">Github .NET nanoFramework</a>.</li></ul><p>Find us on Fridays all July! See you for another post on how to use GPIO, SPI, I2C, PWM, and more on .NET nanoFramework! And feedback is welcome.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>embeddediot</category>
        </item>
        <item>
            <title><![CDATA[01: Welcome to #JulyOT!]]></title>
            <link>https://JulyOT.dev/blog/01-julyot-kickoff</link>
            <guid>01-julyot-kickoff</guid>
            <pubDate>Fri, 01 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to Day 1 of #JulyOT!!]]></description>
            <content:encoded><![CDATA[<blockquote><p>Welcome to Day 1 of <strong>#JulyOT</strong>!!</p></blockquote><p><img loading="lazy" alt="Welcome banner" src="/assets/images/JulyOT-banner-1-welcome-62a0080c482ed6ee0b4f9233bffc4aa6.png" width="1000" height="420" class="img_ev3q"></p><p>#JulyOT 2022 is finally here, and we are excited to share 31 days of IoT goodness throughout this month.</p><p>Each weekday we will be publishing one or more articles here all grouped into the following themes:</p><ul><li>Beginners, makers, and students</li><li>Embedded development</li><li>AI on the Edge</li><li>Learning and certifications</li></ul><p>Some will be full blog posts, others will direct you to videos, GitHub repos, other blogs, or code samples.</p><p>Check back here every day for more IoT goodness.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="in-this-post">In this post<a class="hash-link" href="#in-this-post" title="Direct link to heading">​</a></h2><ul><li><a href="#iot-cloud-skills-challenge"><strong>Upskill by joining the IoT Cloud skills challenge</strong></a></li><li><a href="#iot-for-beginners"><strong>Learn IoT with IoT For Beginners</strong></a></li><li><a href="#digital-swag"><strong>Digital swag</strong></a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-cloud-skills-challenge">IoT Cloud Skills Challenge<a class="hash-link" href="#iot-cloud-skills-challenge" title="Direct link to heading">​</a></h2><p>Want to become a subject matter in the IoT Domain? Take the <a href="https://docs.microsoft.com/learn/challenges?id=261fd583-fa7b-4b1f-86eb-6a52b5468a23&amp;wt.mc_id=eventspg_16482_webpage_reactor" target="_blank" rel="noopener noreferrer">Microsoft Cloud Skills Challenge</a> - skill yourself up in 31 days and complete the Cloud Skills Challenge. This starts 1st July, so sign up now.</p><table><tbody><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"></td><td style="border:0px;text-align:center"><form action="https://docs.microsoft.com/learn/challenges" target="_blank"><input type="submit" value="Join the Cloud Skills Challenge" class="clean-btn button button--primary margin-left--md"><input type="hidden" name="id" value="261fd583-fa7b-4b1f-86eb-6a52b5468a23"><input type="hidden" name="wt.mc_id" value="eventspg_16482_webpage_reactor"></form></td><td style="border:0px;text-align:center"></td></tr><tr style="border:0px;background-color:#00000000"><td style="border:0px;text-align:center"><img loading="lazy" src="https://docs.microsoft.com/en-us/media/learn/challenge/how_it_works_1.png?branch=main" width="75%" alt="A cuddly document and a purple yeti coding" class="img_ev3q"></td><td style="border:0px;text-align:center"><img loading="lazy" src="https://docs.microsoft.com/en-us/media/learn/challenge/how_it_works_2.png?branch=main" width="75%" alt="A cuddly document and a purple yeti coding" class="img_ev3q"></td><td style="border:0px;text-align:center"><img loading="lazy" src="https://docs.microsoft.com/en-us/media/learn/challenge/how_it_works_3.png?branch=main" width="75%" alt="A cuddly document and a purple yeti coding" class="img_ev3q"></td></tr><tr style="border:0px;background-color:#00000000"><td style="border:0px;vertical-align:top"><b>Compete</b><br><br>Benchmark your progress against friends and coworkers. It's always better when we learn together.</td><td style="border:0px;vertical-align:top"><b>Learn</b><br><br>Increase your understanding with easy-to-read instruction and stay up on the bleeding-edge of technology.</td><td style="border:0px;vertical-align:top"><b>Develop skills</b><br><br>By the end of the challenge, you will have marketable skills to better yourself and your career.</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-for-beginners">IoT For Beginners<a class="hash-link" href="#iot-for-beginners" title="Direct link to heading">​</a></h2><p><a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for beginners</a> is a free, open source, 24-lesson IoT curriculum. The first lesson is live-streamed today from the Microsoft Reactor. Catch the recording on the Microsoft Reactor YouTube channel.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/1KVrBjSqS5s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe><p>Learn more about IoT for Beginners on the official <a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for Beginners GitHub repo</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="digital-swag">Digital swag<a class="hash-link" href="#digital-swag" title="Direct link to heading">​</a></h2><p>Check out <a href="/digitalswag">digital swag</a> page for #JulyOT social media images, sticker templates, desktop backgrounds and video chat backgrounds.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>kickoff</category>
            <category>iot4b</category>
            <category>embeddediot</category>
            <category>aiatedge</category>
            <category>iotcerts</category>
        </item>
        <item>
            <title><![CDATA[00: #JulyOT Is Coming!]]></title>
            <link>https://JulyOT.dev/blog/julyot-teaser</link>
            <guid>julyot-teaser</guid>
            <pubDate>Thu, 23 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[#JulyOT is coming!]]></description>
            <content:encoded><![CDATA[<blockquote><p>#JulyOT is coming!</p></blockquote><p><img loading="lazy" alt="Jumpstart 31 days of IoT celebrations with #JulyOT" src="/assets/images/julyot-kickoff-banner-774571809d044932ac743c7c2a48c205.png" width="1000" height="420" class="img_ev3q"></p><p>We can't believe it's already the last week of June!! Wait - you know what that means right?</p><p>Clear up your cables, dust off your Raspberry Pi, dig our your Arduino board, fire up Visual Studio Code with PlatformIO, or the Arduino IDE, and login to the cloud! It's almost time to celebrate the Internet of Things, one thing at a time! It's almost #JulyOT!</p><p><img loading="lazy" alt="Animated JulyOT logo" src="/assets/images/julyot-single-loop-ba379e340a5963a2448fb21a1842c673.gif" width="480" height="270" class="img_ev3q"></p><p>As always #JulyOT will be kicking off on the 1st July, and every day we will be bringing you some awesome IoT content to get you excited about the Internet of Things.</p><p>We'll have a mix of live streams, videos, blog posts and code samples, all grouped into the following themes:</p><ul><li>Beginners, makers, and students</li><li>Embedded development</li><li>AI on the Edge</li><li>Learning and certifications</li></ul><p>We invite everyone to build and share your creations throughout month as you gain knowledge from these and other resources throughout #JulyOT!  Be sure to spread the word about this initiative and your own projects by sharing the <a href="https://twitter.com/hashtag/JulyOT" target="_blank" rel="noopener noreferrer">hashtag #JulyOT on social media</a>! We'll be sharing our favorite projects that we find.</p><p>Check back here daily to get all the latest goodness, or subscribe to <a href="https://julyot.dev/blog/rss.xml" target="_blank" rel="noopener noreferrer">our RSS feed</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="julyot-has-a-new-home">#JulyOT has a new home!<a class="hash-link" href="#julyot-has-a-new-home" title="Direct link to heading">​</a></h2><p>In the past #JulyOT has lived on the <a href="https://techcommunity.microsoft.com/t5/internet-of-things-blog/bg-p/IoTBlog" target="_blank" rel="noopener noreferrer">Microsoft IoT Tech Community</a>, but going forward we have a new home - here at <a href="https://julyOT.dev" target="_blank" rel="noopener noreferrer">JulyOT.dev</a>.</p><p>All the content for #JulyOT now lives <a href="https://github.com/JulyOT/JulyOT" target="_blank" rel="noopener noreferrer">in GitHub</a>. If you want to submit content then join us there, raise an issue with what you want to add, and we can help get your content shared with the world. For blog posts you can write the whole post here, or link out to your own blog. For all other content we can link to your GitHub repo, video or wherever!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="juliot">#JulIoT<a class="hash-link" href="#juliot" title="Direct link to heading">​</a></h2><p>#JulyOT is spreading it wings to Spanish! We are excited to bring you #JulIoT!</p><p><img loading="lazy" alt="Julio T anumated logo" src="/assets/images/juliot-811c2295bd57326df719b623d18e3252.gif" width="480" height="270" class="img_ev3q"></p><p>We have some live streams and blogs in Spanish lined up for you over the month. Check out the <a href="/livestreams">live streams</a> page for a sneak peak of whats coming!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="our-first-event">Our first event<a class="hash-link" href="#our-first-event" title="Direct link to heading">​</a></h2><p>Launching #JulyOT will be a series of IoT for Beginners live streams, based off the hugely popular <a href="https://aka.ms/iot-beginners" target="_blank" rel="noopener noreferrer">IoT for Beginners Curriculum</a> that offers 24 free, open source lessons on IoT. We will be running the first 4 lessons as live streams, starting Friday 1st July at 9am Pacific Time.</p><a href="https://www.meetup.com/Microsoft-Reactor-Redmond/events/286453689/" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://www.meetup.com/_next/image/?url=https%3A%2F%2Fsecure-content.meetupstatic.com%2Fimages%2Fclassic-events%2F504717110%2F676x380.webp&amp;w=3840&amp;q=75" width="45%" alt="IoT for beginners - Lesson 1, Introduction to IoT, Friday July 1st, 9am Pacific Time" class="img_ev3q"></a><p>You can register for this event on Meetup.com and get a reminder, or join us on YouTube.</p><a href="https://www.meetup.com/Microsoft-Reactor-Redmond/events/286453689" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/jimbobbennett/ColoredBadges/main/svg/social/meetup.svg" alt="Meetup registration link" class="img_ev3q"></a>  <a href="https://aka.ms/IoTforbeginnersLess1" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://raw.githubusercontent.com/jimbobbennett/ColoredBadges/main/svg/streaming/youtube.svg" alt="YouTube live stream link" class="img_ev3q"></a><h2 class="anchor anchorWithStickyNavbar_LWe7" id="microsoft-cloud-skills-challenge">Microsoft Cloud Skills challenge<a class="hash-link" href="#microsoft-cloud-skills-challenge" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="A cartoon racoon holding medals" src="/assets/images/image_medals-cb4e42548a6345130e3aca09f2968f3d.svg" width="151" height="168" class="img_ev3q"></p><p>As part of #JulyOT we will be running a Microsoft Cloud Skills challenge, giving you a guided path to learn the Microsoft IoT stack, and compete in your learning against others. Check out the <a href="/skills">Cloud Skills Challenge page</a> to sign up!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="julyot-digital-swag">JulyOT digital swag<a class="hash-link" href="#julyot-digital-swag" title="Direct link to heading">​</a></h2><p>This year we also have <a href="/digitalswag">#JulyOT digital swag</a>! Get a new desktop background, or a background for your favorite video chat tool like Microsoft Teams.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iot-resources">IoT resources<a class="hash-link" href="#iot-resources" title="Direct link to heading">​</a></h2><p>For more IoT resources, check out the <a href="/resources">resources link</a> above. Whether you want videos to help you learn, or beginner tutorials, we have you covered.</p>]]></content:encoded>
            <category>30days</category>
            <category>iot</category>
            <category>kickoff</category>
            <category>iot4b</category>
            <category>embeddediot</category>
            <category>aiatedge</category>
            <category>iotcerts</category>
        </item>
    </channel>
</rss>